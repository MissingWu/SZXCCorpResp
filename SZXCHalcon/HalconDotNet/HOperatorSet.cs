using System;

namespace SZXCArimEngine
{
	public class HOperatorSet
	{
		public static void UnionCotangentialContoursXld(HObject contours, out HObject unionContours, HTuple fitClippingLength, HTuple fitLength, HTuple maxTangAngle, HTuple maxDist, HTuple maxDistPerp, HTuple maxOverlap, HTuple mode)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(0);
			SZXCArimAPI.Store(expr_06, 1, contours);
			SZXCArimAPI.Store(expr_06, 0, fitClippingLength);
			SZXCArimAPI.Store(expr_06, 1, fitLength);
			SZXCArimAPI.Store(expr_06, 2, maxTangAngle);
			SZXCArimAPI.Store(expr_06, 3, maxDist);
			SZXCArimAPI.Store(expr_06, 4, maxDistPerp);
			SZXCArimAPI.Store(expr_06, 5, maxOverlap);
			SZXCArimAPI.Store(expr_06, 6, mode);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			SZXCArimAPI.UnpinTuple(fitClippingLength);
			SZXCArimAPI.UnpinTuple(fitLength);
			SZXCArimAPI.UnpinTuple(maxTangAngle);
			SZXCArimAPI.UnpinTuple(maxDist);
			SZXCArimAPI.UnpinTuple(maxDistPerp);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_06, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(contours);
		}

		public static void PolarTransContourXldInv(HObject polarContour, out HObject XYTransContour, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple widthIn, HTuple heightIn, HTuple width, HTuple height)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(1);
			SZXCArimAPI.Store(expr_06, 1, polarContour);
			SZXCArimAPI.Store(expr_06, 0, row);
			SZXCArimAPI.Store(expr_06, 1, column);
			SZXCArimAPI.Store(expr_06, 2, angleStart);
			SZXCArimAPI.Store(expr_06, 3, angleEnd);
			SZXCArimAPI.Store(expr_06, 4, radiusStart);
			SZXCArimAPI.Store(expr_06, 5, radiusEnd);
			SZXCArimAPI.Store(expr_06, 6, widthIn);
			SZXCArimAPI.Store(expr_06, 7, heightIn);
			SZXCArimAPI.Store(expr_06, 8, width);
			SZXCArimAPI.Store(expr_06, 9, height);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(widthIn);
			SZXCArimAPI.UnpinTuple(heightIn);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_06, 1, num, out XYTransContour);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(polarContour);
		}

		public static void PolarTransContourXld(HObject contour, out HObject polarTransContour, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple width, HTuple height)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(2);
			SZXCArimAPI.Store(expr_06, 1, contour);
			SZXCArimAPI.Store(expr_06, 0, row);
			SZXCArimAPI.Store(expr_06, 1, column);
			SZXCArimAPI.Store(expr_06, 2, angleStart);
			SZXCArimAPI.Store(expr_06, 3, angleEnd);
			SZXCArimAPI.Store(expr_06, 4, radiusStart);
			SZXCArimAPI.Store(expr_06, 5, radiusEnd);
			SZXCArimAPI.Store(expr_06, 6, width);
			SZXCArimAPI.Store(expr_06, 7, height);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_06, 1, num, out polarTransContour);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(contour);
		}

		public static void GenNurbsInterp(HTuple rows, HTuple cols, HTuple tangents, HTuple degree, out HTuple ctrlRows, out HTuple ctrlCols, out HTuple knots)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(3);
			SZXCArimAPI.Store(expr_06, 0, rows);
			SZXCArimAPI.Store(expr_06, 1, cols);
			SZXCArimAPI.Store(expr_06, 2, tangents);
			SZXCArimAPI.Store(expr_06, 3, degree);
			SZXCArimAPI.InitOCT(expr_06, 0);
			SZXCArimAPI.InitOCT(expr_06, 1);
			SZXCArimAPI.InitOCT(expr_06, 2);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(cols);
			SZXCArimAPI.UnpinTuple(tangents);
			SZXCArimAPI.UnpinTuple(degree);
			num = HTuple.LoadNew(expr_06, 0, HTupleType.DOUBLE, num, out ctrlRows);
			num = HTuple.LoadNew(expr_06, 1, HTupleType.DOUBLE, num, out ctrlCols);
			num = HTuple.LoadNew(expr_06, 2, HTupleType.DOUBLE, num, out knots);
			SZXCArimAPI.PostCall(expr_06, num);
		}

		public static void GenContourNurbsXld(out HObject contour, HTuple rows, HTuple cols, HTuple knots, HTuple weights, HTuple degree, HTuple maxError, HTuple maxDistance)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(4);
			SZXCArimAPI.Store(expr_06, 0, rows);
			SZXCArimAPI.Store(expr_06, 1, cols);
			SZXCArimAPI.Store(expr_06, 2, knots);
			SZXCArimAPI.Store(expr_06, 3, weights);
			SZXCArimAPI.Store(expr_06, 4, degree);
			SZXCArimAPI.Store(expr_06, 5, maxError);
			SZXCArimAPI.Store(expr_06, 6, maxDistance);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(cols);
			SZXCArimAPI.UnpinTuple(knots);
			SZXCArimAPI.UnpinTuple(weights);
			SZXCArimAPI.UnpinTuple(degree);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(maxDistance);
			num = HObject.LoadNew(expr_06, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_06, num);
		}

		public static void Union2ClosedPolygonsXld(HObject polygons1, HObject polygons2, out HObject polygonsUnion)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(5);
			SZXCArimAPI.Store(expr_06, 1, polygons1);
			SZXCArimAPI.Store(expr_06, 2, polygons2);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			num = HObject.LoadNew(expr_06, 1, num, out polygonsUnion);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(polygons1);
			GC.KeepAlive(polygons2);
		}

		public static void Union2ClosedContoursXld(HObject contours1, HObject contours2, out HObject contoursUnion)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(6);
			SZXCArimAPI.Store(expr_06, 1, contours1);
			SZXCArimAPI.Store(expr_06, 2, contours2);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			num = HObject.LoadNew(expr_06, 1, num, out contoursUnion);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(contours1);
			GC.KeepAlive(contours2);
		}

		public static void SymmDifferenceClosedPolygonsXld(HObject polygons1, HObject polygons2, out HObject polygonsDifference)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(7);
			SZXCArimAPI.Store(expr_06, 1, polygons1);
			SZXCArimAPI.Store(expr_06, 2, polygons2);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			num = HObject.LoadNew(expr_06, 1, num, out polygonsDifference);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(polygons1);
			GC.KeepAlive(polygons2);
		}

		public static void SymmDifferenceClosedContoursXld(HObject contours1, HObject contours2, out HObject contoursDifference)
		{
			IntPtr expr_06 = SZXCArimAPI.PreCall(8);
			SZXCArimAPI.Store(expr_06, 1, contours1);
			SZXCArimAPI.Store(expr_06, 2, contours2);
			SZXCArimAPI.InitOCT(expr_06, 1);
			int num = SZXCArimAPI.CallProcedure(expr_06);
			num = HObject.LoadNew(expr_06, 1, num, out contoursDifference);
			SZXCArimAPI.PostCall(expr_06, num);
			GC.KeepAlive(contours1);
			GC.KeepAlive(contours2);
		}

		public static void DifferenceClosedPolygonsXld(HObject polygons, HObject sub, out HObject polygonsDifference)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(9);
			SZXCArimAPI.Store(expr_07, 1, polygons);
			SZXCArimAPI.Store(expr_07, 2, sub);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out polygonsDifference);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygons);
			GC.KeepAlive(sub);
		}

		public static void DifferenceClosedContoursXld(HObject contours, HObject sub, out HObject contoursDifference)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(10);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 2, sub);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out contoursDifference);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
			GC.KeepAlive(sub);
		}

		public static void IntersectionClosedPolygonsXld(HObject polygons1, HObject polygons2, out HObject polygonsIntersection)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(11);
			SZXCArimAPI.Store(expr_07, 1, polygons1);
			SZXCArimAPI.Store(expr_07, 2, polygons2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out polygonsIntersection);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygons1);
			GC.KeepAlive(polygons2);
		}

		public static void IntersectionClosedContoursXld(HObject contours1, HObject contours2, out HObject contoursIntersection)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(12);
			SZXCArimAPI.Store(expr_07, 1, contours1);
			SZXCArimAPI.Store(expr_07, 2, contours2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out contoursIntersection);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours1);
			GC.KeepAlive(contours2);
		}

		public static void UnionCocircularContoursXld(HObject contours, out HObject unionContours, HTuple maxArcAngleDiff, HTuple maxArcOverlap, HTuple maxTangentAngle, HTuple maxDist, HTuple maxRadiusDiff, HTuple maxCenterDist, HTuple mergeSmallContours, HTuple iterations)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(13);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, maxArcAngleDiff);
			SZXCArimAPI.Store(expr_07, 1, maxArcOverlap);
			SZXCArimAPI.Store(expr_07, 2, maxTangentAngle);
			SZXCArimAPI.Store(expr_07, 3, maxDist);
			SZXCArimAPI.Store(expr_07, 4, maxRadiusDiff);
			SZXCArimAPI.Store(expr_07, 5, maxCenterDist);
			SZXCArimAPI.Store(expr_07, 6, mergeSmallContours);
			SZXCArimAPI.Store(expr_07, 7, iterations);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxArcAngleDiff);
			SZXCArimAPI.UnpinTuple(maxArcOverlap);
			SZXCArimAPI.UnpinTuple(maxTangentAngle);
			SZXCArimAPI.UnpinTuple(maxDist);
			SZXCArimAPI.UnpinTuple(maxRadiusDiff);
			SZXCArimAPI.UnpinTuple(maxCenterDist);
			SZXCArimAPI.UnpinTuple(mergeSmallContours);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void CropContoursXld(HObject contours, out HObject croppedContours, HTuple row1, HTuple col1, HTuple row2, HTuple col2, HTuple closeContours)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(14);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, row1);
			SZXCArimAPI.Store(expr_07, 1, col1);
			SZXCArimAPI.Store(expr_07, 2, row2);
			SZXCArimAPI.Store(expr_07, 3, col2);
			SZXCArimAPI.Store(expr_07, 4, closeContours);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(col1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(col2);
			SZXCArimAPI.UnpinTuple(closeContours);
			num = HObject.LoadNew(expr_07, 1, num, out croppedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void GenCrossContourXld(out HObject cross, HTuple row, HTuple col, HTuple size, HTuple angle)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(15);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, col);
			SZXCArimAPI.Store(expr_07, 2, size);
			SZXCArimAPI.Store(expr_07, 3, angle);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			SZXCArimAPI.UnpinTuple(size);
			SZXCArimAPI.UnpinTuple(angle);
			num = HObject.LoadNew(expr_07, 1, num, out cross);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void SortContoursXld(HObject contours, out HObject sortedContours, HTuple sortMode, HTuple order, HTuple rowOrCol)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(16);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, sortMode);
			SZXCArimAPI.Store(expr_07, 1, order);
			SZXCArimAPI.Store(expr_07, 2, rowOrCol);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(sortMode);
			SZXCArimAPI.UnpinTuple(order);
			SZXCArimAPI.UnpinTuple(rowOrCol);
			num = HObject.LoadNew(expr_07, 1, num, out sortedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void MergeContLineScanXld(HObject currConts, HObject prevConts, out HObject currMergedConts, out HObject prevMergedConts, HTuple imageHeight, HTuple margin, HTuple mergeBorder, HTuple maxImagesCont)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(17);
			SZXCArimAPI.Store(expr_07, 1, currConts);
			SZXCArimAPI.Store(expr_07, 2, prevConts);
			SZXCArimAPI.Store(expr_07, 0, imageHeight);
			SZXCArimAPI.Store(expr_07, 1, margin);
			SZXCArimAPI.Store(expr_07, 2, mergeBorder);
			SZXCArimAPI.Store(expr_07, 3, maxImagesCont);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(margin);
			SZXCArimAPI.UnpinTuple(mergeBorder);
			SZXCArimAPI.UnpinTuple(maxImagesCont);
			num = HObject.LoadNew(expr_07, 1, num, out currMergedConts);
			num = HObject.LoadNew(expr_07, 2, num, out prevMergedConts);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(currConts);
			GC.KeepAlive(prevConts);
		}

		public static void ReadPolygonXldArcInfo(out HObject polygons, HTuple fileName)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(18);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_07, 1, num, out polygons);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void WritePolygonXldArcInfo(HObject polygons, HTuple fileName)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(19);
			SZXCArimAPI.Store(expr_07, 1, polygons);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_07, procResult);
			GC.KeepAlive(polygons);
		}

		public static void ReadContourXldArcInfo(out HObject contours, HTuple fileName)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(20);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_07, 1, num, out contours);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void WriteContourXldArcInfo(HObject contours, HTuple fileName)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(21);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_07, procResult);
			GC.KeepAlive(contours);
		}

		public static void ReadWorldFile(HTuple fileName, out HTuple worldTransformation)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(22);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out worldTransformation);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void GenParallelContourXld(HObject contours, out HObject parallelContours, HTuple mode, HTuple distance)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(23);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, distance);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(distance);
			num = HObject.LoadNew(expr_07, 1, num, out parallelContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void GenRectangle2ContourXld(out HObject rectangle, HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(24);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, column);
			SZXCArimAPI.Store(expr_07, 2, phi);
			SZXCArimAPI.Store(expr_07, 3, length1);
			SZXCArimAPI.Store(expr_07, 4, length2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			num = HObject.LoadNew(expr_07, 1, num, out rectangle);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void DistRectangle2ContourPointsXld(HObject contour, HTuple clippingEndPoints, HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2, out HTuple distances)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(25);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 1, row);
			SZXCArimAPI.Store(expr_07, 2, column);
			SZXCArimAPI.Store(expr_07, 3, phi);
			SZXCArimAPI.Store(expr_07, 4, length1);
			SZXCArimAPI.Store(expr_07, 5, length2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out distances);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void FitRectangle2ContourXld(HObject contours, HTuple algorithm, HTuple maxNumPoints, HTuple maxClosureDist, HTuple clippingEndPoints, HTuple iterations, HTuple clippingFactor, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2, out HTuple pointOrder)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(26);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, algorithm);
			SZXCArimAPI.Store(expr_07, 1, maxNumPoints);
			SZXCArimAPI.Store(expr_07, 2, maxClosureDist);
			SZXCArimAPI.Store(expr_07, 3, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 4, iterations);
			SZXCArimAPI.Store(expr_07, 5, clippingFactor);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(maxNumPoints);
			SZXCArimAPI.UnpinTuple(maxClosureDist);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out length2);
			num = HTuple.LoadNew(expr_07, 5, num, out pointOrder);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void SegmentContourAttribXld(HObject contour, out HObject contourPart, HTuple attribute, HTuple operation, HTuple min, HTuple max)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(27);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, attribute);
			SZXCArimAPI.Store(expr_07, 1, operation);
			SZXCArimAPI.Store(expr_07, 2, min);
			SZXCArimAPI.Store(expr_07, 3, max);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(attribute);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_07, 1, num, out contourPart);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void SegmentContoursXld(HObject contours, out HObject contoursSplit, HTuple mode, HTuple smoothCont, HTuple maxLineDist1, HTuple maxLineDist2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(28);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, smoothCont);
			SZXCArimAPI.Store(expr_07, 2, maxLineDist1);
			SZXCArimAPI.Store(expr_07, 3, maxLineDist2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(smoothCont);
			SZXCArimAPI.UnpinTuple(maxLineDist1);
			SZXCArimAPI.UnpinTuple(maxLineDist2);
			num = HObject.LoadNew(expr_07, 1, num, out contoursSplit);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void FitCircleContourXld(HObject contours, HTuple algorithm, HTuple maxNumPoints, HTuple maxClosureDist, HTuple clippingEndPoints, HTuple iterations, HTuple clippingFactor, out HTuple row, out HTuple column, out HTuple radius, out HTuple startPhi, out HTuple endPhi, out HTuple pointOrder)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(29);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, algorithm);
			SZXCArimAPI.Store(expr_07, 1, maxNumPoints);
			SZXCArimAPI.Store(expr_07, 2, maxClosureDist);
			SZXCArimAPI.Store(expr_07, 3, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 4, iterations);
			SZXCArimAPI.Store(expr_07, 5, clippingFactor);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(maxNumPoints);
			SZXCArimAPI.UnpinTuple(maxClosureDist);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out radius);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out startPhi);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out endPhi);
			num = HTuple.LoadNew(expr_07, 5, num, out pointOrder);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void FitLineContourXld(HObject contours, HTuple algorithm, HTuple maxNumPoints, HTuple clippingEndPoints, HTuple iterations, HTuple clippingFactor, out HTuple rowBegin, out HTuple colBegin, out HTuple rowEnd, out HTuple colEnd, out HTuple nr, out HTuple nc, out HTuple dist)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(30);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, algorithm);
			SZXCArimAPI.Store(expr_07, 1, maxNumPoints);
			SZXCArimAPI.Store(expr_07, 2, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 3, iterations);
			SZXCArimAPI.Store(expr_07, 4, clippingFactor);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			SZXCArimAPI.InitOCT(expr_07, 6);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(maxNumPoints);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out rowBegin);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out colBegin);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out rowEnd);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out colEnd);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out nr);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out nc);
			num = HTuple.LoadNew(expr_07, 6, HTupleType.DOUBLE, num, out dist);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void DistEllipseContourPointsXld(HObject contour, HTuple distanceMode, HTuple clippingEndPoints, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, out HTuple distances)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(31);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, distanceMode);
			SZXCArimAPI.Store(expr_07, 1, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 2, row);
			SZXCArimAPI.Store(expr_07, 3, column);
			SZXCArimAPI.Store(expr_07, 4, phi);
			SZXCArimAPI.Store(expr_07, 5, radius1);
			SZXCArimAPI.Store(expr_07, 6, radius2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(distanceMode);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out distances);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void DistEllipseContourXld(HObject contours, HTuple mode, HTuple maxNumPoints, HTuple clippingEndPoints, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, out HTuple minDist, out HTuple maxDist, out HTuple avgDist, out HTuple sigmaDist)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(32);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, maxNumPoints);
			SZXCArimAPI.Store(expr_07, 2, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 3, row);
			SZXCArimAPI.Store(expr_07, 4, column);
			SZXCArimAPI.Store(expr_07, 5, phi);
			SZXCArimAPI.Store(expr_07, 6, radius1);
			SZXCArimAPI.Store(expr_07, 7, radius2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(maxNumPoints);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out minDist);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out maxDist);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out avgDist);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out sigmaDist);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void FitEllipseContourXld(HObject contours, HTuple algorithm, HTuple maxNumPoints, HTuple maxClosureDist, HTuple clippingEndPoints, HTuple vossTabSize, HTuple iterations, HTuple clippingFactor, out HTuple row, out HTuple column, out HTuple phi, out HTuple radius1, out HTuple radius2, out HTuple startPhi, out HTuple endPhi, out HTuple pointOrder)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(33);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, algorithm);
			SZXCArimAPI.Store(expr_07, 1, maxNumPoints);
			SZXCArimAPI.Store(expr_07, 2, maxClosureDist);
			SZXCArimAPI.Store(expr_07, 3, clippingEndPoints);
			SZXCArimAPI.Store(expr_07, 4, vossTabSize);
			SZXCArimAPI.Store(expr_07, 5, iterations);
			SZXCArimAPI.Store(expr_07, 6, clippingFactor);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			SZXCArimAPI.InitOCT(expr_07, 6);
			SZXCArimAPI.InitOCT(expr_07, 7);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(maxNumPoints);
			SZXCArimAPI.UnpinTuple(maxClosureDist);
			SZXCArimAPI.UnpinTuple(clippingEndPoints);
			SZXCArimAPI.UnpinTuple(vossTabSize);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out radius1);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out radius2);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out startPhi);
			num = HTuple.LoadNew(expr_07, 6, HTupleType.DOUBLE, num, out endPhi);
			num = HTuple.LoadNew(expr_07, 7, num, out pointOrder);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void GenCircleContourXld(out HObject contCircle, HTuple row, HTuple column, HTuple radius, HTuple startPhi, HTuple endPhi, HTuple pointOrder, HTuple resolution)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(34);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, column);
			SZXCArimAPI.Store(expr_07, 2, radius);
			SZXCArimAPI.Store(expr_07, 3, startPhi);
			SZXCArimAPI.Store(expr_07, 4, endPhi);
			SZXCArimAPI.Store(expr_07, 5, pointOrder);
			SZXCArimAPI.Store(expr_07, 6, resolution);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(startPhi);
			SZXCArimAPI.UnpinTuple(endPhi);
			SZXCArimAPI.UnpinTuple(pointOrder);
			SZXCArimAPI.UnpinTuple(resolution);
			num = HObject.LoadNew(expr_07, 1, num, out contCircle);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void GenEllipseContourXld(out HObject contEllipse, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, HTuple startPhi, HTuple endPhi, HTuple pointOrder, HTuple resolution)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(35);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, column);
			SZXCArimAPI.Store(expr_07, 2, phi);
			SZXCArimAPI.Store(expr_07, 3, radius1);
			SZXCArimAPI.Store(expr_07, 4, radius2);
			SZXCArimAPI.Store(expr_07, 5, startPhi);
			SZXCArimAPI.Store(expr_07, 6, endPhi);
			SZXCArimAPI.Store(expr_07, 7, pointOrder);
			SZXCArimAPI.Store(expr_07, 8, resolution);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			SZXCArimAPI.UnpinTuple(startPhi);
			SZXCArimAPI.UnpinTuple(endPhi);
			SZXCArimAPI.UnpinTuple(pointOrder);
			SZXCArimAPI.UnpinTuple(resolution);
			num = HObject.LoadNew(expr_07, 1, num, out contEllipse);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void AddNoiseWhiteContourXld(HObject contours, out HObject noisyContours, HTuple numRegrPoints, HTuple amp)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(36);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, numRegrPoints);
			SZXCArimAPI.Store(expr_07, 1, amp);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(numRegrPoints);
			SZXCArimAPI.UnpinTuple(amp);
			num = HObject.LoadNew(expr_07, 1, num, out noisyContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void CombineRoadsXld(HObject edgePolygons, HObject modParallels, HObject extParallels, HObject centerLines, out HObject roadSides, HTuple maxAngleParallel, HTuple maxAngleColinear, HTuple maxDistanceParallel, HTuple maxDistanceColinear)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(37);
			SZXCArimAPI.Store(expr_07, 1, edgePolygons);
			SZXCArimAPI.Store(expr_07, 2, modParallels);
			SZXCArimAPI.Store(expr_07, 3, extParallels);
			SZXCArimAPI.Store(expr_07, 4, centerLines);
			SZXCArimAPI.Store(expr_07, 0, maxAngleParallel);
			SZXCArimAPI.Store(expr_07, 1, maxAngleColinear);
			SZXCArimAPI.Store(expr_07, 2, maxDistanceParallel);
			SZXCArimAPI.Store(expr_07, 3, maxDistanceColinear);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxAngleParallel);
			SZXCArimAPI.UnpinTuple(maxAngleColinear);
			SZXCArimAPI.UnpinTuple(maxDistanceParallel);
			SZXCArimAPI.UnpinTuple(maxDistanceColinear);
			num = HObject.LoadNew(expr_07, 1, num, out roadSides);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(edgePolygons);
			GC.KeepAlive(modParallels);
			GC.KeepAlive(extParallels);
			GC.KeepAlive(centerLines);
		}

		public static void MaxParallelsXld(HObject extParallels, out HObject maxPolygons)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(38);
			SZXCArimAPI.Store(expr_07, 1, extParallels);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out maxPolygons);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(extParallels);
		}

		public static void ModParallelsXld(HObject parallels, HObject image, out HObject modParallels, out HObject extParallels, HTuple quality, HTuple minGray, HTuple maxGray, HTuple maxStandard)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(39);
			SZXCArimAPI.Store(expr_07, 1, parallels);
			SZXCArimAPI.Store(expr_07, 2, image);
			SZXCArimAPI.Store(expr_07, 0, quality);
			SZXCArimAPI.Store(expr_07, 1, minGray);
			SZXCArimAPI.Store(expr_07, 2, maxGray);
			SZXCArimAPI.Store(expr_07, 3, maxStandard);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(quality);
			SZXCArimAPI.UnpinTuple(minGray);
			SZXCArimAPI.UnpinTuple(maxGray);
			SZXCArimAPI.UnpinTuple(maxStandard);
			num = HObject.LoadNew(expr_07, 1, num, out modParallels);
			num = HObject.LoadNew(expr_07, 2, num, out extParallels);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(parallels);
			GC.KeepAlive(image);
		}

		public static void InfoParallelsXld(HObject parallels, HObject image, out HTuple qualityMin, out HTuple qualityMax, out HTuple grayMin, out HTuple grayMax, out HTuple standardMin, out HTuple standardMax)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(40);
			SZXCArimAPI.Store(expr_07, 1, parallels);
			SZXCArimAPI.Store(expr_07, 2, image);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out qualityMin);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out qualityMax);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.INTEGER, num, out grayMin);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.INTEGER, num, out grayMax);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out standardMin);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out standardMax);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(parallels);
			GC.KeepAlive(image);
		}

		public static void GetParallelsXld(HObject parallels, out HTuple row1, out HTuple col1, out HTuple length1, out HTuple phi1, out HTuple row2, out HTuple col2, out HTuple length2, out HTuple phi2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(41);
			SZXCArimAPI.Store(expr_07, 1, parallels);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			SZXCArimAPI.InitOCT(expr_07, 6);
			SZXCArimAPI.InitOCT(expr_07, 7);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out col1);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out phi1);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out col2);
			num = HTuple.LoadNew(expr_07, 6, HTupleType.DOUBLE, num, out length2);
			num = HTuple.LoadNew(expr_07, 7, HTupleType.DOUBLE, num, out phi2);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(parallels);
		}

		public static void GenParallelsXld(HObject polygons, out HObject parallels, HTuple len, HTuple dist, HTuple alpha, HTuple merge)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(42);
			SZXCArimAPI.Store(expr_07, 1, polygons);
			SZXCArimAPI.Store(expr_07, 0, len);
			SZXCArimAPI.Store(expr_07, 1, dist);
			SZXCArimAPI.Store(expr_07, 2, alpha);
			SZXCArimAPI.Store(expr_07, 3, merge);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(len);
			SZXCArimAPI.UnpinTuple(dist);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(merge);
			num = HObject.LoadNew(expr_07, 1, num, out parallels);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygons);
		}

		public static void GetLinesXld(HObject polygon, out HTuple beginRow, out HTuple beginCol, out HTuple endRow, out HTuple endCol, out HTuple length, out HTuple phi)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(43);
			SZXCArimAPI.Store(expr_07, 1, polygon);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out beginRow);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out beginCol);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out endRow);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out endCol);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out length);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygon);
		}

		public static void GetPolygonXld(HObject polygon, out HTuple row, out HTuple col, out HTuple length, out HTuple phi)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(44);
			SZXCArimAPI.Store(expr_07, 1, polygon);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out col);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out length);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygon);
		}

		public static void GenPolygonsXld(HObject contours, out HObject polygons, HTuple type, HTuple alpha)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(45);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, type);
			SZXCArimAPI.Store(expr_07, 1, alpha);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(alpha);
			num = HObject.LoadNew(expr_07, 1, num, out polygons);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void SplitContoursXld(HObject polygons, out HObject contours, HTuple mode, HTuple weight, HTuple smooth)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(46);
			SZXCArimAPI.Store(expr_07, 1, polygons);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, weight);
			SZXCArimAPI.Store(expr_07, 2, smooth);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(weight);
			SZXCArimAPI.UnpinTuple(smooth);
			num = HObject.LoadNew(expr_07, 1, num, out contours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygons);
		}

		public static void ProjectiveTransContourXld(HObject contours, out HObject contoursProjTrans, HTuple homMat2D)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(47);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HObject.LoadNew(expr_07, 1, num, out contoursProjTrans);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void AffineTransPolygonXld(HObject polygons, out HObject polygonsAffineTrans, HTuple homMat2D)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(48);
			SZXCArimAPI.Store(expr_07, 1, polygons);
			SZXCArimAPI.Store(expr_07, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HObject.LoadNew(expr_07, 1, num, out polygonsAffineTrans);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(polygons);
		}

		public static void AffineTransContourXld(HObject contours, out HObject contoursAffineTrans, HTuple homMat2D)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(49);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HObject.LoadNew(expr_07, 1, num, out contoursAffineTrans);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void CloseContoursXld(HObject contours, out HObject closedContours)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(50);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out closedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void ClipEndPointsContoursXld(HObject contours, out HObject clippedContours, HTuple mode, HTuple length)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(51);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, length);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(length);
			num = HObject.LoadNew(expr_07, 1, num, out clippedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void ClipContoursXld(HObject contours, out HObject clippedContours, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(52);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, row1);
			SZXCArimAPI.Store(expr_07, 1, column1);
			SZXCArimAPI.Store(expr_07, 2, row2);
			SZXCArimAPI.Store(expr_07, 3, column2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HObject.LoadNew(expr_07, 1, num, out clippedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void LocalMaxContoursXld(HObject contours, HObject image, out HObject localMaxContours, HTuple minPercent, HTuple minDiff, HTuple distance)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(53);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 2, image);
			SZXCArimAPI.Store(expr_07, 0, minPercent);
			SZXCArimAPI.Store(expr_07, 1, minDiff);
			SZXCArimAPI.Store(expr_07, 2, distance);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(minPercent);
			SZXCArimAPI.UnpinTuple(minDiff);
			SZXCArimAPI.UnpinTuple(distance);
			num = HObject.LoadNew(expr_07, 1, num, out localMaxContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
			GC.KeepAlive(image);
		}

		public static void UnionStraightContoursHistoXld(HObject contours, out HObject unionContours, out HObject selectedContours, HTuple refLineStartRow, HTuple refLineStartColumn, HTuple refLineEndRow, HTuple refLineEndColumn, HTuple width, HTuple maxWidth, HTuple filterSize, out HTuple histoValues)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(54);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, refLineStartRow);
			SZXCArimAPI.Store(expr_07, 1, refLineStartColumn);
			SZXCArimAPI.Store(expr_07, 2, refLineEndRow);
			SZXCArimAPI.Store(expr_07, 3, refLineEndColumn);
			SZXCArimAPI.Store(expr_07, 4, width);
			SZXCArimAPI.Store(expr_07, 5, maxWidth);
			SZXCArimAPI.Store(expr_07, 6, filterSize);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(refLineStartRow);
			SZXCArimAPI.UnpinTuple(refLineStartColumn);
			SZXCArimAPI.UnpinTuple(refLineEndRow);
			SZXCArimAPI.UnpinTuple(refLineEndColumn);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(maxWidth);
			SZXCArimAPI.UnpinTuple(filterSize);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			num = HObject.LoadNew(expr_07, 2, num, out selectedContours);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out histoValues);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void UnionStraightContoursXld(HObject contours, out HObject unionContours, HTuple maxDist, HTuple maxDiff, HTuple percent, HTuple mode, HTuple iterations)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(55);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, maxDist);
			SZXCArimAPI.Store(expr_07, 1, maxDiff);
			SZXCArimAPI.Store(expr_07, 2, percent);
			SZXCArimAPI.Store(expr_07, 3, mode);
			SZXCArimAPI.Store(expr_07, 4, iterations);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxDist);
			SZXCArimAPI.UnpinTuple(maxDiff);
			SZXCArimAPI.UnpinTuple(percent);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void UnionCollinearContoursExtXld(HObject contours, out HObject unionContours, HTuple maxDistAbs, HTuple maxDistRel, HTuple maxShift, HTuple maxAngle, HTuple maxOverlap, HTuple maxRegrError, HTuple maxCosts, HTuple weightDist, HTuple weightShift, HTuple weightAngle, HTuple weightLink, HTuple weightRegr, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(56);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, maxDistAbs);
			SZXCArimAPI.Store(expr_07, 1, maxDistRel);
			SZXCArimAPI.Store(expr_07, 2, maxShift);
			SZXCArimAPI.Store(expr_07, 3, maxAngle);
			SZXCArimAPI.Store(expr_07, 4, maxOverlap);
			SZXCArimAPI.Store(expr_07, 5, maxRegrError);
			SZXCArimAPI.Store(expr_07, 6, maxCosts);
			SZXCArimAPI.Store(expr_07, 7, weightDist);
			SZXCArimAPI.Store(expr_07, 8, weightShift);
			SZXCArimAPI.Store(expr_07, 9, weightAngle);
			SZXCArimAPI.Store(expr_07, 10, weightLink);
			SZXCArimAPI.Store(expr_07, 11, weightRegr);
			SZXCArimAPI.Store(expr_07, 12, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxDistAbs);
			SZXCArimAPI.UnpinTuple(maxDistRel);
			SZXCArimAPI.UnpinTuple(maxShift);
			SZXCArimAPI.UnpinTuple(maxAngle);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(maxRegrError);
			SZXCArimAPI.UnpinTuple(maxCosts);
			SZXCArimAPI.UnpinTuple(weightDist);
			SZXCArimAPI.UnpinTuple(weightShift);
			SZXCArimAPI.UnpinTuple(weightAngle);
			SZXCArimAPI.UnpinTuple(weightLink);
			SZXCArimAPI.UnpinTuple(weightRegr);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void UnionCollinearContoursXld(HObject contours, out HObject unionContours, HTuple maxDistAbs, HTuple maxDistRel, HTuple maxShift, HTuple maxAngle, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(57);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, maxDistAbs);
			SZXCArimAPI.Store(expr_07, 1, maxDistRel);
			SZXCArimAPI.Store(expr_07, 2, maxShift);
			SZXCArimAPI.Store(expr_07, 3, maxAngle);
			SZXCArimAPI.Store(expr_07, 4, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxDistAbs);
			SZXCArimAPI.UnpinTuple(maxDistRel);
			SZXCArimAPI.UnpinTuple(maxShift);
			SZXCArimAPI.UnpinTuple(maxAngle);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void UnionAdjacentContoursXld(HObject contours, out HObject unionContours, HTuple maxDistAbs, HTuple maxDistRel, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(58);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, maxDistAbs);
			SZXCArimAPI.Store(expr_07, 1, maxDistRel);
			SZXCArimAPI.Store(expr_07, 2, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maxDistAbs);
			SZXCArimAPI.UnpinTuple(maxDistRel);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out unionContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void SelectContoursXld(HObject contours, out HObject selectedContours, HTuple feature, HTuple min1, HTuple max1, HTuple min2, HTuple max2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(59);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, feature);
			SZXCArimAPI.Store(expr_07, 1, min1);
			SZXCArimAPI.Store(expr_07, 2, max1);
			SZXCArimAPI.Store(expr_07, 3, min2);
			SZXCArimAPI.Store(expr_07, 4, max2);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(min1);
			SZXCArimAPI.UnpinTuple(max1);
			SZXCArimAPI.UnpinTuple(min2);
			SZXCArimAPI.UnpinTuple(max2);
			num = HObject.LoadNew(expr_07, 1, num, out selectedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void GetRegressParamsXld(HObject contours, out HTuple length, out HTuple nx, out HTuple ny, out HTuple dist, out HTuple fpx, out HTuple fpy, out HTuple lpx, out HTuple lpy, out HTuple mean, out HTuple deviation)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(60);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			SZXCArimAPI.InitOCT(expr_07, 3);
			SZXCArimAPI.InitOCT(expr_07, 4);
			SZXCArimAPI.InitOCT(expr_07, 5);
			SZXCArimAPI.InitOCT(expr_07, 6);
			SZXCArimAPI.InitOCT(expr_07, 7);
			SZXCArimAPI.InitOCT(expr_07, 8);
			SZXCArimAPI.InitOCT(expr_07, 9);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out length);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out nx);
			num = HTuple.LoadNew(expr_07, 2, HTupleType.DOUBLE, num, out ny);
			num = HTuple.LoadNew(expr_07, 3, HTupleType.DOUBLE, num, out dist);
			num = HTuple.LoadNew(expr_07, 4, HTupleType.DOUBLE, num, out fpx);
			num = HTuple.LoadNew(expr_07, 5, HTupleType.DOUBLE, num, out fpy);
			num = HTuple.LoadNew(expr_07, 6, HTupleType.DOUBLE, num, out lpx);
			num = HTuple.LoadNew(expr_07, 7, HTupleType.DOUBLE, num, out lpy);
			num = HTuple.LoadNew(expr_07, 8, HTupleType.DOUBLE, num, out mean);
			num = HTuple.LoadNew(expr_07, 9, HTupleType.DOUBLE, num, out deviation);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void RegressContoursXld(HObject contours, out HObject regressContours, HTuple mode, HTuple iterations)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(61);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.Store(expr_07, 1, iterations);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_07, 1, num, out regressContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void GetContourAngleXld(HObject contour, HTuple angleMode, HTuple calcMode, HTuple lookaround, out HTuple angles)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(62);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, angleMode);
			SZXCArimAPI.Store(expr_07, 1, calcMode);
			SZXCArimAPI.Store(expr_07, 2, lookaround);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(angleMode);
			SZXCArimAPI.UnpinTuple(calcMode);
			SZXCArimAPI.UnpinTuple(lookaround);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out angles);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void SmoothContoursXld(HObject contours, out HObject smoothedContours, HTuple numRegrPoints)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(63);
			SZXCArimAPI.Store(expr_07, 1, contours);
			SZXCArimAPI.Store(expr_07, 0, numRegrPoints);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(numRegrPoints);
			num = HObject.LoadNew(expr_07, 1, num, out smoothedContours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contours);
		}

		public static void ContourPointNumXld(HObject contour, out HTuple length)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(64);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out length);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void QueryContourGlobalAttribsXld(HObject contour, out HTuple attribs)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(65);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, num, out attribs);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void GetContourGlobalAttribXld(HObject contour, HTuple name, out HTuple attrib)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(66);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, name);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(name);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out attrib);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void QueryContourAttribsXld(HObject contour, out HTuple attribs)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(67);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, num, out attribs);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void GetContourAttribXld(HObject contour, HTuple name, out HTuple attrib)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(68);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.Store(expr_07, 0, name);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(name);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out attrib);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void GetContourXld(HObject contour, out HTuple row, out HTuple col)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(69);
			SZXCArimAPI.Store(expr_07, 1, contour);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out col);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(contour);
		}

		public static void GenContourRegionXld(HObject regions, out HObject contours, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(70);
			SZXCArimAPI.Store(expr_07, 1, regions);
			SZXCArimAPI.Store(expr_07, 0, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out contours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(regions);
		}

		public static void GenContourPolygonRoundedXld(out HObject contour, HTuple row, HTuple col, HTuple radius, HTuple samplingInterval)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(71);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, col);
			SZXCArimAPI.Store(expr_07, 2, radius);
			SZXCArimAPI.Store(expr_07, 3, samplingInterval);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(samplingInterval);
			num = HObject.LoadNew(expr_07, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void GenContourPolygonXld(out HObject contour, HTuple row, HTuple col)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(72);
			SZXCArimAPI.Store(expr_07, 0, row);
			SZXCArimAPI.Store(expr_07, 1, col);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			num = HObject.LoadNew(expr_07, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void GenContoursSkeletonXld(HObject skeleton, out HObject contours, HTuple length, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(73);
			SZXCArimAPI.Store(expr_07, 1, skeleton);
			SZXCArimAPI.Store(expr_07, 0, length);
			SZXCArimAPI.Store(expr_07, 1, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(length);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out contours);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(skeleton);
		}

		public static void DispXld(HObject XLDObject, HTuple windowHandle)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(74);
			SZXCArimAPI.Store(expr_07, 1, XLDObject);
			SZXCArimAPI.Store(expr_07, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_07, procResult);
			GC.KeepAlive(XLDObject);
		}

		public static void WienerFilterNi(HObject image, HObject psf, HObject noiseRegion, out HObject restoredImage, HTuple maskWidth, HTuple maskHeight)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(75);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 2, psf);
			SZXCArimAPI.Store(expr_07, 3, noiseRegion);
			SZXCArimAPI.Store(expr_07, 0, maskWidth);
			SZXCArimAPI.Store(expr_07, 1, maskHeight);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			num = HObject.LoadNew(expr_07, 1, num, out restoredImage);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
			GC.KeepAlive(psf);
			GC.KeepAlive(noiseRegion);
		}

		public static void WienerFilter(HObject image, HObject psf, HObject filteredImage, out HObject restoredImage)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(76);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 2, psf);
			SZXCArimAPI.Store(expr_07, 3, filteredImage);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			num = HObject.LoadNew(expr_07, 1, num, out restoredImage);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
			GC.KeepAlive(psf);
			GC.KeepAlive(filteredImage);
		}

		public static void GenPsfMotion(out HObject psf, HTuple PSFwidth, HTuple PSFheight, HTuple blurring, HTuple angle, HTuple type)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(77);
			SZXCArimAPI.Store(expr_07, 0, PSFwidth);
			SZXCArimAPI.Store(expr_07, 1, PSFheight);
			SZXCArimAPI.Store(expr_07, 2, blurring);
			SZXCArimAPI.Store(expr_07, 3, angle);
			SZXCArimAPI.Store(expr_07, 4, type);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(PSFwidth);
			SZXCArimAPI.UnpinTuple(PSFheight);
			SZXCArimAPI.UnpinTuple(blurring);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_07, 1, num, out psf);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void SimulateMotion(HObject image, out HObject movedImage, HTuple blurring, HTuple angle, HTuple type)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(78);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 0, blurring);
			SZXCArimAPI.Store(expr_07, 1, angle);
			SZXCArimAPI.Store(expr_07, 2, type);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(blurring);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_07, 1, num, out movedImage);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
		}

		public static void GenPsfDefocus(out HObject psf, HTuple PSFwidth, HTuple PSFheight, HTuple blurring)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(79);
			SZXCArimAPI.Store(expr_07, 0, PSFwidth);
			SZXCArimAPI.Store(expr_07, 1, PSFheight);
			SZXCArimAPI.Store(expr_07, 2, blurring);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(PSFwidth);
			SZXCArimAPI.UnpinTuple(PSFheight);
			SZXCArimAPI.UnpinTuple(blurring);
			num = HObject.LoadNew(expr_07, 1, num, out psf);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void SimulateDefocus(HObject image, out HObject defocusedImage, HTuple blurring)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(80);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 0, blurring);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(blurring);
			num = HObject.LoadNew(expr_07, 1, num, out defocusedImage);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
		}

		public static void DeserializeVariationModel(HTuple serializedItemHandle, out HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(81);
			SZXCArimAPI.Store(expr_07, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_07, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void SerializeVariationModel(HTuple modelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(82);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_07, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void ReadVariationModel(HTuple fileName, out HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(83);
			SZXCArimAPI.Store(expr_07, 0, fileName);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_07, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void WriteVariationModel(HTuple modelID, HTuple fileName)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(84);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.Store(expr_07, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_07, procResult);
		}

		public static void GetThreshImagesVariationModel(out HObject minImage, out HObject maxImage, HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(85);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HObject.LoadNew(expr_07, 1, num, out minImage);
			num = HObject.LoadNew(expr_07, 2, num, out maxImage);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void GetVariationModel(out HObject image, out HObject varImage, HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(86);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.InitOCT(expr_07, 1);
			SZXCArimAPI.InitOCT(expr_07, 2);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HObject.LoadNew(expr_07, 1, num, out image);
			num = HObject.LoadNew(expr_07, 2, num, out varImage);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void CompareExtVariationModel(HObject image, out HObject region, HTuple modelID, HTuple mode)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(87);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.Store(expr_07, 1, mode);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_07, 1, num, out region);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
		}

		public static void CompareVariationModel(HObject image, out HObject region, HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(88);
			SZXCArimAPI.Store(expr_07, 1, image);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HObject.LoadNew(expr_07, 1, num, out region);
			SZXCArimAPI.PostCall(expr_07, num);
			GC.KeepAlive(image);
		}

		public static void PrepareDirectVariationModel(HObject refImage, HObject varImage, HTuple modelID, HTuple absThreshold, HTuple varThreshold)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(89);
			SZXCArimAPI.Store(expr_07, 1, refImage);
			SZXCArimAPI.Store(expr_07, 2, varImage);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.Store(expr_07, 1, absThreshold);
			SZXCArimAPI.Store(expr_07, 2, varThreshold);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(absThreshold);
			SZXCArimAPI.UnpinTuple(varThreshold);
			SZXCArimAPI.PostCall(expr_07, procResult);
			GC.KeepAlive(refImage);
			GC.KeepAlive(varImage);
		}

		public static void PrepareVariationModel(HTuple modelID, HTuple absThreshold, HTuple varThreshold)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(90);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			SZXCArimAPI.Store(expr_07, 1, absThreshold);
			SZXCArimAPI.Store(expr_07, 2, varThreshold);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(absThreshold);
			SZXCArimAPI.UnpinTuple(varThreshold);
			SZXCArimAPI.PostCall(expr_07, procResult);
		}

		public static void TrainVariationModel(HObject images, HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(91);
			SZXCArimAPI.Store(expr_07, 1, images);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_07, procResult);
			GC.KeepAlive(images);
		}

		public static void ClearAllVariationModels()
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(92);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.PostCall(expr_07, procResult);
		}

		public static void ClearVariationModel(HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(93);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_07, procResult);
		}

		public static void ClearTrainDataVariationModel(HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(94);
			SZXCArimAPI.Store(expr_07, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_07, procResult);
		}

		public static void CreateVariationModel(HTuple width, HTuple height, HTuple type, HTuple mode, out HTuple modelID)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(95);
			SZXCArimAPI.Store(expr_07, 0, width);
			SZXCArimAPI.Store(expr_07, 1, height);
			SZXCArimAPI.Store(expr_07, 2, type);
			SZXCArimAPI.Store(expr_07, 3, mode);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_07, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleUnion(HTuple set1, HTuple set2, out HTuple union)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(96);
			SZXCArimAPI.Store(expr_07, 0, set1);
			SZXCArimAPI.Store(expr_07, 1, set2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(set1);
			SZXCArimAPI.UnpinTuple(set2);
			num = HTuple.LoadNew(expr_07, 0, num, out union);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIntersection(HTuple set1, HTuple set2, out HTuple intersection)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(97);
			SZXCArimAPI.Store(expr_07, 0, set1);
			SZXCArimAPI.Store(expr_07, 1, set2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(set1);
			SZXCArimAPI.UnpinTuple(set2);
			num = HTuple.LoadNew(expr_07, 0, num, out intersection);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleDifference(HTuple set1, HTuple set2, out HTuple difference)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(98);
			SZXCArimAPI.Store(expr_07, 0, set1);
			SZXCArimAPI.Store(expr_07, 1, set2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(set1);
			SZXCArimAPI.UnpinTuple(set2);
			num = HTuple.LoadNew(expr_07, 0, num, out difference);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleSymmdiff(HTuple set1, HTuple set2, out HTuple symmDiff)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(99);
			SZXCArimAPI.Store(expr_07, 0, set1);
			SZXCArimAPI.Store(expr_07, 1, set2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(set1);
			SZXCArimAPI.UnpinTuple(set2);
			num = HTuple.LoadNew(expr_07, 0, num, out symmDiff);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsStringElem(HTuple t, out HTuple isString)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(100);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isString);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsRealElem(HTuple t, out HTuple isReal)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(101);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isReal);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsIntElem(HTuple t, out HTuple isInt)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(102);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isInt);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleTypeElem(HTuple t, out HTuple types)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(103);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out types);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsMixed(HTuple t, out HTuple isMixed)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(104);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isMixed);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsString(HTuple t, out HTuple isString)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(105);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isString);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsReal(HTuple t, out HTuple isReal)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(106);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isReal);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleIsInt(HTuple t, out HTuple isInt)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(107);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out isInt);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleType(HTuple t, out HTuple type)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(108);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out type);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleHistoRange(HTuple tuple, HTuple min, HTuple max, HTuple numBins, out HTuple histo, out HTuple binSize)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(109);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.Store(expr_07, 1, min);
			SZXCArimAPI.Store(expr_07, 2, max);
			SZXCArimAPI.Store(expr_07, 3, numBins);
			SZXCArimAPI.InitOCT(expr_07, 0);
			SZXCArimAPI.InitOCT(expr_07, 1);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			SZXCArimAPI.UnpinTuple(numBins);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out histo);
			num = HTuple.LoadNew(expr_07, 1, HTupleType.DOUBLE, num, out binSize);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleRegexpSelect(HTuple data, HTuple expression, out HTuple selection)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(110);
			SZXCArimAPI.Store(expr_07, 0, data);
			SZXCArimAPI.Store(expr_07, 1, expression);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.UnpinTuple(expression);
			num = HTuple.LoadNew(expr_07, 0, num, out selection);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleRegexpTest(HTuple data, HTuple expression, out HTuple numMatches)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(111);
			SZXCArimAPI.Store(expr_07, 0, data);
			SZXCArimAPI.Store(expr_07, 1, expression);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.UnpinTuple(expression);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out numMatches);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleRegexpReplace(HTuple data, HTuple expression, HTuple replace, out HTuple result)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(112);
			SZXCArimAPI.Store(expr_07, 0, data);
			SZXCArimAPI.Store(expr_07, 1, expression);
			SZXCArimAPI.Store(expr_07, 2, replace);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.UnpinTuple(expression);
			SZXCArimAPI.UnpinTuple(replace);
			num = HTuple.LoadNew(expr_07, 0, num, out result);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleRegexpMatch(HTuple data, HTuple expression, out HTuple matches)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(113);
			SZXCArimAPI.Store(expr_07, 0, data);
			SZXCArimAPI.Store(expr_07, 1, expression);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.UnpinTuple(expression);
			num = HTuple.LoadNew(expr_07, 0, num, out matches);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleRand(HTuple length, out HTuple rand)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(114);
			SZXCArimAPI.Store(expr_07, 0, length);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(length);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out rand);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleLength(HTuple tuple, out HTuple length)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(115);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out length);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleSgn(HTuple t, out HTuple sgn)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(116);
			SZXCArimAPI.Store(expr_07, 0, t);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.INTEGER, num, out sgn);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMax2(HTuple t1, HTuple t2, out HTuple max2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(117);
			SZXCArimAPI.Store(expr_07, 0, t1);
			SZXCArimAPI.Store(expr_07, 1, t2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_07, 0, num, out max2);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMin2(HTuple t1, HTuple t2, out HTuple min2)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(118);
			SZXCArimAPI.Store(expr_07, 0, t1);
			SZXCArimAPI.Store(expr_07, 1, t2);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_07, 0, num, out min2);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMax(HTuple tuple, out HTuple max)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(119);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out max);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMin(HTuple tuple, out HTuple min)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(120);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out min);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleCumul(HTuple tuple, out HTuple cumul)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(121);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out cumul);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleSelectRank(HTuple tuple, HTuple rankIndex, out HTuple selected)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(122);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.Store(expr_07, 1, rankIndex);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(rankIndex);
			num = HTuple.LoadNew(expr_07, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMedian(HTuple tuple, out HTuple median)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(123);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out median);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleSum(HTuple tuple, out HTuple sum)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(124);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out sum);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleMean(HTuple tuple, out HTuple mean)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(125);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out mean);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleDeviation(HTuple tuple, out HTuple deviation)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(126);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, HTupleType.DOUBLE, num, out deviation);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleUniq(HTuple tuple, out HTuple uniq)
		{
			IntPtr expr_07 = SZXCArimAPI.PreCall(127);
			SZXCArimAPI.Store(expr_07, 0, tuple);
			SZXCArimAPI.InitOCT(expr_07, 0);
			int num = SZXCArimAPI.CallProcedure(expr_07);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_07, 0, num, out uniq);
			SZXCArimAPI.PostCall(expr_07, num);
		}

		public static void TupleFindLast(HTuple tuple, HTuple toFind, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(128);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFindFirst(HTuple tuple, HTuple toFind, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(129);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFind(HTuple tuple, HTuple toFind, out HTuple indices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(130);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out indices);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSortIndex(HTuple tuple, out HTuple indices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(131);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out indices);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSort(HTuple tuple, out HTuple sorted)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(132);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, num, out sorted);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleInverse(HTuple tuple, out HTuple inverted)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(133);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, num, out inverted);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleConcat(HTuple t1, HTuple t2, out HTuple concat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(134);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, num, out concat);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSelectRange(HTuple tuple, HTuple leftindex, HTuple rightindex, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(135);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, leftindex);
			SZXCArimAPI.Store(expr_0A, 2, rightindex);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(leftindex);
			SZXCArimAPI.UnpinTuple(rightindex);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLastN(HTuple tuple, HTuple index, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(136);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFirstN(HTuple tuple, HTuple index, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(137);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleInsert(HTuple tuple, HTuple index, HTuple insertTuple, out HTuple extended)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(138);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, insertTuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(insertTuple);
			num = HTuple.LoadNew(expr_0A, 0, num, out extended);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleReplace(HTuple tuple, HTuple index, HTuple replaceTuple, out HTuple replaced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(139);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, replaceTuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(replaceTuple);
			num = HTuple.LoadNew(expr_0A, 0, num, out replaced);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleRemove(HTuple tuple, HTuple index, out HTuple reduced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(140);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out reduced);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSelectMask(HTuple tuple, HTuple mask, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(141);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, mask);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(mask);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSelect(HTuple tuple, HTuple index, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(142);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrBitSelect(HTuple tuple, HTuple index, out HTuple selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(143);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGenSequence(HTuple start, HTuple end, HTuple step, out HTuple sequence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(144);
			SZXCArimAPI.Store(expr_0A, 0, start);
			SZXCArimAPI.Store(expr_0A, 1, end);
			SZXCArimAPI.Store(expr_0A, 2, step);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(start);
			SZXCArimAPI.UnpinTuple(end);
			SZXCArimAPI.UnpinTuple(step);
			num = HTuple.LoadNew(expr_0A, 0, num, out sequence);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGenConst(HTuple length, HTuple constVal, out HTuple newtuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(145);
			SZXCArimAPI.Store(expr_0A, 0, length);
			SZXCArimAPI.Store(expr_0A, 1, constVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(length);
			SZXCArimAPI.UnpinTuple(constVal);
			num = HTuple.LoadNew(expr_0A, 0, num, out newtuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleEnvironment(HTuple names, out HTuple values)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(146);
			SZXCArimAPI.Store(expr_0A, 0, names);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(names);
			num = HTuple.LoadNew(expr_0A, 0, num, out values);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSplit(HTuple stringVal, HTuple separator, out HTuple substrings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(147);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, separator);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(separator);
			num = HTuple.LoadNew(expr_0A, 0, num, out substrings);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSubstr(HTuple stringVal, HTuple position1, HTuple position2, out HTuple substring)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(148);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, position1);
			SZXCArimAPI.Store(expr_0A, 2, position2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(position1);
			SZXCArimAPI.UnpinTuple(position2);
			num = HTuple.LoadNew(expr_0A, 0, num, out substring);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrLastN(HTuple stringVal, HTuple position, out HTuple substring)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(149);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, position);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(position);
			num = HTuple.LoadNew(expr_0A, 0, num, out substring);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrFirstN(HTuple stringVal, HTuple position, out HTuple substring)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(150);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, position);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(position);
			num = HTuple.LoadNew(expr_0A, 0, num, out substring);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrrchr(HTuple stringVal, HTuple toFind, out HTuple position)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(151);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out position);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrchr(HTuple stringVal, HTuple toFind, out HTuple position)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(152);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out position);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrrstr(HTuple stringVal, HTuple toFind, out HTuple position)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(153);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out position);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrstr(HTuple stringVal, HTuple toFind, out HTuple position)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(154);
			SZXCArimAPI.Store(expr_0A, 0, stringVal);
			SZXCArimAPI.Store(expr_0A, 1, toFind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(toFind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out position);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleStrlen(HTuple t1, out HTuple length)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(155);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out length);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLessEqualElem(HTuple t1, HTuple t2, out HTuple lesseq)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(156);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out lesseq);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLessElem(HTuple t1, HTuple t2, out HTuple less)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(157);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out less);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGreaterEqualElem(HTuple t1, HTuple t2, out HTuple greatereq)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(158);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out greatereq);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGreaterElem(HTuple t1, HTuple t2, out HTuple greater)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(159);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out greater);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleNotEqualElem(HTuple t1, HTuple t2, out HTuple nequal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(160);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out nequal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleEqualElem(HTuple t1, HTuple t2, out HTuple equal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(161);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out equal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLessEqual(HTuple t1, HTuple t2, out HTuple lesseq)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(162);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out lesseq);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLess(HTuple t1, HTuple t2, out HTuple less)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(163);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out less);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGreaterEqual(HTuple t1, HTuple t2, out HTuple greatereq)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(164);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out greatereq);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleGreater(HTuple t1, HTuple t2, out HTuple greater)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(165);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out greater);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleNotEqual(HTuple t1, HTuple t2, out HTuple nequal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(166);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out nequal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleEqual(HTuple t1, HTuple t2, out HTuple equal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(167);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out equal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleNot(HTuple t, out HTuple not)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(168);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out not);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleXor(HTuple t1, HTuple t2, out HTuple xor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(169);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out xor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleOr(HTuple t1, HTuple t2, out HTuple or)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(170);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out or);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAnd(HTuple t1, HTuple t2, out HTuple and)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(171);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out and);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleBnot(HTuple t, out HTuple BNot)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(172);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out BNot);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleBxor(HTuple t1, HTuple t2, out HTuple BXor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(173);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out BXor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleBor(HTuple t1, HTuple t2, out HTuple BOr)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(174);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out BOr);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleBand(HTuple t1, HTuple t2, out HTuple BAnd)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(175);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out BAnd);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleRsh(HTuple t, HTuple shift, out HTuple rsh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(176);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.Store(expr_0A, 1, shift);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			SZXCArimAPI.UnpinTuple(shift);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rsh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLsh(HTuple t, HTuple shift, out HTuple lsh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(177);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.Store(expr_0A, 1, shift);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			SZXCArimAPI.UnpinTuple(shift);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out lsh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleChrt(HTuple t, out HTuple chrt)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(178);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out chrt);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleOrds(HTuple t, out HTuple ords)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(179);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out ords);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleChr(HTuple t, out HTuple chr)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(180);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out chr);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleOrd(HTuple t, out HTuple ord)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(181);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out ord);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleString(HTuple t, HTuple format, out HTuple stringVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(182);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.Store(expr_0A, 1, format);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			SZXCArimAPI.UnpinTuple(format);
			num = HTuple.LoadNew(expr_0A, 0, num, out stringVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsNumber(HTuple t, out HTuple isNumber)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(183);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isNumber);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleNumber(HTuple t, out HTuple number)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(184);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out number);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleRound(HTuple t, out HTuple round)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(185);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out round);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleInt(HTuple t, out HTuple intVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(186);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out intVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleReal(HTuple t, out HTuple real)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(187);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out real);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLdexp(HTuple t1, HTuple t2, out HTuple ldexp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(188);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ldexp);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFmod(HTuple t1, HTuple t2, out HTuple fmod)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(189);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out fmod);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleMod(HTuple t1, HTuple t2, out HTuple mod)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(190);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out mod);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleCeil(HTuple t, out HTuple ceil)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(191);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ceil);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFloor(HTuple t, out HTuple floor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(192);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out floor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TuplePow(HTuple t1, HTuple t2, out HTuple pow)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(193);
			SZXCArimAPI.Store(expr_0A, 0, t1);
			SZXCArimAPI.Store(expr_0A, 1, t2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t1);
			SZXCArimAPI.UnpinTuple(t2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out pow);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLog10(HTuple t, out HTuple log)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(194);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out log);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleLog(HTuple t, out HTuple log)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(195);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out log);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleExp(HTuple t, out HTuple exp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(196);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out exp);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleTanh(HTuple t, out HTuple tanh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(197);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out tanh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleCosh(HTuple t, out HTuple cosh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(198);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out cosh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSinh(HTuple t, out HTuple sinh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(199);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out sinh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleRad(HTuple deg, out HTuple rad)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(200);
			SZXCArimAPI.Store(expr_0A, 0, deg);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deg);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rad);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleDeg(HTuple rad, out HTuple deg)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(201);
			SZXCArimAPI.Store(expr_0A, 0, rad);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rad);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out deg);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAtan2(HTuple y, HTuple x, out HTuple ATan)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(202);
			SZXCArimAPI.Store(expr_0A, 0, y);
			SZXCArimAPI.Store(expr_0A, 1, x);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(x);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ATan);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAtan(HTuple t, out HTuple ATan)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(203);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ATan);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAcos(HTuple t, out HTuple ACos)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(204);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ACos);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAsin(HTuple t, out HTuple ASin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(205);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ASin);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleTan(HTuple t, out HTuple tan)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(206);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out tan);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleCos(HTuple t, out HTuple cos)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(207);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out cos);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSin(HTuple t, out HTuple sin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(208);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out sin);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleFabs(HTuple t, out HTuple abs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(209);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out abs);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSqrt(HTuple t, out HTuple sqrt)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(210);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out sqrt);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAbs(HTuple t, out HTuple abs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(211);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out abs);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleNeg(HTuple t, out HTuple neg)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(212);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out neg);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleDiv(HTuple q1, HTuple q2, out HTuple quot)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(213);
			SZXCArimAPI.Store(expr_0A, 0, q1);
			SZXCArimAPI.Store(expr_0A, 1, q2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(q1);
			SZXCArimAPI.UnpinTuple(q2);
			num = HTuple.LoadNew(expr_0A, 0, num, out quot);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleMult(HTuple p1, HTuple p2, out HTuple prod)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(214);
			SZXCArimAPI.Store(expr_0A, 0, p1);
			SZXCArimAPI.Store(expr_0A, 1, p2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(p1);
			SZXCArimAPI.UnpinTuple(p2);
			num = HTuple.LoadNew(expr_0A, 0, num, out prod);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSub(HTuple d1, HTuple d2, out HTuple diff)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(215);
			SZXCArimAPI.Store(expr_0A, 0, d1);
			SZXCArimAPI.Store(expr_0A, 1, d2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(d1);
			SZXCArimAPI.UnpinTuple(d2);
			num = HTuple.LoadNew(expr_0A, 0, num, out diff);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleAdd(HTuple s1, HTuple s2, out HTuple sum)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(216);
			SZXCArimAPI.Store(expr_0A, 0, s1);
			SZXCArimAPI.Store(expr_0A, 1, s2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(s1);
			SZXCArimAPI.UnpinTuple(s2);
			num = HTuple.LoadNew(expr_0A, 0, num, out sum);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeTuple(HTuple serializedItemHandle, out HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(217);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out tuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeTuple(HTuple tuple, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(218);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteTuple(HTuple tuple, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(219);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadTuple(HTuple fileName, out HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(220);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out tuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PoseAverage(HTuple poses, HTuple weights, HTuple mode, HTuple sigmaT, HTuple sigmaR, out HTuple averagePose, out HTuple quality)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(221);
			SZXCArimAPI.Store(expr_0A, 0, poses);
			SZXCArimAPI.Store(expr_0A, 1, weights);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, sigmaT);
			SZXCArimAPI.Store(expr_0A, 4, sigmaR);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(poses);
			SZXCArimAPI.UnpinTuple(weights);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(sigmaT);
			SZXCArimAPI.UnpinTuple(sigmaR);
			num = HTuple.LoadNew(expr_0A, 0, num, out averagePose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out quality);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatRotatePoint3d(HTuple quaternion, HTuple px, HTuple py, HTuple pz, out HTuple qx, out HTuple qy, out HTuple qz)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(222);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qz);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatConjugate(HTuple quaternion, out HTuple conjugatedQuaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(223);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out conjugatedQuaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatNormalize(HTuple quaternion, out HTuple normalizedQuaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(224);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out normalizedQuaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AxisAngleToQuat(HTuple axisX, HTuple axisY, HTuple axisZ, HTuple angle, out HTuple quaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(225);
			SZXCArimAPI.Store(expr_0A, 0, axisX);
			SZXCArimAPI.Store(expr_0A, 1, axisY);
			SZXCArimAPI.Store(expr_0A, 2, axisZ);
			SZXCArimAPI.Store(expr_0A, 3, angle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(axisX);
			SZXCArimAPI.UnpinTuple(axisY);
			SZXCArimAPI.UnpinTuple(axisZ);
			SZXCArimAPI.UnpinTuple(angle);
			num = HTuple.LoadNew(expr_0A, 0, num, out quaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatToPose(HTuple quaternion, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(226);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PoseInvert(HTuple pose, out HTuple poseInvert)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(227);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, num, out poseInvert);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PoseCompose(HTuple poseLeft, HTuple poseRight, out HTuple poseCompose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(228);
			SZXCArimAPI.Store(expr_0A, 0, poseLeft);
			SZXCArimAPI.Store(expr_0A, 1, poseRight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(poseLeft);
			SZXCArimAPI.UnpinTuple(poseRight);
			num = HTuple.LoadNew(expr_0A, 0, num, out poseCompose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatToHomMat3d(HTuple quaternion, out HTuple rotationMatrix)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(229);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rotationMatrix);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PoseToQuat(HTuple pose, out HTuple quaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(230);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out quaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatInterpolate(HTuple quaternionStart, HTuple quaternionEnd, HTuple interpPos, out HTuple quaternionInterpolated)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(231);
			SZXCArimAPI.Store(expr_0A, 0, quaternionStart);
			SZXCArimAPI.Store(expr_0A, 1, quaternionEnd);
			SZXCArimAPI.Store(expr_0A, 2, interpPos);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternionStart);
			SZXCArimAPI.UnpinTuple(quaternionEnd);
			SZXCArimAPI.UnpinTuple(interpPos);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out quaternionInterpolated);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuatCompose(HTuple quaternionLeft, HTuple quaternionRight, out HTuple quaternionComposed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(232);
			SZXCArimAPI.Store(expr_0A, 0, quaternionLeft);
			SZXCArimAPI.Store(expr_0A, 1, quaternionRight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternionLeft);
			SZXCArimAPI.UnpinTuple(quaternionRight);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out quaternionComposed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeHomMat3d(HTuple serializedItemHandle, out HTuple homMat3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(233);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeHomMat3d(HTuple homMat3D, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(234);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeHomMat2d(HTuple serializedItemHandle, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(235);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeHomMat2d(HTuple homMat2D, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(236);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeQuat(HTuple serializedItemHandle, out HTuple quaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(237);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out quaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeQuat(HTuple quaternion, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(238);
			SZXCArimAPI.Store(expr_0A, 0, quaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quaternion);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectiveTransHomPoint3d(HTuple homMat3D, HTuple px, HTuple py, HTuple pz, HTuple pw, out HTuple qx, out HTuple qy, out HTuple qz, out HTuple qw)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(239);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.Store(expr_0A, 4, pw);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			SZXCArimAPI.UnpinTuple(pw);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qz);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out qw);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectiveTransPoint3d(HTuple homMat3D, HTuple px, HTuple py, HTuple pz, out HTuple qx, out HTuple qy, out HTuple qz)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(240);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qz);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AffineTransPoint3d(HTuple homMat3D, HTuple px, HTuple py, HTuple pz, out HTuple qx, out HTuple qy, out HTuple qz)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(241);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qz);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToHomMat3d(HTuple transformationType, HTuple px, HTuple py, HTuple pz, HTuple qx, HTuple qy, HTuple qz, out HTuple homMat3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(242);
			SZXCArimAPI.Store(expr_0A, 0, transformationType);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.Store(expr_0A, 4, qx);
			SZXCArimAPI.Store(expr_0A, 5, qy);
			SZXCArimAPI.Store(expr_0A, 6, qz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(transformationType);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			SZXCArimAPI.UnpinTuple(qz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dDeterminant(HTuple homMat3D, out HTuple determinant)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(243);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out determinant);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dTranspose(HTuple homMat3D, out HTuple homMat3DTranspose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(244);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DTranspose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dInvert(HTuple homMat3D, out HTuple homMat3DInvert)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(245);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DInvert);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dCompose(HTuple homMat3DLeft, HTuple homMat3DRight, out HTuple homMat3DCompose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(246);
			SZXCArimAPI.Store(expr_0A, 0, homMat3DLeft);
			SZXCArimAPI.Store(expr_0A, 1, homMat3DRight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3DLeft);
			SZXCArimAPI.UnpinTuple(homMat3DRight);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DCompose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dRotateLocal(HTuple homMat3D, HTuple phi, HTuple axis, out HTuple homMat3DRotate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(247);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, phi);
			SZXCArimAPI.Store(expr_0A, 2, axis);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(axis);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DRotate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dRotate(HTuple homMat3D, HTuple phi, HTuple axis, HTuple px, HTuple py, HTuple pz, out HTuple homMat3DRotate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(248);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, phi);
			SZXCArimAPI.Store(expr_0A, 2, axis);
			SZXCArimAPI.Store(expr_0A, 3, px);
			SZXCArimAPI.Store(expr_0A, 4, py);
			SZXCArimAPI.Store(expr_0A, 5, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(axis);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DRotate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dScaleLocal(HTuple homMat3D, HTuple sx, HTuple sy, HTuple sz, out HTuple homMat3DScale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(249);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, sx);
			SZXCArimAPI.Store(expr_0A, 2, sy);
			SZXCArimAPI.Store(expr_0A, 3, sz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(sx);
			SZXCArimAPI.UnpinTuple(sy);
			SZXCArimAPI.UnpinTuple(sz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DScale);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dScale(HTuple homMat3D, HTuple sx, HTuple sy, HTuple sz, HTuple px, HTuple py, HTuple pz, out HTuple homMat3DScale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(250);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, sx);
			SZXCArimAPI.Store(expr_0A, 2, sy);
			SZXCArimAPI.Store(expr_0A, 3, sz);
			SZXCArimAPI.Store(expr_0A, 4, px);
			SZXCArimAPI.Store(expr_0A, 5, py);
			SZXCArimAPI.Store(expr_0A, 6, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(sx);
			SZXCArimAPI.UnpinTuple(sy);
			SZXCArimAPI.UnpinTuple(sz);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DScale);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dTranslateLocal(HTuple homMat3D, HTuple tx, HTuple ty, HTuple tz, out HTuple homMat3DTranslate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(251);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, tx);
			SZXCArimAPI.Store(expr_0A, 2, ty);
			SZXCArimAPI.Store(expr_0A, 3, tz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(tx);
			SZXCArimAPI.UnpinTuple(ty);
			SZXCArimAPI.UnpinTuple(tz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DTranslate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dTranslate(HTuple homMat3D, HTuple tx, HTuple ty, HTuple tz, out HTuple homMat3DTranslate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(252);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, tx);
			SZXCArimAPI.Store(expr_0A, 2, ty);
			SZXCArimAPI.Store(expr_0A, 3, tz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(tx);
			SZXCArimAPI.UnpinTuple(ty);
			SZXCArimAPI.UnpinTuple(tz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DTranslate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dIdentity(out HTuple homMat3DIdentity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(253);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3DIdentity);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dProject(HTuple homMat3D, HTuple principalPointRow, HTuple principalPointCol, HTuple focus, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(254);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, principalPointRow);
			SZXCArimAPI.Store(expr_0A, 2, principalPointCol);
			SZXCArimAPI.Store(expr_0A, 3, focus);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(principalPointRow);
			SZXCArimAPI.UnpinTuple(principalPointCol);
			SZXCArimAPI.UnpinTuple(focus);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void BundleAdjustMosaic(HTuple numImages, HTuple referenceImage, HTuple mappingSource, HTuple mappingDest, HTuple homMatrices2D, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple numCorrespondences, HTuple transformation, out HTuple mosaicMatrices2D, out HTuple rows, out HTuple cols, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(255);
			SZXCArimAPI.Store(expr_0A, 0, numImages);
			SZXCArimAPI.Store(expr_0A, 1, referenceImage);
			SZXCArimAPI.Store(expr_0A, 2, mappingSource);
			SZXCArimAPI.Store(expr_0A, 3, mappingDest);
			SZXCArimAPI.Store(expr_0A, 4, homMatrices2D);
			SZXCArimAPI.Store(expr_0A, 5, rows1);
			SZXCArimAPI.Store(expr_0A, 6, cols1);
			SZXCArimAPI.Store(expr_0A, 7, rows2);
			SZXCArimAPI.Store(expr_0A, 8, cols2);
			SZXCArimAPI.Store(expr_0A, 9, numCorrespondences);
			SZXCArimAPI.Store(expr_0A, 10, transformation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numImages);
			SZXCArimAPI.UnpinTuple(referenceImage);
			SZXCArimAPI.UnpinTuple(mappingSource);
			SZXCArimAPI.UnpinTuple(mappingDest);
			SZXCArimAPI.UnpinTuple(homMatrices2D);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(numCorrespondences);
			SZXCArimAPI.UnpinTuple(transformation);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out mosaicMatrices2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rows);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out cols);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjMatchPointsDistortionRansacGuided(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple homMat2DGuide, HTuple kappaGuide, HTuple distanceTolerance, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple homMat2D, out HTuple kappa, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(256);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, homMat2DGuide);
			SZXCArimAPI.Store(expr_0A, 7, kappaGuide);
			SZXCArimAPI.Store(expr_0A, 8, distanceTolerance);
			SZXCArimAPI.Store(expr_0A, 9, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 10, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 11, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 12, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(homMat2DGuide);
			SZXCArimAPI.UnpinTuple(kappaGuide);
			SZXCArimAPI.UnpinTuple(distanceTolerance);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void ProjMatchPointsDistortionRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple homMat2D, out HTuple kappa, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(257);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, rowMove);
			SZXCArimAPI.Store(expr_0A, 7, colMove);
			SZXCArimAPI.Store(expr_0A, 8, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 9, colTolerance);
			SZXCArimAPI.Store(expr_0A, 10, rotation);
			SZXCArimAPI.Store(expr_0A, 11, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 12, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 13, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 14, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void ProjMatchPointsRansacGuided(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple homMat2DGuide, HTuple distanceTolerance, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple homMat2D, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(258);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, homMat2DGuide);
			SZXCArimAPI.Store(expr_0A, 7, distanceTolerance);
			SZXCArimAPI.Store(expr_0A, 8, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 9, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 10, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 11, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(homMat2DGuide);
			SZXCArimAPI.UnpinTuple(distanceTolerance);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void ProjMatchPointsRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple homMat2D, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(259);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, rowMove);
			SZXCArimAPI.Store(expr_0A, 7, colMove);
			SZXCArimAPI.Store(expr_0A, 8, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 9, colTolerance);
			SZXCArimAPI.Store(expr_0A, 10, rotation);
			SZXCArimAPI.Store(expr_0A, 11, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 12, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 13, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 14, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void VectorToProjHomMat2dDistortion(HTuple points1Row, HTuple points1Col, HTuple points2Row, HTuple points2Col, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple imageWidth, HTuple imageHeight, HTuple method, out HTuple homMat2D, out HTuple kappa, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(260);
			SZXCArimAPI.Store(expr_0A, 0, points1Row);
			SZXCArimAPI.Store(expr_0A, 1, points1Col);
			SZXCArimAPI.Store(expr_0A, 2, points2Row);
			SZXCArimAPI.Store(expr_0A, 3, points2Col);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, imageWidth);
			SZXCArimAPI.Store(expr_0A, 11, imageHeight);
			SZXCArimAPI.Store(expr_0A, 12, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(points1Row);
			SZXCArimAPI.UnpinTuple(points1Col);
			SZXCArimAPI.UnpinTuple(points2Row);
			SZXCArimAPI.UnpinTuple(points2Col);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomVectorToProjHomMat2d(HTuple px, HTuple py, HTuple pw, HTuple qx, HTuple qy, HTuple qw, HTuple method, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(261);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, pw);
			SZXCArimAPI.Store(expr_0A, 3, qx);
			SZXCArimAPI.Store(expr_0A, 4, qy);
			SZXCArimAPI.Store(expr_0A, 5, qw);
			SZXCArimAPI.Store(expr_0A, 6, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pw);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			SZXCArimAPI.UnpinTuple(qw);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToProjHomMat2d(HTuple px, HTuple py, HTuple qx, HTuple qy, HTuple method, HTuple covXX1, HTuple covYY1, HTuple covXY1, HTuple covXX2, HTuple covYY2, HTuple covXY2, out HTuple homMat2D, out HTuple covariance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(262);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, qx);
			SZXCArimAPI.Store(expr_0A, 3, qy);
			SZXCArimAPI.Store(expr_0A, 4, method);
			SZXCArimAPI.Store(expr_0A, 5, covXX1);
			SZXCArimAPI.Store(expr_0A, 6, covYY1);
			SZXCArimAPI.Store(expr_0A, 7, covXY1);
			SZXCArimAPI.Store(expr_0A, 8, covXX2);
			SZXCArimAPI.Store(expr_0A, 9, covYY2);
			SZXCArimAPI.Store(expr_0A, 10, covXY2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(covXX1);
			SZXCArimAPI.UnpinTuple(covYY1);
			SZXCArimAPI.UnpinTuple(covXY1);
			SZXCArimAPI.UnpinTuple(covXX2);
			SZXCArimAPI.UnpinTuple(covYY2);
			SZXCArimAPI.UnpinTuple(covXY2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covariance);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dToAffinePar(HTuple homMat2D, out HTuple sx, out HTuple sy, out HTuple phi, out HTuple theta, out HTuple tx, out HTuple ty)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(263);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out sx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out sy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out theta);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out tx);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out ty);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorAngleToRigid(HTuple row1, HTuple column1, HTuple angle1, HTuple row2, HTuple column2, HTuple angle2, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(264);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, angle1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			SZXCArimAPI.Store(expr_0A, 5, angle2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(angle1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.UnpinTuple(angle2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PointLineToHomMat2d(HTuple transformationType, HTuple px, HTuple py, HTuple l1x, HTuple l1y, HTuple l2x, HTuple l2y, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(265);
			SZXCArimAPI.Store(expr_0A, 0, transformationType);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, l1x);
			SZXCArimAPI.Store(expr_0A, 4, l1y);
			SZXCArimAPI.Store(expr_0A, 5, l2x);
			SZXCArimAPI.Store(expr_0A, 6, l2y);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(transformationType);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(l1x);
			SZXCArimAPI.UnpinTuple(l1y);
			SZXCArimAPI.UnpinTuple(l2x);
			SZXCArimAPI.UnpinTuple(l2y);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToRigid(HTuple px, HTuple py, HTuple qx, HTuple qy, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(266);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, qx);
			SZXCArimAPI.Store(expr_0A, 3, qy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToSimilarity(HTuple px, HTuple py, HTuple qx, HTuple qy, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(267);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, qx);
			SZXCArimAPI.Store(expr_0A, 3, qy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToAniso(HTuple px, HTuple py, HTuple qx, HTuple qy, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(268);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, qx);
			SZXCArimAPI.Store(expr_0A, 3, qy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToHomMat2d(HTuple px, HTuple py, HTuple qx, HTuple qy, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(269);
			SZXCArimAPI.Store(expr_0A, 0, px);
			SZXCArimAPI.Store(expr_0A, 1, py);
			SZXCArimAPI.Store(expr_0A, 2, qx);
			SZXCArimAPI.Store(expr_0A, 3, qy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectiveTransPixel(HTuple homMat2D, HTuple row, HTuple col, out HTuple rowTrans, out HTuple colTrans)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(270);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, col);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowTrans);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectiveTransPoint2d(HTuple homMat2D, HTuple px, HTuple py, HTuple pw, out HTuple qx, out HTuple qy, out HTuple qw)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(271);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pw);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pw);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qw);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AffineTransPixel(HTuple homMat2D, HTuple row, HTuple col, out HTuple rowTrans, out HTuple colTrans)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(272);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, col);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowTrans);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AffineTransPoint2d(HTuple homMat2D, HTuple px, HTuple py, out HTuple qx, out HTuple qy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(273);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dDeterminant(HTuple homMat2D, out HTuple determinant)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(274);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out determinant);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dTranspose(HTuple homMat2D, out HTuple homMat2DTranspose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(275);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DTranspose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dInvert(HTuple homMat2D, out HTuple homMat2DInvert)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(276);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DInvert);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dCompose(HTuple homMat2DLeft, HTuple homMat2DRight, out HTuple homMat2DCompose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(277);
			SZXCArimAPI.Store(expr_0A, 0, homMat2DLeft);
			SZXCArimAPI.Store(expr_0A, 1, homMat2DRight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2DLeft);
			SZXCArimAPI.UnpinTuple(homMat2DRight);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DCompose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dReflectLocal(HTuple homMat2D, HTuple px, HTuple py, out HTuple homMat2DReflect)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(278);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DReflect);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dReflect(HTuple homMat2D, HTuple px, HTuple py, HTuple qx, HTuple qy, out HTuple homMat2DReflect)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(279);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, qx);
			SZXCArimAPI.Store(expr_0A, 4, qy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(qx);
			SZXCArimAPI.UnpinTuple(qy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DReflect);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dSlantLocal(HTuple homMat2D, HTuple theta, HTuple axis, out HTuple homMat2DSlant)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(280);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, theta);
			SZXCArimAPI.Store(expr_0A, 2, axis);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(axis);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DSlant);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dSlant(HTuple homMat2D, HTuple theta, HTuple axis, HTuple px, HTuple py, out HTuple homMat2DSlant)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(281);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, theta);
			SZXCArimAPI.Store(expr_0A, 2, axis);
			SZXCArimAPI.Store(expr_0A, 3, px);
			SZXCArimAPI.Store(expr_0A, 4, py);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(axis);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DSlant);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dRotateLocal(HTuple homMat2D, HTuple phi, out HTuple homMat2DRotate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(282);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, phi);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(phi);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DRotate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dRotate(HTuple homMat2D, HTuple phi, HTuple px, HTuple py, out HTuple homMat2DRotate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(283);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, phi);
			SZXCArimAPI.Store(expr_0A, 2, px);
			SZXCArimAPI.Store(expr_0A, 3, py);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DRotate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dScaleLocal(HTuple homMat2D, HTuple sx, HTuple sy, out HTuple homMat2DScale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(284);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, sx);
			SZXCArimAPI.Store(expr_0A, 2, sy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(sx);
			SZXCArimAPI.UnpinTuple(sy);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DScale);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dScale(HTuple homMat2D, HTuple sx, HTuple sy, HTuple px, HTuple py, out HTuple homMat2DScale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(285);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, sx);
			SZXCArimAPI.Store(expr_0A, 2, sy);
			SZXCArimAPI.Store(expr_0A, 3, px);
			SZXCArimAPI.Store(expr_0A, 4, py);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(sx);
			SZXCArimAPI.UnpinTuple(sy);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DScale);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dTranslateLocal(HTuple homMat2D, HTuple tx, HTuple ty, out HTuple homMat2DTranslate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(286);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, tx);
			SZXCArimAPI.Store(expr_0A, 2, ty);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(tx);
			SZXCArimAPI.UnpinTuple(ty);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DTranslate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dTranslate(HTuple homMat2D, HTuple tx, HTuple ty, out HTuple homMat2DTranslate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(287);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, tx);
			SZXCArimAPI.Store(expr_0A, 2, ty);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(tx);
			SZXCArimAPI.UnpinTuple(ty);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DTranslate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat2dIdentity(out HTuple homMat2DIdentity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(288);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2DIdentity);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllScatteredDataInterpolators()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(289);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearScatteredDataInterpolator(HTuple scatteredDataInterpolatorHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(290);
			SZXCArimAPI.Store(expr_0A, 0, scatteredDataInterpolatorHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scatteredDataInterpolatorHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void InterpolateScatteredData(HTuple scatteredDataInterpolatorHandle, HTuple row, HTuple column, out HTuple valueInterpolated)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(291);
			SZXCArimAPI.Store(expr_0A, 0, scatteredDataInterpolatorHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scatteredDataInterpolatorHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, num, out valueInterpolated);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateScatteredDataInterpolator(HTuple method, HTuple rows, HTuple columns, HTuple values, HTuple genParamName, HTuple genParamValue, out HTuple scatteredDataInterpolatorHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(292);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, rows);
			SZXCArimAPI.Store(expr_0A, 2, columns);
			SZXCArimAPI.Store(expr_0A, 3, values);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			SZXCArimAPI.UnpinTuple(values);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out scatteredDataInterpolatorHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InterpolateScatteredDataPointsToImage(out HObject imageInterpolated, HTuple method, HTuple rows, HTuple columns, HTuple values, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(293);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, rows);
			SZXCArimAPI.Store(expr_0A, 2, columns);
			SZXCArimAPI.Store(expr_0A, 3, values);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			SZXCArimAPI.UnpinTuple(values);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out imageInterpolated);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InterpolateScatteredDataImage(HObject image, HObject regionInterpolate, out HObject imageInterpolated, HTuple method, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(294);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, regionInterpolate);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out imageInterpolated);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(regionInterpolate);
		}

		public static void GetSystemTime(out HTuple MSecond, out HTuple second, out HTuple minute, out HTuple hour, out HTuple day, out HTuple YDay, out HTuple month, out HTuple year)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(295);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out MSecond);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out second);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out minute);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out hour);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out day);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out YDay);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out month);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out year);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetComputeDeviceParam(HTuple deviceHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(296);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetComputeDeviceParam(HTuple deviceHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(297);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReleaseAllComputeDevices()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(298);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReleaseComputeDevice(HTuple deviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(299);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeactivateAllComputeDevices()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(300);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeactivateComputeDevice(HTuple deviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(301);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ActivateComputeDevice(HTuple deviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(302);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void InitComputeDevice(HTuple deviceHandle, HTuple operators)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(303);
			SZXCArimAPI.Store(expr_0A, 0, deviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, operators);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceHandle);
			SZXCArimAPI.UnpinTuple(operators);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OpenComputeDevice(HTuple deviceIdentifier, out HTuple deviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(304);
			SZXCArimAPI.Store(expr_0A, 0, deviceIdentifier);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceIdentifier);
			num = HTuple.LoadNew(expr_0A, 0, num, out deviceHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetComputeDeviceInfo(HTuple deviceIdentifier, HTuple infoName, out HTuple info)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(305);
			SZXCArimAPI.Store(expr_0A, 0, deviceIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, infoName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deviceIdentifier);
			SZXCArimAPI.UnpinTuple(infoName);
			num = HTuple.LoadNew(expr_0A, 0, num, out info);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryAvailableComputeDevices(out HTuple deviceIdentifier)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(306);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out deviceIdentifier);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearSerial(HTuple serialHandle, HTuple channel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(307);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			SZXCArimAPI.Store(expr_0A, 1, channel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			SZXCArimAPI.UnpinTuple(channel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteSerial(HTuple serialHandle, HTuple data)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(308);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			SZXCArimAPI.Store(expr_0A, 1, data);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadSerial(HTuple serialHandle, HTuple numCharacters, out HTuple data)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(309);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			SZXCArimAPI.Store(expr_0A, 1, numCharacters);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			SZXCArimAPI.UnpinTuple(numCharacters);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out data);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSerialParam(HTuple serialHandle, out HTuple baudRate, out HTuple dataBits, out HTuple flowControl, out HTuple parity, out HTuple stopBits, out HTuple totalTimeOut, out HTuple interCharTimeOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(310);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out baudRate);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out dataBits);
			num = HTuple.LoadNew(expr_0A, 2, num, out flowControl);
			num = HTuple.LoadNew(expr_0A, 3, num, out parity);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out stopBits);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out totalTimeOut);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out interCharTimeOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSerialParam(HTuple serialHandle, HTuple baudRate, HTuple dataBits, HTuple flowControl, HTuple parity, HTuple stopBits, HTuple totalTimeOut, HTuple interCharTimeOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(311);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			SZXCArimAPI.Store(expr_0A, 1, baudRate);
			SZXCArimAPI.Store(expr_0A, 2, dataBits);
			SZXCArimAPI.Store(expr_0A, 3, flowControl);
			SZXCArimAPI.Store(expr_0A, 4, parity);
			SZXCArimAPI.Store(expr_0A, 5, stopBits);
			SZXCArimAPI.Store(expr_0A, 6, totalTimeOut);
			SZXCArimAPI.Store(expr_0A, 7, interCharTimeOut);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			SZXCArimAPI.UnpinTuple(baudRate);
			SZXCArimAPI.UnpinTuple(dataBits);
			SZXCArimAPI.UnpinTuple(flowControl);
			SZXCArimAPI.UnpinTuple(parity);
			SZXCArimAPI.UnpinTuple(stopBits);
			SZXCArimAPI.UnpinTuple(totalTimeOut);
			SZXCArimAPI.UnpinTuple(interCharTimeOut);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseAllSerials()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(312);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseSerial(HTuple serialHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(313);
			SZXCArimAPI.Store(expr_0A, 0, serialHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serialHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OpenSerial(HTuple portName, out HTuple serialHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(314);
			SZXCArimAPI.Store(expr_0A, 0, portName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(portName);
			num = HTuple.LoadNew(expr_0A, 0, num, out serialHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WaitSeconds(HTuple seconds)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(315);
			SZXCArimAPI.Store(expr_0A, 0, seconds);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(seconds);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SystemCall(HTuple command)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(316);
			SZXCArimAPI.Store(expr_0A, 0, command);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(command);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetSystem(HTuple systemParameter, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(317);
			SZXCArimAPI.Store(expr_0A, 0, systemParameter);
			SZXCArimAPI.Store(expr_0A, 1, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(systemParameter);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetCheck(HTuple check)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(318);
			SZXCArimAPI.Store(expr_0A, 0, check);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(check);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ResetObjDb(HTuple defaultImageWidth, HTuple defaultImageHeight, HTuple defaultChannels)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(319);
			SZXCArimAPI.Store(expr_0A, 0, defaultImageWidth);
			SZXCArimAPI.Store(expr_0A, 1, defaultImageHeight);
			SZXCArimAPI.Store(expr_0A, 2, defaultChannels);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(defaultImageWidth);
			SZXCArimAPI.UnpinTuple(defaultImageHeight);
			SZXCArimAPI.UnpinTuple(defaultChannels);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSystem(HTuple query, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(320);
			SZXCArimAPI.Store(expr_0A, 0, query);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(query);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetCheck(out HTuple check)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(321);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out check);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetErrorText(HTuple errorCode, out HTuple errorMessage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(322);
			SZXCArimAPI.Store(expr_0A, 0, errorCode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(errorCode);
			num = HTuple.LoadNew(expr_0A, 0, num, out errorMessage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CountSeconds(out HTuple seconds)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(323);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out seconds);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CountRelation(HTuple relationName, out HTuple numOfTuples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(324);
			SZXCArimAPI.Store(expr_0A, 0, relationName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(relationName);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numOfTuples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReceiveImage(out HObject image, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(325);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendImage(HObject image, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(326);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void ReceiveRegion(out HObject region, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(327);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendRegion(HObject region, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(328);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(region);
		}

		public static void ReceiveXld(out HObject XLD, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(329);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HObject.LoadNew(expr_0A, 1, num, out XLD);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendXld(HObject XLD, HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(330);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(XLD);
		}

		public static void ReceiveTuple(HTuple socket, out HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(331);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HTuple.LoadNew(expr_0A, 0, num, out tuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendTuple(HTuple socket, HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(332);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, tuple);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReceiveData(HTuple socket, HTuple format, out HTuple data, out HTuple from)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(333);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, format);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(format);
			num = HTuple.LoadNew(expr_0A, 0, num, out data);
			num = HTuple.LoadNew(expr_0A, 1, num, out from);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendData(HTuple socket, HTuple format, HTuple data, HTuple to)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(334);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, format);
			SZXCArimAPI.Store(expr_0A, 2, data);
			SZXCArimAPI.Store(expr_0A, 3, to);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(format);
			SZXCArimAPI.UnpinTuple(data);
			SZXCArimAPI.UnpinTuple(to);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSocketParam(HTuple socket, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(335);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSocketParam(HTuple socket, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(336);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetNextSocketDataType(HTuple socket, out HTuple dataType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(337);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HTuple.LoadNew(expr_0A, 0, num, out dataType);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSocketDescriptor(HTuple socket, out HTuple socketDescriptor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(338);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out socketDescriptor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseAllSockets()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(339);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseSocket(HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(340);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SocketAcceptConnect(HTuple acceptingSocket, HTuple wait, out HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(341);
			SZXCArimAPI.Store(expr_0A, 0, acceptingSocket);
			SZXCArimAPI.Store(expr_0A, 1, wait);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acceptingSocket);
			SZXCArimAPI.UnpinTuple(wait);
			num = HTuple.LoadNew(expr_0A, 0, num, out socket);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OpenSocketConnect(HTuple hostName, HTuple port, HTuple genParamName, HTuple genParamValue, out HTuple socket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(342);
			SZXCArimAPI.Store(expr_0A, 0, hostName);
			SZXCArimAPI.Store(expr_0A, 1, port);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(hostName);
			SZXCArimAPI.UnpinTuple(port);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out socket);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OpenSocketAccept(HTuple port, HTuple genParamName, HTuple genParamValue, out HTuple acceptingSocket)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(343);
			SZXCArimAPI.Store(expr_0A, 0, port);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(port);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out acceptingSocket);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetExtendedErrorInfo(out HTuple operatorName, out HTuple errorCode, out HTuple errorMessage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(344);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out operatorName);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out errorCode);
			num = HTuple.LoadNew(expr_0A, 2, num, out errorMessage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetModules(out HTuple usedModules, out HTuple moduleKey)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(345);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out usedModules);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out moduleKey);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void BinocularDistanceMs(HObject imageRect1, HObject imageRect2, out HObject distance, out HObject score, HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple minDisparity, HTuple maxDisparity, HTuple surfaceSmoothing, HTuple edgeSmoothing, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(346);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, minDisparity);
			SZXCArimAPI.Store(expr_0A, 4, maxDisparity);
			SZXCArimAPI.Store(expr_0A, 5, surfaceSmoothing);
			SZXCArimAPI.Store(expr_0A, 6, edgeSmoothing);
			SZXCArimAPI.Store(expr_0A, 7, genParamName);
			SZXCArimAPI.Store(expr_0A, 8, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(minDisparity);
			SZXCArimAPI.UnpinTuple(maxDisparity);
			SZXCArimAPI.UnpinTuple(surfaceSmoothing);
			SZXCArimAPI.UnpinTuple(edgeSmoothing);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out distance);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void BinocularDisparityMs(HObject imageRect1, HObject imageRect2, out HObject disparity, out HObject score, HTuple minDisparity, HTuple maxDisparity, HTuple surfaceSmoothing, HTuple edgeSmoothing, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(347);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, minDisparity);
			SZXCArimAPI.Store(expr_0A, 1, maxDisparity);
			SZXCArimAPI.Store(expr_0A, 2, surfaceSmoothing);
			SZXCArimAPI.Store(expr_0A, 3, edgeSmoothing);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minDisparity);
			SZXCArimAPI.UnpinTuple(maxDisparity);
			SZXCArimAPI.UnpinTuple(surfaceSmoothing);
			SZXCArimAPI.UnpinTuple(edgeSmoothing);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out disparity);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void BinocularDistanceMg(HObject imageRect1, HObject imageRect2, out HObject distance, out HObject score, HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple grayConstancy, HTuple gradientConstancy, HTuple smoothness, HTuple initialGuess, HTuple calculateScore, HTuple MGParamName, HTuple MGParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(348);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, grayConstancy);
			SZXCArimAPI.Store(expr_0A, 4, gradientConstancy);
			SZXCArimAPI.Store(expr_0A, 5, smoothness);
			SZXCArimAPI.Store(expr_0A, 6, initialGuess);
			SZXCArimAPI.Store(expr_0A, 7, calculateScore);
			SZXCArimAPI.Store(expr_0A, 8, MGParamName);
			SZXCArimAPI.Store(expr_0A, 9, MGParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(grayConstancy);
			SZXCArimAPI.UnpinTuple(gradientConstancy);
			SZXCArimAPI.UnpinTuple(smoothness);
			SZXCArimAPI.UnpinTuple(initialGuess);
			SZXCArimAPI.UnpinTuple(calculateScore);
			SZXCArimAPI.UnpinTuple(MGParamName);
			SZXCArimAPI.UnpinTuple(MGParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out distance);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void BinocularDisparityMg(HObject imageRect1, HObject imageRect2, out HObject disparity, out HObject score, HTuple grayConstancy, HTuple gradientConstancy, HTuple smoothness, HTuple initialGuess, HTuple calculateScore, HTuple MGParamName, HTuple MGParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(349);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, grayConstancy);
			SZXCArimAPI.Store(expr_0A, 1, gradientConstancy);
			SZXCArimAPI.Store(expr_0A, 2, smoothness);
			SZXCArimAPI.Store(expr_0A, 3, initialGuess);
			SZXCArimAPI.Store(expr_0A, 4, calculateScore);
			SZXCArimAPI.Store(expr_0A, 5, MGParamName);
			SZXCArimAPI.Store(expr_0A, 6, MGParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(grayConstancy);
			SZXCArimAPI.UnpinTuple(gradientConstancy);
			SZXCArimAPI.UnpinTuple(smoothness);
			SZXCArimAPI.UnpinTuple(initialGuess);
			SZXCArimAPI.UnpinTuple(calculateScore);
			SZXCArimAPI.UnpinTuple(MGParamName);
			SZXCArimAPI.UnpinTuple(MGParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out disparity);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void Reconst3dFromFundamentalMatrix(HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple FMatrix, HTuple covFMat, out HTuple x, out HTuple y, out HTuple z, out HTuple w, out HTuple covXYZW)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(350);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, FMatrix);
			SZXCArimAPI.Store(expr_0A, 11, covFMat);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(FMatrix);
			SZXCArimAPI.UnpinTuple(covFMat);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out w);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out covXYZW);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenBinocularProjRectification(out HObject map1, out HObject map2, HTuple FMatrix, HTuple covFMat, HTuple width1, HTuple height1, HTuple width2, HTuple height2, HTuple subSampling, HTuple mapping, out HTuple covFMatRect, out HTuple h1, out HTuple h2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(351);
			SZXCArimAPI.Store(expr_0A, 0, FMatrix);
			SZXCArimAPI.Store(expr_0A, 1, covFMat);
			SZXCArimAPI.Store(expr_0A, 2, width1);
			SZXCArimAPI.Store(expr_0A, 3, height1);
			SZXCArimAPI.Store(expr_0A, 4, width2);
			SZXCArimAPI.Store(expr_0A, 5, height2);
			SZXCArimAPI.Store(expr_0A, 6, subSampling);
			SZXCArimAPI.Store(expr_0A, 7, mapping);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(FMatrix);
			SZXCArimAPI.UnpinTuple(covFMat);
			SZXCArimAPI.UnpinTuple(width1);
			SZXCArimAPI.UnpinTuple(height1);
			SZXCArimAPI.UnpinTuple(width2);
			SZXCArimAPI.UnpinTuple(height2);
			SZXCArimAPI.UnpinTuple(subSampling);
			SZXCArimAPI.UnpinTuple(mapping);
			num = HObject.LoadNew(expr_0A, 1, num, out map1);
			num = HObject.LoadNew(expr_0A, 2, num, out map2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out covFMatRect);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out h1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out h2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToFundamentalMatrixDistortion(HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple imageWidth, HTuple imageHeight, HTuple method, out HTuple FMatrix, out HTuple kappa, out HTuple error, out HTuple x, out HTuple y, out HTuple z, out HTuple w)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(352);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, imageWidth);
			SZXCArimAPI.Store(expr_0A, 11, imageHeight);
			SZXCArimAPI.Store(expr_0A, 12, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out w);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RelPoseToFundamentalMatrix(HTuple relPose, HTuple covRelPose, HTuple camPar1, HTuple camPar2, out HTuple FMatrix, out HTuple covFMat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(353);
			SZXCArimAPI.Store(expr_0A, 0, relPose);
			SZXCArimAPI.Store(expr_0A, 1, covRelPose);
			SZXCArimAPI.Store(expr_0A, 2, camPar1);
			SZXCArimAPI.Store(expr_0A, 3, camPar2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(relPose);
			SZXCArimAPI.UnpinTuple(covRelPose);
			SZXCArimAPI.UnpinTuple(camPar1);
			SZXCArimAPI.UnpinTuple(camPar2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covFMat);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EssentialToFundamentalMatrix(HTuple EMatrix, HTuple covEMat, HTuple camMat1, HTuple camMat2, out HTuple FMatrix, out HTuple covFMat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(354);
			SZXCArimAPI.Store(expr_0A, 0, EMatrix);
			SZXCArimAPI.Store(expr_0A, 1, covEMat);
			SZXCArimAPI.Store(expr_0A, 2, camMat1);
			SZXCArimAPI.Store(expr_0A, 3, camMat2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(EMatrix);
			SZXCArimAPI.UnpinTuple(covEMat);
			SZXCArimAPI.UnpinTuple(camMat1);
			SZXCArimAPI.UnpinTuple(camMat2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covFMat);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToRelPose(HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple camPar1, HTuple camPar2, HTuple method, out HTuple relPose, out HTuple covRelPose, out HTuple error, out HTuple x, out HTuple y, out HTuple z, out HTuple covXYZ)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(355);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, camPar1);
			SZXCArimAPI.Store(expr_0A, 11, camPar2);
			SZXCArimAPI.Store(expr_0A, 12, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(camPar1);
			SZXCArimAPI.UnpinTuple(camPar2);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, num, out relPose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covRelPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out covXYZ);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToEssentialMatrix(HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple camMat1, HTuple camMat2, HTuple method, out HTuple EMatrix, out HTuple covEMat, out HTuple error, out HTuple x, out HTuple y, out HTuple z, out HTuple covXYZ)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(356);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, camMat1);
			SZXCArimAPI.Store(expr_0A, 11, camMat2);
			SZXCArimAPI.Store(expr_0A, 12, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(camMat1);
			SZXCArimAPI.UnpinTuple(camMat2);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out EMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covEMat);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out covXYZ);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VectorToFundamentalMatrix(HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple covRR1, HTuple covRC1, HTuple covCC1, HTuple covRR2, HTuple covRC2, HTuple covCC2, HTuple method, out HTuple FMatrix, out HTuple covFMat, out HTuple error, out HTuple x, out HTuple y, out HTuple z, out HTuple w, out HTuple covXYZW)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(357);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, covRR1);
			SZXCArimAPI.Store(expr_0A, 5, covRC1);
			SZXCArimAPI.Store(expr_0A, 6, covCC1);
			SZXCArimAPI.Store(expr_0A, 7, covRR2);
			SZXCArimAPI.Store(expr_0A, 8, covRC2);
			SZXCArimAPI.Store(expr_0A, 9, covCC2);
			SZXCArimAPI.Store(expr_0A, 10, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(covRR1);
			SZXCArimAPI.UnpinTuple(covRC1);
			SZXCArimAPI.UnpinTuple(covCC1);
			SZXCArimAPI.UnpinTuple(covRR2);
			SZXCArimAPI.UnpinTuple(covRC2);
			SZXCArimAPI.UnpinTuple(covCC2);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covFMat);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out w);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out covXYZW);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MatchFundamentalMatrixDistortionRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple FMatrix, out HTuple kappa, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(358);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, rowMove);
			SZXCArimAPI.Store(expr_0A, 7, colMove);
			SZXCArimAPI.Store(expr_0A, 8, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 9, colTolerance);
			SZXCArimAPI.Store(expr_0A, 10, rotation);
			SZXCArimAPI.Store(expr_0A, 11, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 12, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 13, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 14, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void MatchRelPoseRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple camPar1, HTuple camPar2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple relPose, out HTuple covRelPose, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(359);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, camPar1);
			SZXCArimAPI.Store(expr_0A, 5, camPar2);
			SZXCArimAPI.Store(expr_0A, 6, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 7, maskSize);
			SZXCArimAPI.Store(expr_0A, 8, rowMove);
			SZXCArimAPI.Store(expr_0A, 9, colMove);
			SZXCArimAPI.Store(expr_0A, 10, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 11, colTolerance);
			SZXCArimAPI.Store(expr_0A, 12, rotation);
			SZXCArimAPI.Store(expr_0A, 13, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 14, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 15, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 16, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(camPar1);
			SZXCArimAPI.UnpinTuple(camPar2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, num, out relPose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covRelPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void MatchEssentialMatrixRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple camMat1, HTuple camMat2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple EMatrix, out HTuple covEMat, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(360);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, camMat1);
			SZXCArimAPI.Store(expr_0A, 5, camMat2);
			SZXCArimAPI.Store(expr_0A, 6, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 7, maskSize);
			SZXCArimAPI.Store(expr_0A, 8, rowMove);
			SZXCArimAPI.Store(expr_0A, 9, colMove);
			SZXCArimAPI.Store(expr_0A, 10, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 11, colTolerance);
			SZXCArimAPI.Store(expr_0A, 12, rotation);
			SZXCArimAPI.Store(expr_0A, 13, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 14, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 15, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 16, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(camMat1);
			SZXCArimAPI.UnpinTuple(camMat2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out EMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covEMat);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void MatchFundamentalMatrixRansac(HObject image1, HObject image2, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple grayMatchMethod, HTuple maskSize, HTuple rowMove, HTuple colMove, HTuple rowTolerance, HTuple colTolerance, HTuple rotation, HTuple matchThreshold, HTuple estimationMethod, HTuple distanceThreshold, HTuple randSeed, out HTuple FMatrix, out HTuple covFMat, out HTuple error, out HTuple points1, out HTuple points2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(361);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, rows1);
			SZXCArimAPI.Store(expr_0A, 1, cols1);
			SZXCArimAPI.Store(expr_0A, 2, rows2);
			SZXCArimAPI.Store(expr_0A, 3, cols2);
			SZXCArimAPI.Store(expr_0A, 4, grayMatchMethod);
			SZXCArimAPI.Store(expr_0A, 5, maskSize);
			SZXCArimAPI.Store(expr_0A, 6, rowMove);
			SZXCArimAPI.Store(expr_0A, 7, colMove);
			SZXCArimAPI.Store(expr_0A, 8, rowTolerance);
			SZXCArimAPI.Store(expr_0A, 9, colTolerance);
			SZXCArimAPI.Store(expr_0A, 10, rotation);
			SZXCArimAPI.Store(expr_0A, 11, matchThreshold);
			SZXCArimAPI.Store(expr_0A, 12, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 13, distanceThreshold);
			SZXCArimAPI.Store(expr_0A, 14, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(grayMatchMethod);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(rowMove);
			SZXCArimAPI.UnpinTuple(colMove);
			SZXCArimAPI.UnpinTuple(rowTolerance);
			SZXCArimAPI.UnpinTuple(colTolerance);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(matchThreshold);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(distanceThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out FMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covFMat);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out points1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out points2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void BinocularDistance(HObject imageRect1, HObject imageRect2, out HObject distance, out HObject score, HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple method, HTuple maskWidth, HTuple maskHeight, HTuple textureThresh, HTuple minDisparity, HTuple maxDisparity, HTuple numLevels, HTuple scoreThresh, HTuple filter, HTuple subDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(362);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, method);
			SZXCArimAPI.Store(expr_0A, 4, maskWidth);
			SZXCArimAPI.Store(expr_0A, 5, maskHeight);
			SZXCArimAPI.Store(expr_0A, 6, textureThresh);
			SZXCArimAPI.Store(expr_0A, 7, minDisparity);
			SZXCArimAPI.Store(expr_0A, 8, maxDisparity);
			SZXCArimAPI.Store(expr_0A, 9, numLevels);
			SZXCArimAPI.Store(expr_0A, 10, scoreThresh);
			SZXCArimAPI.Store(expr_0A, 11, filter);
			SZXCArimAPI.Store(expr_0A, 12, subDistance);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(textureThresh);
			SZXCArimAPI.UnpinTuple(minDisparity);
			SZXCArimAPI.UnpinTuple(maxDisparity);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(scoreThresh);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(subDistance);
			num = HObject.LoadNew(expr_0A, 1, num, out distance);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void BinocularDisparity(HObject imageRect1, HObject imageRect2, out HObject disparity, out HObject score, HTuple method, HTuple maskWidth, HTuple maskHeight, HTuple textureThresh, HTuple minDisparity, HTuple maxDisparity, HTuple numLevels, HTuple scoreThresh, HTuple filter, HTuple subDisparity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(363);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, maskHeight);
			SZXCArimAPI.Store(expr_0A, 3, textureThresh);
			SZXCArimAPI.Store(expr_0A, 4, minDisparity);
			SZXCArimAPI.Store(expr_0A, 5, maxDisparity);
			SZXCArimAPI.Store(expr_0A, 6, numLevels);
			SZXCArimAPI.Store(expr_0A, 7, scoreThresh);
			SZXCArimAPI.Store(expr_0A, 8, filter);
			SZXCArimAPI.Store(expr_0A, 9, subDisparity);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(textureThresh);
			SZXCArimAPI.UnpinTuple(minDisparity);
			SZXCArimAPI.UnpinTuple(maxDisparity);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(scoreThresh);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(subDisparity);
			num = HObject.LoadNew(expr_0A, 1, num, out disparity);
			num = HObject.LoadNew(expr_0A, 2, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1);
			GC.KeepAlive(imageRect2);
		}

		public static void IntersectLinesOfSight(HTuple camParam1, HTuple camParam2, HTuple relPose, HTuple row1, HTuple col1, HTuple row2, HTuple col2, out HTuple x, out HTuple y, out HTuple z, out HTuple dist)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(364);
			SZXCArimAPI.Store(expr_0A, 0, camParam1);
			SZXCArimAPI.Store(expr_0A, 1, camParam2);
			SZXCArimAPI.Store(expr_0A, 2, relPose);
			SZXCArimAPI.Store(expr_0A, 3, row1);
			SZXCArimAPI.Store(expr_0A, 4, col1);
			SZXCArimAPI.Store(expr_0A, 5, row2);
			SZXCArimAPI.Store(expr_0A, 6, col2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParam1);
			SZXCArimAPI.UnpinTuple(camParam2);
			SZXCArimAPI.UnpinTuple(relPose);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(col1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(col2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out dist);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DisparityImageToXyz(HObject disparity, out HObject x, out HObject y, out HObject z, HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(365);
			SZXCArimAPI.Store(expr_0A, 1, disparity);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			num = HObject.LoadNew(expr_0A, 1, num, out x);
			num = HObject.LoadNew(expr_0A, 2, num, out y);
			num = HObject.LoadNew(expr_0A, 3, num, out z);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(disparity);
		}

		public static void DisparityToPoint3d(HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple row1, HTuple col1, HTuple disparity, out HTuple x, out HTuple y, out HTuple z)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(366);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, row1);
			SZXCArimAPI.Store(expr_0A, 4, col1);
			SZXCArimAPI.Store(expr_0A, 5, disparity);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(col1);
			SZXCArimAPI.UnpinTuple(disparity);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DisparityToDistance(HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple disparity, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(367);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, disparity);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(disparity);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceToDisparity(HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, HTuple distance, out HTuple disparity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(368);
			SZXCArimAPI.Store(expr_0A, 0, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 1, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 2, relPoseRect);
			SZXCArimAPI.Store(expr_0A, 3, distance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			SZXCArimAPI.UnpinTuple(distance);
			num = HTuple.LoadNew(expr_0A, 0, num, out disparity);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenBinocularRectificationMap(out HObject map1, out HObject map2, HTuple camParam1, HTuple camParam2, HTuple relPose, HTuple subSampling, HTuple method, HTuple mapType, out HTuple camParamRect1, out HTuple camParamRect2, out HTuple camPoseRect1, out HTuple camPoseRect2, out HTuple relPoseRect)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(369);
			SZXCArimAPI.Store(expr_0A, 0, camParam1);
			SZXCArimAPI.Store(expr_0A, 1, camParam2);
			SZXCArimAPI.Store(expr_0A, 2, relPose);
			SZXCArimAPI.Store(expr_0A, 3, subSampling);
			SZXCArimAPI.Store(expr_0A, 4, method);
			SZXCArimAPI.Store(expr_0A, 5, mapType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParam1);
			SZXCArimAPI.UnpinTuple(camParam2);
			SZXCArimAPI.UnpinTuple(relPose);
			SZXCArimAPI.UnpinTuple(subSampling);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(mapType);
			num = HObject.LoadNew(expr_0A, 1, num, out map1);
			num = HObject.LoadNew(expr_0A, 2, num, out map2);
			num = HTuple.LoadNew(expr_0A, 0, num, out camParamRect1);
			num = HTuple.LoadNew(expr_0A, 1, num, out camParamRect2);
			num = HTuple.LoadNew(expr_0A, 2, num, out camPoseRect1);
			num = HTuple.LoadNew(expr_0A, 3, num, out camPoseRect2);
			num = HTuple.LoadNew(expr_0A, 4, num, out relPoseRect);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void BinocularCalibration(HTuple NX, HTuple NY, HTuple NZ, HTuple NRow1, HTuple NCol1, HTuple NRow2, HTuple NCol2, HTuple startCamParam1, HTuple startCamParam2, HTuple NStartPose1, HTuple NStartPose2, HTuple estimateParams, out HTuple camParam1, out HTuple camParam2, out HTuple NFinalPose1, out HTuple NFinalPose2, out HTuple relPose, out HTuple errors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(370);
			SZXCArimAPI.Store(expr_0A, 0, NX);
			SZXCArimAPI.Store(expr_0A, 1, NY);
			SZXCArimAPI.Store(expr_0A, 2, NZ);
			SZXCArimAPI.Store(expr_0A, 3, NRow1);
			SZXCArimAPI.Store(expr_0A, 4, NCol1);
			SZXCArimAPI.Store(expr_0A, 5, NRow2);
			SZXCArimAPI.Store(expr_0A, 6, NCol2);
			SZXCArimAPI.Store(expr_0A, 7, startCamParam1);
			SZXCArimAPI.Store(expr_0A, 8, startCamParam2);
			SZXCArimAPI.Store(expr_0A, 9, NStartPose1);
			SZXCArimAPI.Store(expr_0A, 10, NStartPose2);
			SZXCArimAPI.Store(expr_0A, 11, estimateParams);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(NX);
			SZXCArimAPI.UnpinTuple(NY);
			SZXCArimAPI.UnpinTuple(NZ);
			SZXCArimAPI.UnpinTuple(NRow1);
			SZXCArimAPI.UnpinTuple(NCol1);
			SZXCArimAPI.UnpinTuple(NRow2);
			SZXCArimAPI.UnpinTuple(NCol2);
			SZXCArimAPI.UnpinTuple(startCamParam1);
			SZXCArimAPI.UnpinTuple(startCamParam2);
			SZXCArimAPI.UnpinTuple(NStartPose1);
			SZXCArimAPI.UnpinTuple(NStartPose2);
			SZXCArimAPI.UnpinTuple(estimateParams);
			num = HTuple.LoadNew(expr_0A, 0, num, out camParam1);
			num = HTuple.LoadNew(expr_0A, 1, num, out camParam2);
			num = HTuple.LoadNew(expr_0A, 2, num, out NFinalPose1);
			num = HTuple.LoadNew(expr_0A, 3, num, out NFinalPose2);
			num = HTuple.LoadNew(expr_0A, 4, num, out relPose);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out errors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuerySpy(out HTuple classes, out HTuple values)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(371);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out classes);
			num = HTuple.LoadNew(expr_0A, 1, num, out values);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSpy(HTuple classVal, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(372);
			SZXCArimAPI.Store(expr_0A, 0, classVal);
			SZXCArimAPI.Store(expr_0A, 1, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSpy(HTuple classVal, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(373);
			SZXCArimAPI.Store(expr_0A, 0, classVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classVal);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadSheetOfLightModel(HTuple fileName, out HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(374);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteSheetOfLightModel(HTuple sheetOfLightModelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(375);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeSheetOfLightModel(HTuple serializedItemHandle, out HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(376);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeSheetOfLightModel(HTuple sheetOfLightModelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(377);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateSheetOfLightCalibObject(HTuple width, HTuple length, HTuple heightMin, HTuple heightMax, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(378);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, length);
			SZXCArimAPI.Store(expr_0A, 2, heightMin);
			SZXCArimAPI.Store(expr_0A, 3, heightMax);
			SZXCArimAPI.Store(expr_0A, 4, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(length);
			SZXCArimAPI.UnpinTuple(heightMin);
			SZXCArimAPI.UnpinTuple(heightMax);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CalibrateSheetOfLight(HTuple sheetOfLightModelID, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(379);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSheetOfLightResultObjectModel3d(HTuple sheetOfLightModelID, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(380);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSheetOfLightResult(out HObject resultValue, HTuple sheetOfLightModelID, HTuple resultName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(381);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(resultName);
			num = HObject.LoadNew(expr_0A, 1, num, out resultValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ApplySheetOfLightCalibration(HObject disparity, HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(382);
			SZXCArimAPI.Store(expr_0A, 1, disparity);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(disparity);
		}

		public static void SetProfileSheetOfLight(HObject profileDisparityImage, HTuple sheetOfLightModelID, HTuple movementPoses)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(383);
			SZXCArimAPI.Store(expr_0A, 1, profileDisparityImage);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, movementPoses);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(movementPoses);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(profileDisparityImage);
		}

		public static void MeasureProfileSheetOfLight(HObject profileImage, HTuple sheetOfLightModelID, HTuple movementPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(384);
			SZXCArimAPI.Store(expr_0A, 1, profileImage);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, movementPose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(movementPose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(profileImage);
		}

		public static void SetSheetOfLightParam(HTuple sheetOfLightModelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(385);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSheetOfLightParam(HTuple sheetOfLightModelID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(386);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QuerySheetOfLightParams(HTuple sheetOfLightModelID, HTuple queryName, out HTuple genParamName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(387);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			SZXCArimAPI.Store(expr_0A, 1, queryName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.UnpinTuple(queryName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamName);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ResetSheetOfLightModel(HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(388);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllSheetOfLightModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(389);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSheetOfLightModel(HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(390);
			SZXCArimAPI.Store(expr_0A, 0, sheetOfLightModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateSheetOfLightModel(HObject profileRegion, HTuple genParamName, HTuple genParamValue, out HTuple sheetOfLightModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(391);
			SZXCArimAPI.Store(expr_0A, 1, profileRegion);
			SZXCArimAPI.Store(expr_0A, 0, genParamName);
			SZXCArimAPI.Store(expr_0A, 1, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out sheetOfLightModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(profileRegion);
		}

		public static void ShadeHeightField(HObject imageHeight, out HObject imageShade, HTuple slant, HTuple tilt, HTuple albedo, HTuple ambient, HTuple shadows)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(392);
			SZXCArimAPI.Store(expr_0A, 1, imageHeight);
			SZXCArimAPI.Store(expr_0A, 0, slant);
			SZXCArimAPI.Store(expr_0A, 1, tilt);
			SZXCArimAPI.Store(expr_0A, 2, albedo);
			SZXCArimAPI.Store(expr_0A, 3, ambient);
			SZXCArimAPI.Store(expr_0A, 4, shadows);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(slant);
			SZXCArimAPI.UnpinTuple(tilt);
			SZXCArimAPI.UnpinTuple(albedo);
			SZXCArimAPI.UnpinTuple(ambient);
			SZXCArimAPI.UnpinTuple(shadows);
			num = HObject.LoadNew(expr_0A, 1, num, out imageShade);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageHeight);
		}

		public static void EstimateAlAm(HObject image, out HTuple albedo, out HTuple ambient)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(393);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out albedo);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out ambient);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EstimateSlAlZc(HObject image, out HTuple slant, out HTuple albedo)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(394);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out slant);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out albedo);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EstimateSlAlLr(HObject image, out HTuple slant, out HTuple albedo)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(395);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out slant);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out albedo);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EstimateTiltZc(HObject image, out HTuple tilt)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(396);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out tilt);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EstimateTiltLr(HObject image, out HTuple tilt)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(397);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out tilt);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ReconstructHeightFieldFromGradient(HObject gradient, out HObject heightField, HTuple reconstructionMethod, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(398);
			SZXCArimAPI.Store(expr_0A, 1, gradient);
			SZXCArimAPI.Store(expr_0A, 0, reconstructionMethod);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(reconstructionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out heightField);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(gradient);
		}

		public static void PhotometricStereo(HObject images, out HObject heightField, out HObject gradient, out HObject albedo, HTuple slants, HTuple tilts, HTuple resultType, HTuple reconstructionMethod, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(399);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, slants);
			SZXCArimAPI.Store(expr_0A, 1, tilts);
			SZXCArimAPI.Store(expr_0A, 2, resultType);
			SZXCArimAPI.Store(expr_0A, 3, reconstructionMethod);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(slants);
			SZXCArimAPI.UnpinTuple(tilts);
			SZXCArimAPI.UnpinTuple(resultType);
			SZXCArimAPI.UnpinTuple(reconstructionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out heightField);
			num = HObject.LoadNew(expr_0A, 2, num, out gradient);
			num = HObject.LoadNew(expr_0A, 3, num, out albedo);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void SfsPentland(HObject image, out HObject height, HTuple slant, HTuple tilt, HTuple albedo, HTuple ambient)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(400);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, slant);
			SZXCArimAPI.Store(expr_0A, 1, tilt);
			SZXCArimAPI.Store(expr_0A, 2, albedo);
			SZXCArimAPI.Store(expr_0A, 3, ambient);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(slant);
			SZXCArimAPI.UnpinTuple(tilt);
			SZXCArimAPI.UnpinTuple(albedo);
			SZXCArimAPI.UnpinTuple(ambient);
			num = HObject.LoadNew(expr_0A, 1, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SfsOrigLr(HObject image, out HObject height, HTuple slant, HTuple tilt, HTuple albedo, HTuple ambient)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(401);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, slant);
			SZXCArimAPI.Store(expr_0A, 1, tilt);
			SZXCArimAPI.Store(expr_0A, 2, albedo);
			SZXCArimAPI.Store(expr_0A, 3, ambient);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(slant);
			SZXCArimAPI.UnpinTuple(tilt);
			SZXCArimAPI.UnpinTuple(albedo);
			SZXCArimAPI.UnpinTuple(ambient);
			num = HObject.LoadNew(expr_0A, 1, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SfsModLr(HObject image, out HObject height, HTuple slant, HTuple tilt, HTuple albedo, HTuple ambient)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(402);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, slant);
			SZXCArimAPI.Store(expr_0A, 1, tilt);
			SZXCArimAPI.Store(expr_0A, 2, albedo);
			SZXCArimAPI.Store(expr_0A, 3, ambient);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(slant);
			SZXCArimAPI.UnpinTuple(tilt);
			SZXCArimAPI.UnpinTuple(albedo);
			SZXCArimAPI.UnpinTuple(ambient);
			num = HObject.LoadNew(expr_0A, 1, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ReceiveSerializedItem(HTuple socket, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(403);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendSerializedItem(HTuple socket, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(404);
			SZXCArimAPI.Store(expr_0A, 0, socket);
			SZXCArimAPI.Store(expr_0A, 1, serializedItemHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(socket);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FwriteSerializedItem(HTuple fileHandle, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(405);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.Store(expr_0A, 1, serializedItemHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FreadSerializedItem(HTuple fileHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(406);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllSerializedItems()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(407);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSerializedItem(HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(408);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSerializedItemPtr(HTuple serializedItemHandle, out HTuple pointer, out HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(409);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out pointer);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out size);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateSerializedItemPtr(HTuple pointer, HTuple size, HTuple copy, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(410);
			SZXCArimAPI.Store(expr_0A, 0, pointer);
			SZXCArimAPI.Store(expr_0A, 1, size);
			SZXCArimAPI.Store(expr_0A, 2, copy);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pointer);
			SZXCArimAPI.UnpinTuple(size);
			SZXCArimAPI.UnpinTuple(copy);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FitPrimitivesObjectModel3d(HTuple objectModel3D, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3DOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(411);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SegmentObjectModel3d(HTuple objectModel3D, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3DOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(412);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllTextResults()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(413);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTextResult(HTuple textResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(414);
			SZXCArimAPI.Store(expr_0A, 0, textResultID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textResultID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetTextObject(out HObject characters, HTuple textResultID, HTuple resultName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(415);
			SZXCArimAPI.Store(expr_0A, 0, textResultID);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textResultID);
			SZXCArimAPI.UnpinTuple(resultName);
			num = HObject.LoadNew(expr_0A, 1, num, out characters);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTextResult(HTuple textResultID, HTuple resultName, out HTuple resultValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(416);
			SZXCArimAPI.Store(expr_0A, 0, textResultID);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textResultID);
			SZXCArimAPI.UnpinTuple(resultName);
			num = HTuple.LoadNew(expr_0A, 0, num, out resultValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindText(HObject image, HTuple textModel, out HTuple textResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(417);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, textModel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textModel);
			num = HTuple.LoadNew(expr_0A, 0, num, out textResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetTextModelParam(HTuple textModel, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(418);
			SZXCArimAPI.Store(expr_0A, 0, textModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetTextModelParam(HTuple textModel, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(419);
			SZXCArimAPI.Store(expr_0A, 0, textModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllTextModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(420);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTextModel(HTuple textModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(421);
			SZXCArimAPI.Store(expr_0A, 0, textModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateTextModelReader(HTuple mode, HTuple OCRClassifier, out HTuple textModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(422);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, OCRClassifier);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(OCRClassifier);
			num = HTuple.LoadNew(expr_0A, 0, num, out textModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateTextModel(out HTuple textModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(423);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out textModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectCharacters(HObject region, out HObject regionCharacters, HTuple dotPrint, HTuple strokeWidth, HTuple charWidth, HTuple charHeight, HTuple punctuation, HTuple diacriticMarks, HTuple partitionMethod, HTuple partitionLines, HTuple fragmentDistance, HTuple connectFragments, HTuple clutterSizeMax, HTuple stopAfter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(424);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, dotPrint);
			SZXCArimAPI.Store(expr_0A, 1, strokeWidth);
			SZXCArimAPI.Store(expr_0A, 2, charWidth);
			SZXCArimAPI.Store(expr_0A, 3, charHeight);
			SZXCArimAPI.Store(expr_0A, 4, punctuation);
			SZXCArimAPI.Store(expr_0A, 5, diacriticMarks);
			SZXCArimAPI.Store(expr_0A, 6, partitionMethod);
			SZXCArimAPI.Store(expr_0A, 7, partitionLines);
			SZXCArimAPI.Store(expr_0A, 8, fragmentDistance);
			SZXCArimAPI.Store(expr_0A, 9, connectFragments);
			SZXCArimAPI.Store(expr_0A, 10, clutterSizeMax);
			SZXCArimAPI.Store(expr_0A, 11, stopAfter);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dotPrint);
			SZXCArimAPI.UnpinTuple(strokeWidth);
			SZXCArimAPI.UnpinTuple(charWidth);
			SZXCArimAPI.UnpinTuple(charHeight);
			SZXCArimAPI.UnpinTuple(punctuation);
			SZXCArimAPI.UnpinTuple(diacriticMarks);
			SZXCArimAPI.UnpinTuple(partitionMethod);
			SZXCArimAPI.UnpinTuple(partitionLines);
			SZXCArimAPI.UnpinTuple(fragmentDistance);
			SZXCArimAPI.UnpinTuple(connectFragments);
			SZXCArimAPI.UnpinTuple(clutterSizeMax);
			SZXCArimAPI.UnpinTuple(stopAfter);
			num = HObject.LoadNew(expr_0A, 1, num, out regionCharacters);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void SegmentCharacters(HObject region, HObject image, out HObject imageForeground, out HObject regionForeground, HTuple method, HTuple eliminateLines, HTuple dotPrint, HTuple strokeWidth, HTuple charWidth, HTuple charHeight, HTuple thresholdOffset, HTuple contrast, out HTuple usedThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(425);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, eliminateLines);
			SZXCArimAPI.Store(expr_0A, 2, dotPrint);
			SZXCArimAPI.Store(expr_0A, 3, strokeWidth);
			SZXCArimAPI.Store(expr_0A, 4, charWidth);
			SZXCArimAPI.Store(expr_0A, 5, charHeight);
			SZXCArimAPI.Store(expr_0A, 6, thresholdOffset);
			SZXCArimAPI.Store(expr_0A, 7, contrast);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(eliminateLines);
			SZXCArimAPI.UnpinTuple(dotPrint);
			SZXCArimAPI.UnpinTuple(strokeWidth);
			SZXCArimAPI.UnpinTuple(charWidth);
			SZXCArimAPI.UnpinTuple(charHeight);
			SZXCArimAPI.UnpinTuple(thresholdOffset);
			SZXCArimAPI.UnpinTuple(contrast);
			num = HObject.LoadNew(expr_0A, 1, num, out imageForeground);
			num = HObject.LoadNew(expr_0A, 2, num, out regionForeground);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out usedThreshold);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void TextLineSlant(HObject region, HObject image, HTuple charHeight, HTuple slantFrom, HTuple slantTo, out HTuple slantAngle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(426);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, charHeight);
			SZXCArimAPI.Store(expr_0A, 1, slantFrom);
			SZXCArimAPI.Store(expr_0A, 2, slantTo);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(charHeight);
			SZXCArimAPI.UnpinTuple(slantFrom);
			SZXCArimAPI.UnpinTuple(slantTo);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out slantAngle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void TextLineOrientation(HObject region, HObject image, HTuple charHeight, HTuple orientationFrom, HTuple orientationTo, out HTuple orientationAngle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(427);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, charHeight);
			SZXCArimAPI.Store(expr_0A, 1, orientationFrom);
			SZXCArimAPI.Store(expr_0A, 2, orientationTo);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(charHeight);
			SZXCArimAPI.UnpinTuple(orientationFrom);
			SZXCArimAPI.UnpinTuple(orientationTo);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out orientationAngle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void ClassifyImageClassLut(HObject image, out HObject classRegions, HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(428);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, classLUTHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classLUTHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out classRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClassifyImageClassKnn(HObject image, out HObject classRegions, out HObject distanceImage, HTuple KNNHandle, HTuple rejectionThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(429);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, rejectionThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(rejectionThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out classRegions);
			num = HObject.LoadNew(expr_0A, 2, num, out distanceImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AddSamplesImageClassKnn(HObject image, HObject classRegions, HTuple KNNHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(430);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, classRegions);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(classRegions);
		}

		public static void ClassifyImageClassGmm(HObject image, out HObject classRegions, HTuple GMMHandle, HTuple rejectionThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(431);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, rejectionThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(rejectionThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out classRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AddSamplesImageClassGmm(HObject image, HObject classRegions, HTuple GMMHandle, HTuple randomize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(432);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, classRegions);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, randomize);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(randomize);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(classRegions);
		}

		public static void ClassifyImageClassSvm(HObject image, out HObject classRegions, HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(433);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out classRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AddSamplesImageClassSvm(HObject image, HObject classRegions, HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(434);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, classRegions);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(classRegions);
		}

		public static void ClassifyImageClassMlp(HObject image, out HObject classRegions, HTuple MLPHandle, HTuple rejectionThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(435);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, rejectionThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(rejectionThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out classRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AddSamplesImageClassMlp(HObject image, HObject classRegions, HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(436);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, classRegions);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(classRegions);
		}

		public static void LearnNdimNorm(HObject foreground, HObject background, HObject image, HTuple metric, HTuple distance, HTuple minNumberPercent, out HTuple radius, out HTuple center, out HTuple quality)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(437);
			SZXCArimAPI.Store(expr_0A, 1, foreground);
			SZXCArimAPI.Store(expr_0A, 2, background);
			SZXCArimAPI.Store(expr_0A, 3, image);
			SZXCArimAPI.Store(expr_0A, 0, metric);
			SZXCArimAPI.Store(expr_0A, 1, distance);
			SZXCArimAPI.Store(expr_0A, 2, minNumberPercent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(distance);
			SZXCArimAPI.UnpinTuple(minNumberPercent);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out radius);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out center);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out quality);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(foreground);
			GC.KeepAlive(background);
			GC.KeepAlive(image);
		}

		public static void LearnNdimBox(HObject foreground, HObject background, HObject multiChannelImage, HTuple classifHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(438);
			SZXCArimAPI.Store(expr_0A, 1, foreground);
			SZXCArimAPI.Store(expr_0A, 2, background);
			SZXCArimAPI.Store(expr_0A, 3, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(foreground);
			GC.KeepAlive(background);
			GC.KeepAlive(multiChannelImage);
		}

		public static void ClassNdimBox(HObject multiChannelImage, out HObject regions, HTuple classifHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(439);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void ClassNdimNorm(HObject multiChannelImage, out HObject regions, HTuple metric, HTuple singleMultiple, HTuple radius, HTuple center)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(440);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 0, metric);
			SZXCArimAPI.Store(expr_0A, 1, singleMultiple);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.Store(expr_0A, 3, center);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(singleMultiple);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(center);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Class2dimSup(HObject imageCol, HObject imageRow, HObject featureSpace, out HObject regionClass2Dim)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(441);
			SZXCArimAPI.Store(expr_0A, 1, imageCol);
			SZXCArimAPI.Store(expr_0A, 2, imageRow);
			SZXCArimAPI.Store(expr_0A, 3, featureSpace);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClass2Dim);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageCol);
			GC.KeepAlive(imageRow);
			GC.KeepAlive(featureSpace);
		}

		public static void Class2dimUnsup(HObject image1, HObject image2, out HObject classes, HTuple threshold, HTuple numClasses)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(442);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, threshold);
			SZXCArimAPI.Store(expr_0A, 1, numClasses);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(numClasses);
			num = HObject.LoadNew(expr_0A, 1, num, out classes);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void CheckDifference(HObject image, HObject pattern, out HObject selected, HTuple mode, HTuple diffLowerBound, HTuple diffUpperBound, HTuple grayOffset, HTuple addRow, HTuple addCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(443);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, pattern);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, diffLowerBound);
			SZXCArimAPI.Store(expr_0A, 2, diffUpperBound);
			SZXCArimAPI.Store(expr_0A, 3, grayOffset);
			SZXCArimAPI.Store(expr_0A, 4, addRow);
			SZXCArimAPI.Store(expr_0A, 5, addCol);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(diffLowerBound);
			SZXCArimAPI.UnpinTuple(diffUpperBound);
			SZXCArimAPI.UnpinTuple(grayOffset);
			SZXCArimAPI.UnpinTuple(addRow);
			SZXCArimAPI.UnpinTuple(addCol);
			num = HObject.LoadNew(expr_0A, 1, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(pattern);
		}

		public static void CharThreshold(HObject image, HObject histoRegion, out HObject characters, HTuple sigma, HTuple percent, out HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(444);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, histoRegion);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, percent);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(percent);
			num = HObject.LoadNew(expr_0A, 1, num, out characters);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out threshold);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(histoRegion);
		}

		public static void LabelToRegion(HObject labelImage, out HObject regions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(445);
			SZXCArimAPI.Store(expr_0A, 1, labelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(labelImage);
		}

		public static void NonmaxSuppressionAmp(HObject imgAmp, out HObject imageResult, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(446);
			SZXCArimAPI.Store(expr_0A, 1, imgAmp);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imgAmp);
		}

		public static void NonmaxSuppressionDir(HObject imgAmp, HObject imgDir, out HObject imageResult, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(447);
			SZXCArimAPI.Store(expr_0A, 1, imgAmp);
			SZXCArimAPI.Store(expr_0A, 2, imgDir);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imgAmp);
			GC.KeepAlive(imgDir);
		}

		public static void HysteresisThreshold(HObject image, out HObject regionHysteresis, HTuple low, HTuple high, HTuple maxLength)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(448);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, low);
			SZXCArimAPI.Store(expr_0A, 1, high);
			SZXCArimAPI.Store(expr_0A, 2, maxLength);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			SZXCArimAPI.UnpinTuple(maxLength);
			num = HObject.LoadNew(expr_0A, 1, num, out regionHysteresis);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BinaryThreshold(HObject image, out HObject region, HTuple method, HTuple lightDark, out HTuple usedThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(449);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, lightDark);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(lightDark);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			num = HTuple.LoadNew(expr_0A, 0, num, out usedThreshold);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LocalThreshold(HObject image, out HObject region, HTuple method, HTuple lightDark, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(450);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, lightDark);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(lightDark);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void VarThreshold(HObject image, out HObject region, HTuple maskWidth, HTuple maskHeight, HTuple stdDevScale, HTuple absThreshold, HTuple lightDark)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(451);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, stdDevScale);
			SZXCArimAPI.Store(expr_0A, 3, absThreshold);
			SZXCArimAPI.Store(expr_0A, 4, lightDark);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(stdDevScale);
			SZXCArimAPI.UnpinTuple(absThreshold);
			SZXCArimAPI.UnpinTuple(lightDark);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DynThreshold(HObject origImage, HObject thresholdImage, out HObject regionDynThresh, HTuple offset, HTuple lightDark)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(452);
			SZXCArimAPI.Store(expr_0A, 1, origImage);
			SZXCArimAPI.Store(expr_0A, 2, thresholdImage);
			SZXCArimAPI.Store(expr_0A, 0, offset);
			SZXCArimAPI.Store(expr_0A, 1, lightDark);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(offset);
			SZXCArimAPI.UnpinTuple(lightDark);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDynThresh);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(origImage);
			GC.KeepAlive(thresholdImage);
		}

		public static void Threshold(HObject image, out HObject region, HTuple minGray, HTuple maxGray)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(453);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, minGray);
			SZXCArimAPI.Store(expr_0A, 1, maxGray);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minGray);
			SZXCArimAPI.UnpinTuple(maxGray);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ThresholdSubPix(HObject image, out HObject border, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(454);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out border);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RegiongrowingN(HObject multiChannelImage, out HObject regions, HTuple metric, HTuple minTolerance, HTuple maxTolerance, HTuple minSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(455);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 0, metric);
			SZXCArimAPI.Store(expr_0A, 1, minTolerance);
			SZXCArimAPI.Store(expr_0A, 2, maxTolerance);
			SZXCArimAPI.Store(expr_0A, 3, minSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minTolerance);
			SZXCArimAPI.UnpinTuple(maxTolerance);
			SZXCArimAPI.UnpinTuple(minSize);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Regiongrowing(HObject image, out HObject regions, HTuple rasterHeight, HTuple rasterWidth, HTuple tolerance, HTuple minSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(456);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, rasterHeight);
			SZXCArimAPI.Store(expr_0A, 1, rasterWidth);
			SZXCArimAPI.Store(expr_0A, 2, tolerance);
			SZXCArimAPI.Store(expr_0A, 3, minSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rasterHeight);
			SZXCArimAPI.UnpinTuple(rasterWidth);
			SZXCArimAPI.UnpinTuple(tolerance);
			SZXCArimAPI.UnpinTuple(minSize);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RegiongrowingMean(HObject image, out HObject regions, HTuple startRows, HTuple startColumns, HTuple tolerance, HTuple minSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(457);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, startRows);
			SZXCArimAPI.Store(expr_0A, 1, startColumns);
			SZXCArimAPI.Store(expr_0A, 2, tolerance);
			SZXCArimAPI.Store(expr_0A, 3, minSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(startRows);
			SZXCArimAPI.UnpinTuple(startColumns);
			SZXCArimAPI.UnpinTuple(tolerance);
			SZXCArimAPI.UnpinTuple(minSize);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Pouring(HObject image, out HObject regions, HTuple mode, HTuple minGray, HTuple maxGray)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(458);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, minGray);
			SZXCArimAPI.Store(expr_0A, 2, maxGray);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(minGray);
			SZXCArimAPI.UnpinTuple(maxGray);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void WatershedsThreshold(HObject image, out HObject basins, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(459);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out basins);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Watersheds(HObject image, out HObject basins, out HObject watersheds)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(460);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out basins);
			num = HObject.LoadNew(expr_0A, 2, num, out watersheds);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ZeroCrossing(HObject image, out HObject regionCrossing)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(461);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionCrossing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ZeroCrossingSubPix(HObject image, out HObject zeroCrossings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(462);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out zeroCrossings);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DualThreshold(HObject image, out HObject regionCrossings, HTuple minSize, HTuple minGray, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(463);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, minSize);
			SZXCArimAPI.Store(expr_0A, 1, minGray);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minSize);
			SZXCArimAPI.UnpinTuple(minGray);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out regionCrossings);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ExpandLine(HObject image, out HObject regionExpand, HTuple coordinate, HTuple expandType, HTuple rowColumn, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(464);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, coordinate);
			SZXCArimAPI.Store(expr_0A, 1, expandType);
			SZXCArimAPI.Store(expr_0A, 2, rowColumn);
			SZXCArimAPI.Store(expr_0A, 3, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(coordinate);
			SZXCArimAPI.UnpinTuple(expandType);
			SZXCArimAPI.UnpinTuple(rowColumn);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out regionExpand);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LocalMin(HObject image, out HObject localMinima)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(465);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out localMinima);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Lowlands(HObject image, out HObject lowlands)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(466);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out lowlands);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LowlandsCenter(HObject image, out HObject lowlands)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(467);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out lowlands);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LocalMax(HObject image, out HObject localMaxima)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(468);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out localMaxima);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Plateaus(HObject image, out HObject plateaus)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(469);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out plateaus);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PlateausCenter(HObject image, out HObject plateaus)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(470);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out plateaus);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void HistoToThresh(HTuple histogramm, HTuple sigma, out HTuple minThresh, out HTuple maxThresh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(471);
			SZXCArimAPI.Store(expr_0A, 0, histogramm);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(histogramm);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out minThresh);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out maxThresh);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AutoThreshold(HObject image, out HObject regions, HTuple sigma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(472);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BinThreshold(HObject image, out HObject region)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(473);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FastThreshold(HObject image, out HObject region, HTuple minGray, HTuple maxGray, HTuple minSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(474);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, minGray);
			SZXCArimAPI.Store(expr_0A, 1, maxGray);
			SZXCArimAPI.Store(expr_0A, 2, minSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minGray);
			SZXCArimAPI.UnpinTuple(maxGray);
			SZXCArimAPI.UnpinTuple(minSize);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PolarTransRegionInv(HObject polarRegion, out HObject XYTransRegion, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple widthIn, HTuple heightIn, HTuple width, HTuple height, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(475);
			SZXCArimAPI.Store(expr_0A, 1, polarRegion);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, angleStart);
			SZXCArimAPI.Store(expr_0A, 3, angleEnd);
			SZXCArimAPI.Store(expr_0A, 4, radiusStart);
			SZXCArimAPI.Store(expr_0A, 5, radiusEnd);
			SZXCArimAPI.Store(expr_0A, 6, widthIn);
			SZXCArimAPI.Store(expr_0A, 7, heightIn);
			SZXCArimAPI.Store(expr_0A, 8, width);
			SZXCArimAPI.Store(expr_0A, 9, height);
			SZXCArimAPI.Store(expr_0A, 10, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(widthIn);
			SZXCArimAPI.UnpinTuple(heightIn);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out XYTransRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(polarRegion);
		}

		public static void PolarTransRegion(HObject region, out HObject polarTransRegion, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple width, HTuple height, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(476);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, angleStart);
			SZXCArimAPI.Store(expr_0A, 3, angleEnd);
			SZXCArimAPI.Store(expr_0A, 4, radiusStart);
			SZXCArimAPI.Store(expr_0A, 5, radiusEnd);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.Store(expr_0A, 8, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out polarTransRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void MergeRegionsLineScan(HObject currRegions, HObject prevRegions, out HObject currMergedRegions, out HObject prevMergedRegions, HTuple imageHeight, HTuple mergeBorder, HTuple maxImagesRegion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(477);
			SZXCArimAPI.Store(expr_0A, 1, currRegions);
			SZXCArimAPI.Store(expr_0A, 2, prevRegions);
			SZXCArimAPI.Store(expr_0A, 0, imageHeight);
			SZXCArimAPI.Store(expr_0A, 1, mergeBorder);
			SZXCArimAPI.Store(expr_0A, 2, maxImagesRegion);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(mergeBorder);
			SZXCArimAPI.UnpinTuple(maxImagesRegion);
			num = HObject.LoadNew(expr_0A, 1, num, out currMergedRegions);
			num = HObject.LoadNew(expr_0A, 2, num, out prevMergedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(currRegions);
			GC.KeepAlive(prevRegions);
		}

		public static void PartitionRectangle(HObject region, out HObject partitioned, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(478);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out partitioned);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void PartitionDynamic(HObject region, out HObject partitioned, HTuple distance, HTuple percent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(479);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, distance);
			SZXCArimAPI.Store(expr_0A, 1, percent);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distance);
			SZXCArimAPI.UnpinTuple(percent);
			num = HObject.LoadNew(expr_0A, 1, num, out partitioned);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void RegionToLabel(HObject region, out HObject imageLabel, HTuple type, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(480);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageLabel);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void RegionToBin(HObject region, out HObject binImage, HTuple foregroundGray, HTuple backgroundGray, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(481);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, foregroundGray);
			SZXCArimAPI.Store(expr_0A, 1, backgroundGray);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(foregroundGray);
			SZXCArimAPI.UnpinTuple(backgroundGray);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out binImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Union2(HObject region1, HObject region2, out HObject regionUnion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(482);
			SZXCArimAPI.Store(expr_0A, 1, region1);
			SZXCArimAPI.Store(expr_0A, 2, region2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionUnion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region1);
			GC.KeepAlive(region2);
		}

		public static void Union1(HObject region, out HObject regionUnion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(483);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionUnion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ClosestPointTransform(HObject region, out HObject distances, out HObject closestPoints, HTuple metric, HTuple foreground, HTuple closestPointMode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(484);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, metric);
			SZXCArimAPI.Store(expr_0A, 1, foreground);
			SZXCArimAPI.Store(expr_0A, 2, closestPointMode);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(foreground);
			SZXCArimAPI.UnpinTuple(closestPointMode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out distances);
			num = HObject.LoadNew(expr_0A, 2, num, out closestPoints);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DistanceTransform(HObject region, out HObject distanceImage, HTuple metric, HTuple foreground, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(485);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, metric);
			SZXCArimAPI.Store(expr_0A, 1, foreground);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(foreground);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out distanceImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Skeleton(HObject region, out HObject skeleton)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(486);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out skeleton);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ProjectiveTransRegion(HObject regions, out HObject transRegions, HTuple homMat2D, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(487);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out transRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void AffineTransRegion(HObject region, out HObject regionAffineTrans, HTuple homMat2D, HTuple interpolate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(488);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolate);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolate);
			num = HObject.LoadNew(expr_0A, 1, num, out regionAffineTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void MirrorRegion(HObject region, out HObject regionMirror, HTuple mode, HTuple widthHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(489);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, widthHeight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(widthHeight);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMirror);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ZoomRegion(HObject region, out HObject regionZoom, HTuple scaleWidth, HTuple scaleHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(490);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, scaleWidth);
			SZXCArimAPI.Store(expr_0A, 1, scaleHeight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scaleWidth);
			SZXCArimAPI.UnpinTuple(scaleHeight);
			num = HObject.LoadNew(expr_0A, 1, num, out regionZoom);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void MoveRegion(HObject region, out HObject regionMoved, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(491);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMoved);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void JunctionsSkeleton(HObject region, out HObject endPoints, out HObject juncPoints)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(492);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out endPoints);
			num = HObject.LoadNew(expr_0A, 2, num, out juncPoints);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Intersection(HObject region1, HObject region2, out HObject regionIntersection)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(493);
			SZXCArimAPI.Store(expr_0A, 1, region1);
			SZXCArimAPI.Store(expr_0A, 2, region2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionIntersection);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region1);
			GC.KeepAlive(region2);
		}

		public static void Interjacent(HObject region, out HObject regionInterjacent, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(494);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out regionInterjacent);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void FillUp(HObject region, out HObject regionFillUp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(495);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionFillUp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void FillUpShape(HObject region, out HObject regionFillUp, HTuple feature, HTuple min, HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(496);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, feature);
			SZXCArimAPI.Store(expr_0A, 1, min);
			SZXCArimAPI.Store(expr_0A, 2, max);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_0A, 1, num, out regionFillUp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ExpandRegion(HObject regions, HObject forbiddenArea, out HObject regionExpanded, HTuple iterations, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(497);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, forbiddenArea);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out regionExpanded);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(forbiddenArea);
		}

		public static void ClipRegionRel(HObject region, out HObject regionClipped, HTuple top, HTuple bottom, HTuple left, HTuple right)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(498);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, top);
			SZXCArimAPI.Store(expr_0A, 1, bottom);
			SZXCArimAPI.Store(expr_0A, 2, left);
			SZXCArimAPI.Store(expr_0A, 3, right);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(top);
			SZXCArimAPI.UnpinTuple(bottom);
			SZXCArimAPI.UnpinTuple(left);
			SZXCArimAPI.UnpinTuple(right);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClipped);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ClipRegion(HObject region, out HObject regionClipped, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(499);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClipped);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void RankRegion(HObject region, out HObject regionCount, HTuple width, HTuple height, HTuple number)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(500);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, number);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(number);
			num = HObject.LoadNew(expr_0A, 1, num, out regionCount);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Connection(HObject region, out HObject connectedRegions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(501);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out connectedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void SymmDifference(HObject region1, HObject region2, out HObject regionDifference)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(502);
			SZXCArimAPI.Store(expr_0A, 1, region1);
			SZXCArimAPI.Store(expr_0A, 2, region2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDifference);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region1);
			GC.KeepAlive(region2);
		}

		public static void Difference(HObject region, HObject sub, out HObject regionDifference)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(503);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, sub);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDifference);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(sub);
		}

		public static void Complement(HObject region, out HObject regionComplement)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(504);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionComplement);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void BackgroundSeg(HObject foreground, out HObject backgroundRegions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(505);
			SZXCArimAPI.Store(expr_0A, 1, foreground);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out backgroundRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(foreground);
		}

		public static void HammingChangeRegion(HObject inputRegion, out HObject outputRegion, HTuple width, HTuple height, HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(506);
			SZXCArimAPI.Store(expr_0A, 1, inputRegion);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, distance);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(distance);
			num = HObject.LoadNew(expr_0A, 1, num, out outputRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(inputRegion);
		}

		public static void RemoveNoiseRegion(HObject inputRegion, out HObject outputRegion, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(507);
			SZXCArimAPI.Store(expr_0A, 1, inputRegion);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_0A, 1, num, out outputRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(inputRegion);
		}

		public static void ShapeTrans(HObject region, out HObject regionTrans, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(508);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_0A, 1, num, out regionTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ExpandGray(HObject regions, HObject image, HObject forbiddenArea, out HObject regionExpand, HTuple iterations, HTuple mode, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(509);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 3, forbiddenArea);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out regionExpand);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
			GC.KeepAlive(forbiddenArea);
		}

		public static void ExpandGrayRef(HObject regions, HObject image, HObject forbiddenArea, out HObject regionExpand, HTuple iterations, HTuple mode, HTuple refGray, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(510);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 3, forbiddenArea);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.Store(expr_0A, 2, refGray);
			SZXCArimAPI.Store(expr_0A, 3, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(refGray);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out regionExpand);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
			GC.KeepAlive(forbiddenArea);
		}

		public static void SplitSkeletonLines(HObject skeletonRegion, HTuple maxDistance, out HTuple beginRow, out HTuple beginCol, out HTuple endRow, out HTuple endCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(511);
			SZXCArimAPI.Store(expr_0A, 1, skeletonRegion);
			SZXCArimAPI.Store(expr_0A, 0, maxDistance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maxDistance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out beginRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out beginCol);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out endRow);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out endCol);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(skeletonRegion);
		}

		public static void SplitSkeletonRegion(HObject skeletonRegion, out HObject regionLines, HTuple maxDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(512);
			SZXCArimAPI.Store(expr_0A, 1, skeletonRegion);
			SZXCArimAPI.Store(expr_0A, 0, maxDistance);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maxDistance);
			num = HObject.LoadNew(expr_0A, 1, num, out regionLines);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(skeletonRegion);
		}

		public static void GenRegionHisto(out HObject region, HTuple histogram, HTuple row, HTuple column, HTuple scale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(513);
			SZXCArimAPI.Store(expr_0A, 0, histogram);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(histogram);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(scale);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EliminateRuns(HObject region, out HObject regionClipped, HTuple elimShorter, HTuple elimLonger)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(514);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, elimShorter);
			SZXCArimAPI.Store(expr_0A, 1, elimLonger);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(elimShorter);
			SZXCArimAPI.UnpinTuple(elimLonger);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClipped);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void SurfaceNormalsObjectModel3d(HTuple objectModel3D, HTuple method, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3DNormals)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(515);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DNormals);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SmoothObjectModel3d(HTuple objectModel3D, HTuple method, HTuple genParamName, HTuple genParamValue, out HTuple smoothObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(516);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out smoothObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TriangulateObjectModel3d(HTuple objectModel3D, HTuple method, HTuple genParamName, HTuple genParamValue, out HTuple triangulatedObjectModel3D, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(517);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out triangulatedObjectModel3D);
			num = HTuple.LoadNew(expr_0A, 1, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllStereoModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(518);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearStereoModel(HTuple stereoModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(519);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReconstructPointsStereo(HTuple stereoModelID, HTuple row, HTuple column, HTuple covIP, HTuple cameraIdx, HTuple pointIdx, out HTuple x, out HTuple y, out HTuple z, out HTuple covWP, out HTuple pointIdxOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(520);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, covIP);
			SZXCArimAPI.Store(expr_0A, 4, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 5, pointIdx);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(covIP);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(pointIdx);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out covWP);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out pointIdxOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReconstructSurfaceStereo(HObject images, HTuple stereoModelID, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(521);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void GetStereoModelObject(out HObject objectVal, HTuple stereoModelID, HTuple pairIndex, HTuple objectName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(522);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, pairIndex);
			SZXCArimAPI.Store(expr_0A, 2, objectName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(pairIndex);
			SZXCArimAPI.UnpinTuple(objectName);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetStereoModelImagePairs(HTuple stereoModelID, out HTuple from, out HTuple to)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(523);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out from);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out to);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetStereoModelImagePairs(HTuple stereoModelID, HTuple from, HTuple to)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(524);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, from);
			SZXCArimAPI.Store(expr_0A, 2, to);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(from);
			SZXCArimAPI.UnpinTuple(to);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetStereoModelParam(HTuple stereoModelID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(525);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetStereoModelParam(HTuple stereoModelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(526);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateStereoModel(HTuple cameraSetupModelID, HTuple method, HTuple genParamName, HTuple genParamValue, out HTuple stereoModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(527);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out stereoModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMessageQueueParam(HTuple queueHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(528);
			SZXCArimAPI.Store(expr_0A, 0, queueHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(queueHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMessageQueueParam(HTuple queueHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(529);
			SZXCArimAPI.Store(expr_0A, 0, queueHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(queueHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DequeueMessage(HTuple queueHandle, HTuple genParamName, HTuple genParamValue, out HTuple messageHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(530);
			SZXCArimAPI.Store(expr_0A, 0, queueHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(queueHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out messageHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EnqueueMessage(HTuple queueHandle, HTuple messageHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(531);
			SZXCArimAPI.Store(expr_0A, 0, queueHandle);
			SZXCArimAPI.Store(expr_0A, 1, messageHandle);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(queueHandle);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMessageQueue(HTuple queueHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(532);
			SZXCArimAPI.Store(expr_0A, 0, queueHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(queueHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateMessageQueue(out HTuple queueHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(533);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out queueHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMessageParam(HTuple messageHandle, HTuple genParamName, HTuple key, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(534);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMessageParam(HTuple messageHandle, HTuple genParamName, HTuple key, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(535);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, key);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetMessageObj(out HObject objectData, HTuple messageHandle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(536);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(key);
			num = HObject.LoadNew(expr_0A, 1, num, out objectData);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMessageObj(HObject objectData, HTuple messageHandle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(537);
			SZXCArimAPI.Store(expr_0A, 1, objectData);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(objectData);
		}

		public static void GetMessageTuple(HTuple messageHandle, HTuple key, out HTuple tupleData)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(538);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out tupleData);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMessageTuple(HTuple messageHandle, HTuple key, HTuple tupleData)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(539);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.Store(expr_0A, 2, tupleData);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.UnpinTuple(tupleData);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMessage(HTuple messageHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(540);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateMessage(out HTuple messageHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(541);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out messageHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllConditions()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(542);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearCondition(HTuple conditionHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(543);
			SZXCArimAPI.Store(expr_0A, 0, conditionHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(conditionHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void BroadcastCondition(HTuple conditionHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(544);
			SZXCArimAPI.Store(expr_0A, 0, conditionHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(conditionHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SignalCondition(HTuple conditionHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(545);
			SZXCArimAPI.Store(expr_0A, 0, conditionHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(conditionHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TimedWaitCondition(HTuple conditionHandle, HTuple mutexHandle, HTuple timeout)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(546);
			SZXCArimAPI.Store(expr_0A, 0, conditionHandle);
			SZXCArimAPI.Store(expr_0A, 1, mutexHandle);
			SZXCArimAPI.Store(expr_0A, 2, timeout);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(conditionHandle);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			SZXCArimAPI.UnpinTuple(timeout);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WaitCondition(HTuple conditionHandle, HTuple mutexHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(547);
			SZXCArimAPI.Store(expr_0A, 0, conditionHandle);
			SZXCArimAPI.Store(expr_0A, 1, mutexHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(conditionHandle);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateCondition(HTuple attribName, HTuple attribValue, out HTuple conditionHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(548);
			SZXCArimAPI.Store(expr_0A, 0, attribName);
			SZXCArimAPI.Store(expr_0A, 1, attribValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attribValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out conditionHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllBarriers()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(549);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearBarrier(HTuple barrierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(550);
			SZXCArimAPI.Store(expr_0A, 0, barrierHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barrierHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WaitBarrier(HTuple barrierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(551);
			SZXCArimAPI.Store(expr_0A, 0, barrierHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barrierHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateBarrier(HTuple attribName, HTuple attribValue, HTuple teamSize, out HTuple barrierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(552);
			SZXCArimAPI.Store(expr_0A, 0, attribName);
			SZXCArimAPI.Store(expr_0A, 1, attribValue);
			SZXCArimAPI.Store(expr_0A, 2, teamSize);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attribValue);
			SZXCArimAPI.UnpinTuple(teamSize);
			num = HTuple.LoadNew(expr_0A, 0, num, out barrierHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllEvents()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(553);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearEvent(HTuple eventHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(554);
			SZXCArimAPI.Store(expr_0A, 0, eventHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(eventHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SignalEvent(HTuple eventHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(555);
			SZXCArimAPI.Store(expr_0A, 0, eventHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(eventHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TryWaitEvent(HTuple eventHandle, out HTuple busy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(556);
			SZXCArimAPI.Store(expr_0A, 0, eventHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(eventHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out busy);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WaitEvent(HTuple eventHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(557);
			SZXCArimAPI.Store(expr_0A, 0, eventHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(eventHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateEvent(HTuple attribName, HTuple attribValue, out HTuple eventHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(558);
			SZXCArimAPI.Store(expr_0A, 0, attribName);
			SZXCArimAPI.Store(expr_0A, 1, attribValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attribValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out eventHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllMutexes()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(559);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMutex(HTuple mutexHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(560);
			SZXCArimAPI.Store(expr_0A, 0, mutexHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void UnlockMutex(HTuple mutexHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(561);
			SZXCArimAPI.Store(expr_0A, 0, mutexHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TryLockMutex(HTuple mutexHandle, out HTuple busy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(562);
			SZXCArimAPI.Store(expr_0A, 0, mutexHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out busy);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void LockMutex(HTuple mutexHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(563);
			SZXCArimAPI.Store(expr_0A, 0, mutexHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mutexHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateMutex(HTuple attribName, HTuple attribValue, out HTuple mutexHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(564);
			SZXCArimAPI.Store(expr_0A, 0, attribName);
			SZXCArimAPI.Store(expr_0A, 1, attribValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attribValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out mutexHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetThreadingAttrib(HTuple threadingHandle, out HTuple threadingClass, out HTuple attribName, out HTuple attribValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(565);
			SZXCArimAPI.Store(expr_0A, 0, threadingHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(threadingHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out threadingClass);
			num = HTuple.LoadNew(expr_0A, 1, num, out attribName);
			num = HTuple.LoadNew(expr_0A, 2, num, out attribValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetAopInfo(HTuple operatorName, HTuple indexName, HTuple indexValue, HTuple infoName, HTuple infoValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(566);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, indexName);
			SZXCArimAPI.Store(expr_0A, 2, indexValue);
			SZXCArimAPI.Store(expr_0A, 3, infoName);
			SZXCArimAPI.Store(expr_0A, 4, infoValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(indexName);
			SZXCArimAPI.UnpinTuple(indexValue);
			SZXCArimAPI.UnpinTuple(infoName);
			SZXCArimAPI.UnpinTuple(infoValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetAopInfo(HTuple operatorName, HTuple indexName, HTuple indexValue, HTuple infoName, out HTuple infoValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(567);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, indexName);
			SZXCArimAPI.Store(expr_0A, 2, indexValue);
			SZXCArimAPI.Store(expr_0A, 3, infoName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(indexName);
			SZXCArimAPI.UnpinTuple(indexValue);
			SZXCArimAPI.UnpinTuple(infoName);
			num = HTuple.LoadNew(expr_0A, 0, num, out infoValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryAopInfo(HTuple operatorName, HTuple indexName, HTuple indexValue, out HTuple name, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(568);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, indexName);
			SZXCArimAPI.Store(expr_0A, 2, indexValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(indexName);
			SZXCArimAPI.UnpinTuple(indexValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out name);
			num = HTuple.LoadNew(expr_0A, 1, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OptimizeAop(HTuple operatorName, HTuple iconicType, HTuple fileName, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(569);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, iconicType);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(iconicType);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteAopKnowledge(HTuple fileName, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(570);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadAopKnowledge(HTuple fileName, HTuple genParamName, HTuple genParamValue, out HTuple attributes, out HTuple operatorNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(571);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out attributes);
			num = HTuple.LoadNew(expr_0A, 1, num, out operatorNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TestAccess(HObject objectVal, out HObject dummy, HTuple numReadChord, HTuple numCopyObj, HTuple writeChord)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(572);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.Store(expr_0A, 0, numReadChord);
			SZXCArimAPI.Store(expr_0A, 1, numCopyObj);
			SZXCArimAPI.Store(expr_0A, 2, writeChord);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numReadChord);
			SZXCArimAPI.UnpinTuple(numCopyObj);
			SZXCArimAPI.UnpinTuple(writeChord);
			num = HObject.LoadNew(expr_0A, 1, num, out dummy);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objectVal);
		}

		public static void ObjDiff(HObject objects, HObject objectsSub, out HObject objectsDiff)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(573);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 2, objectsSub);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out objectsDiff);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
			GC.KeepAlive(objectsSub);
		}

		public static void SetGrayval(HObject image, HTuple row, HTuple column, HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(574);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, grayval);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(grayval);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void PaintXld(HObject XLD, HObject image, out HObject imageResult, HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(575);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, grayval);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(grayval);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
			GC.KeepAlive(image);
		}

		public static void PaintRegion(HObject region, HObject image, out HObject imageResult, HTuple grayval, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(576);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, grayval);
			SZXCArimAPI.Store(expr_0A, 1, type);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(grayval);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void OverpaintRegion(HObject image, HObject region, HTuple grayval, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(577);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, grayval);
			SZXCArimAPI.Store(expr_0A, 1, type);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(grayval);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void GenImageProto(HObject image, out HObject imageCleared, HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(578);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, grayval);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(grayval);
			num = HObject.LoadNew(expr_0A, 1, num, out imageCleared);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PaintGray(HObject imageSource, HObject imageDestination, out HObject mixedImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(579);
			SZXCArimAPI.Store(expr_0A, 1, imageSource);
			SZXCArimAPI.Store(expr_0A, 2, imageDestination);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out mixedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageSource);
			GC.KeepAlive(imageDestination);
		}

		public static void OverpaintGray(HObject imageDestination, HObject imageSource)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(580);
			SZXCArimAPI.Store(expr_0A, 1, imageDestination);
			SZXCArimAPI.Store(expr_0A, 2, imageSource);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(imageDestination);
			GC.KeepAlive(imageSource);
		}

		public static void IntegerToObj(out HObject objects, HTuple surrogateTuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(581);
			SZXCArimAPI.Store(expr_0A, 0, surrogateTuple);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surrogateTuple);
			num = HObject.LoadNew(expr_0A, 1, num, out objects);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ObjToInteger(HObject objects, HTuple index, HTuple number, out HTuple surrogateTuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(582);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.Store(expr_0A, 1, number);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(number);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out surrogateTuple);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
		}

		public static void CopyObj(HObject objects, out HObject objectsSelected, HTuple index, HTuple numObj)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(583);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.Store(expr_0A, 1, numObj);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(numObj);
			num = HObject.LoadNew(expr_0A, 1, num, out objectsSelected);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
		}

		public static void ConcatObj(HObject objects1, HObject objects2, out HObject objectsConcat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(584);
			SZXCArimAPI.Store(expr_0A, 1, objects1);
			SZXCArimAPI.Store(expr_0A, 2, objects2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out objectsConcat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects1);
			GC.KeepAlive(objects2);
		}

		public static void ClearObj(HObject objects)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(585);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(objects);
		}

		public static void CopyImage(HObject image, out HObject dupImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(586);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out dupImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SelectObj(HObject objects, out HObject objectSelected, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(587);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			num = HObject.LoadNew(expr_0A, 1, num, out objectSelected);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
		}

		public static void CompareObj(HObject objects1, HObject objects2, HTuple epsilon, out HTuple isEqual)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(588);
			SZXCArimAPI.Store(expr_0A, 1, objects1);
			SZXCArimAPI.Store(expr_0A, 2, objects2);
			SZXCArimAPI.Store(expr_0A, 0, epsilon);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(epsilon);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isEqual);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects1);
			GC.KeepAlive(objects2);
		}

		public static void TestSubsetRegion(HObject region1, HObject region2, out HTuple isSubset)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(589);
			SZXCArimAPI.Store(expr_0A, 1, region1);
			SZXCArimAPI.Store(expr_0A, 2, region2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isSubset);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region1);
			GC.KeepAlive(region2);
		}

		public static void TestEqualRegion(HObject regions1, HObject regions2, out HTuple isEqual)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(590);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isEqual);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void TestEqualObj(HObject objects1, HObject objects2, out HTuple isEqual)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(591);
			SZXCArimAPI.Store(expr_0A, 1, objects1);
			SZXCArimAPI.Store(expr_0A, 2, objects2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isEqual);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects1);
			GC.KeepAlive(objects2);
		}

		public static void CountObj(HObject objects, out HTuple number)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(592);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out number);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
		}

		public static void GetChannelInfo(HObject objectVal, HTuple request, HTuple channel, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(593);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.Store(expr_0A, 0, request);
			SZXCArimAPI.Store(expr_0A, 1, channel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(request);
			SZXCArimAPI.UnpinTuple(channel);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objectVal);
		}

		public static void GetObjClass(HObject objectVal, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(594);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objectVal);
		}

		public static void GenImageInterleaved(out HObject imageRGB, HTuple pixelPointer, HTuple colorFormat, HTuple originalWidth, HTuple originalHeight, HTuple alignment, HTuple type, HTuple imageWidth, HTuple imageHeight, HTuple startRow, HTuple startColumn, HTuple bitsPerChannel, HTuple bitShift)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(595);
			SZXCArimAPI.Store(expr_0A, 0, pixelPointer);
			SZXCArimAPI.Store(expr_0A, 1, colorFormat);
			SZXCArimAPI.Store(expr_0A, 2, originalWidth);
			SZXCArimAPI.Store(expr_0A, 3, originalHeight);
			SZXCArimAPI.Store(expr_0A, 4, alignment);
			SZXCArimAPI.Store(expr_0A, 5, type);
			SZXCArimAPI.Store(expr_0A, 6, imageWidth);
			SZXCArimAPI.Store(expr_0A, 7, imageHeight);
			SZXCArimAPI.Store(expr_0A, 8, startRow);
			SZXCArimAPI.Store(expr_0A, 9, startColumn);
			SZXCArimAPI.Store(expr_0A, 10, bitsPerChannel);
			SZXCArimAPI.Store(expr_0A, 11, bitShift);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pixelPointer);
			SZXCArimAPI.UnpinTuple(colorFormat);
			SZXCArimAPI.UnpinTuple(originalWidth);
			SZXCArimAPI.UnpinTuple(originalHeight);
			SZXCArimAPI.UnpinTuple(alignment);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(startRow);
			SZXCArimAPI.UnpinTuple(startColumn);
			SZXCArimAPI.UnpinTuple(bitsPerChannel);
			SZXCArimAPI.UnpinTuple(bitShift);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRGB);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionPolygonXld(HObject polygon, out HObject region, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(596);
			SZXCArimAPI.Store(expr_0A, 1, polygon);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(polygon);
		}

		public static void GenRegionContourXld(HObject contour, out HObject region, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(597);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void GenRegionPolygonFilled(out HObject region, HTuple rows, HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(598);
			SZXCArimAPI.Store(expr_0A, 0, rows);
			SZXCArimAPI.Store(expr_0A, 1, columns);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionPolygon(out HObject region, HTuple rows, HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(599);
			SZXCArimAPI.Store(expr_0A, 0, rows);
			SZXCArimAPI.Store(expr_0A, 1, columns);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionPoints(out HObject region, HTuple rows, HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(600);
			SZXCArimAPI.Store(expr_0A, 0, rows);
			SZXCArimAPI.Store(expr_0A, 1, columns);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionRuns(out HObject region, HTuple row, HTuple columnBegin, HTuple columnEnd)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(601);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, columnBegin);
			SZXCArimAPI.Store(expr_0A, 2, columnEnd);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(columnBegin);
			SZXCArimAPI.UnpinTuple(columnEnd);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRectangle2(out HObject rectangle, HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(602);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, length1);
			SZXCArimAPI.Store(expr_0A, 4, length2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			num = HObject.LoadNew(expr_0A, 1, num, out rectangle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRectangle1(out HObject rectangle, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(603);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HObject.LoadNew(expr_0A, 1, num, out rectangle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRandomRegion(out HObject regionRandom, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(604);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionRandom);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImage3(out HObject imageRGB, HTuple type, HTuple width, HTuple height, HTuple pixelPointerRed, HTuple pixelPointerGreen, HTuple pixelPointerBlue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(605);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, pixelPointerRed);
			SZXCArimAPI.Store(expr_0A, 4, pixelPointerGreen);
			SZXCArimAPI.Store(expr_0A, 5, pixelPointerBlue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(pixelPointerRed);
			SZXCArimAPI.UnpinTuple(pixelPointerGreen);
			SZXCArimAPI.UnpinTuple(pixelPointerBlue);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRGB);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImage1(out HObject image, HTuple type, HTuple width, HTuple height, HTuple pixelPointer)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(606);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, pixelPointer);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(pixelPointer);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImageConst(out HObject image, HTuple type, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(607);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenEllipseSector(out HObject ellipseSector, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, HTuple startAngle, HTuple endAngle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(608);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, radius1);
			SZXCArimAPI.Store(expr_0A, 4, radius2);
			SZXCArimAPI.Store(expr_0A, 5, startAngle);
			SZXCArimAPI.Store(expr_0A, 6, endAngle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			SZXCArimAPI.UnpinTuple(startAngle);
			SZXCArimAPI.UnpinTuple(endAngle);
			num = HObject.LoadNew(expr_0A, 1, num, out ellipseSector);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenEllipse(out HObject ellipse, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(609);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, radius1);
			SZXCArimAPI.Store(expr_0A, 4, radius2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			num = HObject.LoadNew(expr_0A, 1, num, out ellipse);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenCircleSector(out HObject circleSector, HTuple row, HTuple column, HTuple radius, HTuple startAngle, HTuple endAngle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(610);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.Store(expr_0A, 3, startAngle);
			SZXCArimAPI.Store(expr_0A, 4, endAngle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(startAngle);
			SZXCArimAPI.UnpinTuple(endAngle);
			num = HObject.LoadNew(expr_0A, 1, num, out circleSector);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenCircle(out HObject circle, HTuple row, HTuple column, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(611);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out circle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenCheckerRegion(out HObject regionChecker, HTuple widthRegion, HTuple heightRegion, HTuple widthPattern, HTuple heightPattern)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(612);
			SZXCArimAPI.Store(expr_0A, 0, widthRegion);
			SZXCArimAPI.Store(expr_0A, 1, heightRegion);
			SZXCArimAPI.Store(expr_0A, 2, widthPattern);
			SZXCArimAPI.Store(expr_0A, 3, heightPattern);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(widthRegion);
			SZXCArimAPI.UnpinTuple(heightRegion);
			SZXCArimAPI.UnpinTuple(widthPattern);
			SZXCArimAPI.UnpinTuple(heightPattern);
			num = HObject.LoadNew(expr_0A, 1, num, out regionChecker);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenGridRegion(out HObject regionGrid, HTuple rowSteps, HTuple columnSteps, HTuple type, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(613);
			SZXCArimAPI.Store(expr_0A, 0, rowSteps);
			SZXCArimAPI.Store(expr_0A, 1, columnSteps);
			SZXCArimAPI.Store(expr_0A, 2, type);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowSteps);
			SZXCArimAPI.UnpinTuple(columnSteps);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionGrid);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRandomRegions(out HObject regions, HTuple type, HTuple widthMin, HTuple widthMax, HTuple heightMin, HTuple heightMax, HTuple phiMin, HTuple phiMax, HTuple numRegions, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(614);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, widthMin);
			SZXCArimAPI.Store(expr_0A, 2, widthMax);
			SZXCArimAPI.Store(expr_0A, 3, heightMin);
			SZXCArimAPI.Store(expr_0A, 4, heightMax);
			SZXCArimAPI.Store(expr_0A, 5, phiMin);
			SZXCArimAPI.Store(expr_0A, 6, phiMax);
			SZXCArimAPI.Store(expr_0A, 7, numRegions);
			SZXCArimAPI.Store(expr_0A, 8, width);
			SZXCArimAPI.Store(expr_0A, 9, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(widthMin);
			SZXCArimAPI.UnpinTuple(widthMax);
			SZXCArimAPI.UnpinTuple(heightMin);
			SZXCArimAPI.UnpinTuple(heightMax);
			SZXCArimAPI.UnpinTuple(phiMin);
			SZXCArimAPI.UnpinTuple(phiMax);
			SZXCArimAPI.UnpinTuple(numRegions);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionHline(out HObject regions, HTuple orientation, HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(615);
			SZXCArimAPI.Store(expr_0A, 0, orientation);
			SZXCArimAPI.Store(expr_0A, 1, distance);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(orientation);
			SZXCArimAPI.UnpinTuple(distance);
			num = HObject.LoadNew(expr_0A, 1, num, out regions);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenRegionLine(out HObject regionLines, HTuple beginRow, HTuple beginCol, HTuple endRow, HTuple endCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(616);
			SZXCArimAPI.Store(expr_0A, 0, beginRow);
			SZXCArimAPI.Store(expr_0A, 1, beginCol);
			SZXCArimAPI.Store(expr_0A, 2, endRow);
			SZXCArimAPI.Store(expr_0A, 3, endCol);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(beginRow);
			SZXCArimAPI.UnpinTuple(beginCol);
			SZXCArimAPI.UnpinTuple(endRow);
			SZXCArimAPI.UnpinTuple(endCol);
			num = HObject.LoadNew(expr_0A, 1, num, out regionLines);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenEmptyObj(out HObject emptyObject)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(617);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out emptyObject);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenEmptyRegion(out HObject emptyRegion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(618);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out emptyRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImageGrayRamp(out HObject imageGrayRamp, HTuple alpha, HTuple beta, HTuple mean, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(619);
			SZXCArimAPI.Store(expr_0A, 0, alpha);
			SZXCArimAPI.Store(expr_0A, 1, beta);
			SZXCArimAPI.Store(expr_0A, 2, mean);
			SZXCArimAPI.Store(expr_0A, 3, row);
			SZXCArimAPI.Store(expr_0A, 4, column);
			SZXCArimAPI.Store(expr_0A, 5, width);
			SZXCArimAPI.Store(expr_0A, 6, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(beta);
			SZXCArimAPI.UnpinTuple(mean);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGrayRamp);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImage3Extern(out HObject image, HTuple type, HTuple width, HTuple height, HTuple pointerRed, HTuple pointerGreen, HTuple pointerBlue, HTuple clearProc)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(620);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, pointerRed);
			SZXCArimAPI.Store(expr_0A, 4, pointerGreen);
			SZXCArimAPI.Store(expr_0A, 5, pointerBlue);
			SZXCArimAPI.Store(expr_0A, 6, clearProc);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(pointerRed);
			SZXCArimAPI.UnpinTuple(pointerGreen);
			SZXCArimAPI.UnpinTuple(pointerBlue);
			SZXCArimAPI.UnpinTuple(clearProc);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImage1Extern(out HObject image, HTuple type, HTuple width, HTuple height, HTuple pixelPointer, HTuple clearProc)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(621);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, pixelPointer);
			SZXCArimAPI.Store(expr_0A, 4, clearProc);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(pixelPointer);
			SZXCArimAPI.UnpinTuple(clearProc);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImage1Rect(out HObject image, HTuple pixelPointer, HTuple width, HTuple height, HTuple verticalPitch, HTuple horizontalBitPitch, HTuple bitsPerPixel, HTuple doCopy, HTuple clearProc)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(622);
			SZXCArimAPI.Store(expr_0A, 0, pixelPointer);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, verticalPitch);
			SZXCArimAPI.Store(expr_0A, 4, horizontalBitPitch);
			SZXCArimAPI.Store(expr_0A, 5, bitsPerPixel);
			SZXCArimAPI.Store(expr_0A, 6, doCopy);
			SZXCArimAPI.Store(expr_0A, 7, clearProc);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pixelPointer);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(verticalPitch);
			SZXCArimAPI.UnpinTuple(horizontalBitPitch);
			SZXCArimAPI.UnpinTuple(bitsPerPixel);
			SZXCArimAPI.UnpinTuple(doCopy);
			SZXCArimAPI.UnpinTuple(clearProc);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetImagePointer1Rect(HObject image, out HTuple pixelPointer, out HTuple width, out HTuple height, out HTuple verticalPitch, out HTuple horizontalBitPitch, out HTuple bitsPerPixel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(623);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out pixelPointer);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out height);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out verticalPitch);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out horizontalBitPitch);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out bitsPerPixel);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetImagePointer3(HObject imageRGB, out HTuple pointerRed, out HTuple pointerGreen, out HTuple pointerBlue, out HTuple type, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(624);
			SZXCArimAPI.Store(expr_0A, 1, imageRGB);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out pointerRed);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out pointerGreen);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out pointerBlue);
			num = HTuple.LoadNew(expr_0A, 3, num, out type);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRGB);
		}

		public static void GetImagePointer1(HObject image, out HTuple pointer, out HTuple type, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(625);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out pointer);
			num = HTuple.LoadNew(expr_0A, 1, num, out type);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetImageType(HObject image, out HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(626);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out type);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetImageSize(HObject image, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(627);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetImageTime(HObject image, out HTuple MSecond, out HTuple second, out HTuple minute, out HTuple hour, out HTuple day, out HTuple YDay, out HTuple month, out HTuple year)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(628);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out MSecond);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out second);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out minute);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out hour);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out day);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out YDay);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out month);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out year);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetGrayvalInterpolated(HObject image, HTuple row, HTuple column, HTuple interpolation, out HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(629);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out grayval);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetGrayval(HObject image, HTuple row, HTuple column, out HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(630);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, num, out grayval);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetRegionThickness(HObject region, out HTuple thickness, out HTuple histogramm)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(631);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out thickness);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out histogramm);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionPolygon(HObject region, HTuple tolerance, out HTuple rows, out HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(632);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, tolerance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tolerance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columns);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionPoints(HObject region, out HTuple rows, out HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(633);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columns);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionContour(HObject region, out HTuple rows, out HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(634);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columns);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionRuns(HObject region, out HTuple row, out HTuple columnBegin, out HTuple columnEnd)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(635);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columnBegin);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out columnEnd);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionChain(HObject region, out HTuple row, out HTuple column, out HTuple chain)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(636);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out chain);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void GetRegionConvex(HObject region, out HTuple rows, out HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(637);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columns);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DoOcvSimple(HObject pattern, HTuple OCVHandle, HTuple patternName, HTuple adaptPos, HTuple adaptSize, HTuple adaptAngle, HTuple adaptGray, HTuple threshold, out HTuple quality)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(638);
			SZXCArimAPI.Store(expr_0A, 1, pattern);
			SZXCArimAPI.Store(expr_0A, 0, OCVHandle);
			SZXCArimAPI.Store(expr_0A, 1, patternName);
			SZXCArimAPI.Store(expr_0A, 2, adaptPos);
			SZXCArimAPI.Store(expr_0A, 3, adaptSize);
			SZXCArimAPI.Store(expr_0A, 4, adaptAngle);
			SZXCArimAPI.Store(expr_0A, 5, adaptGray);
			SZXCArimAPI.Store(expr_0A, 6, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCVHandle);
			SZXCArimAPI.UnpinTuple(patternName);
			SZXCArimAPI.UnpinTuple(adaptPos);
			SZXCArimAPI.UnpinTuple(adaptSize);
			SZXCArimAPI.UnpinTuple(adaptAngle);
			SZXCArimAPI.UnpinTuple(adaptGray);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out quality);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(pattern);
		}

		public static void TraindOcvProj(HObject pattern, HTuple OCVHandle, HTuple name, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(639);
			SZXCArimAPI.Store(expr_0A, 1, pattern);
			SZXCArimAPI.Store(expr_0A, 0, OCVHandle);
			SZXCArimAPI.Store(expr_0A, 1, name);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCVHandle);
			SZXCArimAPI.UnpinTuple(name);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(pattern);
		}

		public static void DeserializeOcv(HTuple serializedItemHandle, out HTuple OCVHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(640);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCVHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcv(HTuple OCVHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(641);
			SZXCArimAPI.Store(expr_0A, 0, OCVHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCVHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcv(HTuple fileName, out HTuple OCVHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(642);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCVHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteOcv(HTuple OCVHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(643);
			SZXCArimAPI.Store(expr_0A, 0, OCVHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCVHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseAllOcvs()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(644);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseOcv(HTuple OCVHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(645);
			SZXCArimAPI.Store(expr_0A, 0, OCVHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCVHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateOcvProj(HTuple patternNames, out HTuple OCVHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(646);
			SZXCArimAPI.Store(expr_0A, 0, patternNames);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(patternNames);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCVHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DoOcrWordKnn(HObject character, HObject image, HTuple OCRHandle, HTuple expression, HTuple numAlternatives, HTuple numCorrections, out HTuple classVal, out HTuple confidence, out HTuple word, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(647);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, expression);
			SZXCArimAPI.Store(expr_0A, 2, numAlternatives);
			SZXCArimAPI.Store(expr_0A, 3, numCorrections);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(expression);
			SZXCArimAPI.UnpinTuple(numAlternatives);
			SZXCArimAPI.UnpinTuple(numCorrections);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			num = HTuple.LoadNew(expr_0A, 2, num, out word);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DeserializeOcrClassKnn(HTuple serializedItemHandle, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(648);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcrClassKnn(HTuple OCRHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(649);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrClassKnn(HTuple fileName, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(650);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteOcrClassKnn(HTuple OCRHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(651);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllOcrClassKnn()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(652);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearOcrClassKnn(HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(653);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateOcrClassKnn(HTuple widthCharacter, HTuple heightCharacter, HTuple interpolation, HTuple features, HTuple characters, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(654);
			SZXCArimAPI.Store(expr_0A, 0, widthCharacter);
			SZXCArimAPI.Store(expr_0A, 1, heightCharacter);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.Store(expr_0A, 3, features);
			SZXCArimAPI.Store(expr_0A, 4, characters);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(widthCharacter);
			SZXCArimAPI.UnpinTuple(heightCharacter);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(characters);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainfOcrClassKnn(HTuple OCRHandle, HTuple trainingFile, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(655);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFeaturesOcrClassKnn(HObject character, HTuple OCRHandle, HTuple transform, out HTuple features)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(656);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, transform);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(transform);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
		}

		public static void GetParamsOcrClassKnn(HTuple OCRHandle, out HTuple widthCharacter, out HTuple heightCharacter, out HTuple interpolation, out HTuple features, out HTuple characters, out HTuple preprocessing, out HTuple numTrees)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(657);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out widthCharacter);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out heightCharacter);
			num = HTuple.LoadNew(expr_0A, 2, num, out interpolation);
			num = HTuple.LoadNew(expr_0A, 3, num, out features);
			num = HTuple.LoadNew(expr_0A, 4, num, out characters);
			num = HTuple.LoadNew(expr_0A, 5, num, out preprocessing);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out numTrees);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DoOcrMultiClassKnn(HObject character, HObject image, HTuple OCRHandle, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(658);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrSingleClassKnn(HObject character, HObject image, HTuple OCRHandle, HTuple numClasses, HTuple numNeighbors, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(659);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, numClasses);
			SZXCArimAPI.Store(expr_0A, 2, numNeighbors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(numClasses);
			SZXCArimAPI.UnpinTuple(numNeighbors);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void SelectFeatureSetTrainfKnn(HTuple trainingFile, HTuple featureList, HTuple selectionMethod, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle, out HTuple featureSet, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(660);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, featureList);
			SZXCArimAPI.Store(expr_0A, 2, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(featureList);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out featureSet);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetTrainfMlpProtected(HTuple trainingFile, HTuple password, HTuple featureList, HTuple selectionMethod, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle, out HTuple featureSet, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(661);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, password);
			SZXCArimAPI.Store(expr_0A, 2, featureList);
			SZXCArimAPI.Store(expr_0A, 3, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			SZXCArimAPI.UnpinTuple(featureList);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out featureSet);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetTrainfMlp(HTuple trainingFile, HTuple featureList, HTuple selectionMethod, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle, out HTuple featureSet, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(662);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, featureList);
			SZXCArimAPI.Store(expr_0A, 2, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(featureList);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out featureSet);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetTrainfSvmProtected(HTuple trainingFile, HTuple password, HTuple featureList, HTuple selectionMethod, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle, out HTuple featureSet, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(663);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, password);
			SZXCArimAPI.Store(expr_0A, 2, featureList);
			SZXCArimAPI.Store(expr_0A, 3, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			SZXCArimAPI.UnpinTuple(featureList);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out featureSet);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetTrainfSvm(HTuple trainingFile, HTuple featureList, HTuple selectionMethod, HTuple width, HTuple height, HTuple genParamName, HTuple genParamValue, out HTuple OCRHandle, out HTuple featureSet, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(664);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, featureList);
			SZXCArimAPI.Store(expr_0A, 2, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(featureList);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out featureSet);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllLexica()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(665);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearLexicon(HTuple lexiconHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(666);
			SZXCArimAPI.Store(expr_0A, 0, lexiconHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lexiconHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SuggestLexicon(HTuple lexiconHandle, HTuple word, out HTuple suggestion, out HTuple numCorrections)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(667);
			SZXCArimAPI.Store(expr_0A, 0, lexiconHandle);
			SZXCArimAPI.Store(expr_0A, 1, word);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lexiconHandle);
			SZXCArimAPI.UnpinTuple(word);
			num = HTuple.LoadNew(expr_0A, 0, num, out suggestion);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numCorrections);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void LookupLexicon(HTuple lexiconHandle, HTuple word, out HTuple found)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(668);
			SZXCArimAPI.Store(expr_0A, 0, lexiconHandle);
			SZXCArimAPI.Store(expr_0A, 1, word);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lexiconHandle);
			SZXCArimAPI.UnpinTuple(word);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out found);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InspectLexicon(HTuple lexiconHandle, out HTuple words)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(669);
			SZXCArimAPI.Store(expr_0A, 0, lexiconHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lexiconHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out words);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ImportLexicon(HTuple name, HTuple fileName, out HTuple lexiconHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(670);
			SZXCArimAPI.Store(expr_0A, 0, name);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(name);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out lexiconHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateLexicon(HTuple name, HTuple words, out HTuple lexiconHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(671);
			SZXCArimAPI.Store(expr_0A, 0, name);
			SZXCArimAPI.Store(expr_0A, 1, words);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(name);
			SZXCArimAPI.UnpinTuple(words);
			num = HTuple.LoadNew(expr_0A, 0, num, out lexiconHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllOcrClassSvm()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(672);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearOcrClassSvm(HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(673);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeOcrClassSvm(HTuple serializedItemHandle, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(674);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcrClassSvm(HTuple OCRHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(675);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrClassSvm(HTuple fileName, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(676);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteOcrClassSvm(HTuple OCRHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(677);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFeaturesOcrClassSvm(HObject character, HTuple OCRHandle, HTuple transform, out HTuple features)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(678);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, transform);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(transform);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
		}

		public static void DoOcrWordSvm(HObject character, HObject image, HTuple OCRHandle, HTuple expression, HTuple numAlternatives, HTuple numCorrections, out HTuple classVal, out HTuple word, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(679);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, expression);
			SZXCArimAPI.Store(expr_0A, 2, numAlternatives);
			SZXCArimAPI.Store(expr_0A, 3, numCorrections);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(expression);
			SZXCArimAPI.UnpinTuple(numAlternatives);
			SZXCArimAPI.UnpinTuple(numCorrections);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, num, out word);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrMultiClassSvm(HObject character, HObject image, HTuple OCRHandle, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(680);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrSingleClassSvm(HObject character, HObject image, HTuple OCRHandle, HTuple num, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(681);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, num2, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num2);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void ReduceOcrClassSvm(HTuple OCRHandle, HTuple method, HTuple minRemainingSV, HTuple maxError, out HTuple OCRHandleReduced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(682);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, minRemainingSV);
			SZXCArimAPI.Store(expr_0A, 3, maxError);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(minRemainingSV);
			SZXCArimAPI.UnpinTuple(maxError);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandleReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainfOcrClassSvmProtected(HTuple OCRHandle, HTuple trainingFile, HTuple password, HTuple epsilon, HTuple trainMode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(683);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, password);
			SZXCArimAPI.Store(expr_0A, 3, epsilon);
			SZXCArimAPI.Store(expr_0A, 4, trainMode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(trainMode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainfOcrClassSvm(HTuple OCRHandle, HTuple trainingFile, HTuple epsilon, HTuple trainMode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(684);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, epsilon);
			SZXCArimAPI.Store(expr_0A, 3, trainMode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(trainMode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetPrepInfoOcrClassSvm(HTuple OCRHandle, HTuple trainingFile, HTuple preprocessing, out HTuple informationCont, out HTuple cumInformationCont)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(685);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, preprocessing);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(preprocessing);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out informationCont);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cumInformationCont);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSupportVectorNumOcrClassSvm(HTuple OCRHandle, out HTuple numSupportVectors, out HTuple numSVPerSVM)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(686);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSupportVectors);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numSVPerSVM);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSupportVectorOcrClassSvm(HTuple OCRHandle, HTuple indexSupportVector, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(687);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSupportVector);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(indexSupportVector);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamsOcrClassSvm(HTuple OCRHandle, out HTuple widthCharacter, out HTuple heightCharacter, out HTuple interpolation, out HTuple features, out HTuple characters, out HTuple kernelType, out HTuple kernelParam, out HTuple nu, out HTuple mode, out HTuple preprocessing, out HTuple numComponents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(688);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			SZXCArimAPI.InitOCT(expr_0A, 10);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out widthCharacter);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out heightCharacter);
			num = HTuple.LoadNew(expr_0A, 2, num, out interpolation);
			num = HTuple.LoadNew(expr_0A, 3, num, out features);
			num = HTuple.LoadNew(expr_0A, 4, num, out characters);
			num = HTuple.LoadNew(expr_0A, 5, num, out kernelType);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out kernelParam);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out nu);
			num = HTuple.LoadNew(expr_0A, 8, num, out mode);
			num = HTuple.LoadNew(expr_0A, 9, num, out preprocessing);
			num = HTuple.LoadNew(expr_0A, 10, HTupleType.INTEGER, num, out numComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateOcrClassSvm(HTuple widthCharacter, HTuple heightCharacter, HTuple interpolation, HTuple features, HTuple characters, HTuple kernelType, HTuple kernelParam, HTuple nu, HTuple mode, HTuple preprocessing, HTuple numComponents, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(689);
			SZXCArimAPI.Store(expr_0A, 0, widthCharacter);
			SZXCArimAPI.Store(expr_0A, 1, heightCharacter);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.Store(expr_0A, 3, features);
			SZXCArimAPI.Store(expr_0A, 4, characters);
			SZXCArimAPI.Store(expr_0A, 5, kernelType);
			SZXCArimAPI.Store(expr_0A, 6, kernelParam);
			SZXCArimAPI.Store(expr_0A, 7, nu);
			SZXCArimAPI.Store(expr_0A, 8, mode);
			SZXCArimAPI.Store(expr_0A, 9, preprocessing);
			SZXCArimAPI.Store(expr_0A, 10, numComponents);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(widthCharacter);
			SZXCArimAPI.UnpinTuple(heightCharacter);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(characters);
			SZXCArimAPI.UnpinTuple(kernelType);
			SZXCArimAPI.UnpinTuple(kernelParam);
			SZXCArimAPI.UnpinTuple(nu);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(preprocessing);
			SZXCArimAPI.UnpinTuple(numComponents);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllOcrClassMlp()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(690);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearOcrClassMlp(HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(691);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeOcrClassMlp(HTuple serializedItemHandle, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(692);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcrClassMlp(HTuple OCRHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(693);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrClassMlp(HTuple fileName, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(694);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteOcrClassMlp(HTuple OCRHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(695);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFeaturesOcrClassMlp(HObject character, HTuple OCRHandle, HTuple transform, out HTuple features)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(696);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, transform);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(transform);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
		}

		public static void DoOcrWordMlp(HObject character, HObject image, HTuple OCRHandle, HTuple expression, HTuple numAlternatives, HTuple numCorrections, out HTuple classVal, out HTuple confidence, out HTuple word, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(697);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, expression);
			SZXCArimAPI.Store(expr_0A, 2, numAlternatives);
			SZXCArimAPI.Store(expr_0A, 3, numCorrections);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(expression);
			SZXCArimAPI.UnpinTuple(numAlternatives);
			SZXCArimAPI.UnpinTuple(numCorrections);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			num = HTuple.LoadNew(expr_0A, 2, num, out word);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrMultiClassMlp(HObject character, HObject image, HTuple OCRHandle, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(698);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrSingleClassMlp(HObject character, HObject image, HTuple OCRHandle, HTuple num, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(699);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, num2, out classVal);
			num2 = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num2, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num2);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void TrainfOcrClassMlpProtected(HTuple OCRHandle, HTuple trainingFile, HTuple password, HTuple maxIterations, HTuple weightTolerance, HTuple errorTolerance, out HTuple error, out HTuple errorLog)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(700);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, password);
			SZXCArimAPI.Store(expr_0A, 3, maxIterations);
			SZXCArimAPI.Store(expr_0A, 4, weightTolerance);
			SZXCArimAPI.Store(expr_0A, 5, errorTolerance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			SZXCArimAPI.UnpinTuple(maxIterations);
			SZXCArimAPI.UnpinTuple(weightTolerance);
			SZXCArimAPI.UnpinTuple(errorTolerance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out errorLog);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainfOcrClassMlp(HTuple OCRHandle, HTuple trainingFile, HTuple maxIterations, HTuple weightTolerance, HTuple errorTolerance, out HTuple error, out HTuple errorLog)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(701);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, maxIterations);
			SZXCArimAPI.Store(expr_0A, 3, weightTolerance);
			SZXCArimAPI.Store(expr_0A, 4, errorTolerance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(maxIterations);
			SZXCArimAPI.UnpinTuple(weightTolerance);
			SZXCArimAPI.UnpinTuple(errorTolerance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out errorLog);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPrepInfoOcrClassMlp(HTuple OCRHandle, HTuple trainingFile, HTuple preprocessing, out HTuple informationCont, out HTuple cumInformationCont)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(702);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.Store(expr_0A, 2, preprocessing);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(preprocessing);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out informationCont);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cumInformationCont);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetRejectionParamsOcrClassMlp(HTuple OCRHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(703);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetRejectionParamsOcrClassMlp(HTuple OCRHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(704);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetRegularizationParamsOcrClassMlp(HTuple OCRHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(705);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetRegularizationParamsOcrClassMlp(HTuple OCRHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(706);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetParamsOcrClassMlp(HTuple OCRHandle, out HTuple widthCharacter, out HTuple heightCharacter, out HTuple interpolation, out HTuple features, out HTuple characters, out HTuple numHidden, out HTuple preprocessing, out HTuple numComponents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(707);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out widthCharacter);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out heightCharacter);
			num = HTuple.LoadNew(expr_0A, 2, num, out interpolation);
			num = HTuple.LoadNew(expr_0A, 3, num, out features);
			num = HTuple.LoadNew(expr_0A, 4, num, out characters);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out numHidden);
			num = HTuple.LoadNew(expr_0A, 6, num, out preprocessing);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out numComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateOcrClassMlp(HTuple widthCharacter, HTuple heightCharacter, HTuple interpolation, HTuple features, HTuple characters, HTuple numHidden, HTuple preprocessing, HTuple numComponents, HTuple randSeed, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(708);
			SZXCArimAPI.Store(expr_0A, 0, widthCharacter);
			SZXCArimAPI.Store(expr_0A, 1, heightCharacter);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.Store(expr_0A, 3, features);
			SZXCArimAPI.Store(expr_0A, 4, characters);
			SZXCArimAPI.Store(expr_0A, 5, numHidden);
			SZXCArimAPI.Store(expr_0A, 6, preprocessing);
			SZXCArimAPI.Store(expr_0A, 7, numComponents);
			SZXCArimAPI.Store(expr_0A, 8, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(widthCharacter);
			SZXCArimAPI.UnpinTuple(heightCharacter);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(characters);
			SZXCArimAPI.UnpinTuple(numHidden);
			SZXCArimAPI.UnpinTuple(preprocessing);
			SZXCArimAPI.UnpinTuple(numComponents);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcr(HTuple ocrHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(709);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeOcr(HTuple serializedItemHandle, out HTuple ocrHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(710);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out ocrHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteOcr(HTuple ocrHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(711);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadOcr(HTuple fileName, out HTuple ocrHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(712);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out ocrHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DoOcrSingle(HObject character, HObject image, HTuple ocrHandle, out HTuple classes, out HTuple confidences)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(713);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classes);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidences);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrMulti(HObject character, HObject image, HTuple ocrHandle, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(714);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void InfoOcrClassBox(HTuple ocrHandle, out HTuple widthPattern, out HTuple heightPattern, out HTuple interpolation, out HTuple widthMaxChar, out HTuple heightMaxChar, out HTuple features, out HTuple characters)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(715);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out widthPattern);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out heightPattern);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out interpolation);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out widthMaxChar);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out heightMaxChar);
			num = HTuple.LoadNew(expr_0A, 5, num, out features);
			num = HTuple.LoadNew(expr_0A, 6, num, out characters);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateOcrClassBox(HTuple widthPattern, HTuple heightPattern, HTuple interpolation, HTuple features, HTuple character, out HTuple ocrHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(716);
			SZXCArimAPI.Store(expr_0A, 0, widthPattern);
			SZXCArimAPI.Store(expr_0A, 1, heightPattern);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.Store(expr_0A, 3, features);
			SZXCArimAPI.Store(expr_0A, 4, character);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(widthPattern);
			SZXCArimAPI.UnpinTuple(heightPattern);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(character);
			num = HTuple.LoadNew(expr_0A, 0, num, out ocrHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TraindOcrClassBox(HObject character, HObject image, HTuple ocrHandle, HTuple classVal, out HTuple avgConfidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(717);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.Store(expr_0A, 1, classVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.UnpinTuple(classVal);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out avgConfidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void TrainfOcrClassBox(HTuple ocrHandle, HTuple trainingFile, out HTuple avgConfidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(718);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.UnpinTuple(trainingFile);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out avgConfidence);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProtectOcrTrainf(HTuple trainingFile, HTuple password, HTuple trainingFileProtected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(719);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, password);
			SZXCArimAPI.Store(expr_0A, 2, trainingFileProtected);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			SZXCArimAPI.UnpinTuple(trainingFileProtected);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteOcrTrainf(HObject character, HObject image, HTuple classVal, HTuple trainingFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(720);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, classVal);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void OcrChangeChar(HTuple ocrHandle, HTuple character)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(721);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.Store(expr_0A, 1, character);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.UnpinTuple(character);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseOcr(HTuple ocrHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(722);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SortRegion(HObject regions, out HObject sortedRegions, HTuple sortMode, HTuple order, HTuple rowOrCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(723);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, sortMode);
			SZXCArimAPI.Store(expr_0A, 1, order);
			SZXCArimAPI.Store(expr_0A, 2, rowOrCol);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sortMode);
			SZXCArimAPI.UnpinTuple(order);
			SZXCArimAPI.UnpinTuple(rowOrCol);
			num = HObject.LoadNew(expr_0A, 1, num, out sortedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void CloseAllOcrs()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(724);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TestdOcrClassBox(HObject character, HObject image, HTuple ocrHandle, HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(725);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.Store(expr_0A, 1, classVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			SZXCArimAPI.UnpinTuple(classVal);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void CropDomainRel(HObject image, out HObject imagePart, HTuple top, HTuple left, HTuple bottom, HTuple right)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(726);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, top);
			SZXCArimAPI.Store(expr_0A, 1, left);
			SZXCArimAPI.Store(expr_0A, 2, bottom);
			SZXCArimAPI.Store(expr_0A, 3, right);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(top);
			SZXCArimAPI.UnpinTuple(left);
			SZXCArimAPI.UnpinTuple(bottom);
			SZXCArimAPI.UnpinTuple(right);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePart);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void OcrGetFeatures(HObject character, HTuple ocrHandle, out HTuple featureVector)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(727);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 0, ocrHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ocrHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out featureVector);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
		}

		public static void ConcatOcrTrainf(HTuple singleFiles, HTuple composedFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(728);
			SZXCArimAPI.Store(expr_0A, 0, singleFiles);
			SZXCArimAPI.Store(expr_0A, 1, composedFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(singleFiles);
			SZXCArimAPI.UnpinTuple(composedFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteOcrTrainfImage(HObject character, HTuple classVal, HTuple trainingFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(729);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 0, classVal);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(character);
		}

		public static void AppendOcrTrainf(HObject character, HObject image, HTuple classVal, HTuple trainingFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(730);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, classVal);
			SZXCArimAPI.Store(expr_0A, 1, trainingFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void ReadOcrTrainfNamesProtected(HTuple trainingFile, HTuple password, out HTuple characterNames, out HTuple characterCount)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(731);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, password);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(password);
			num = HTuple.LoadNew(expr_0A, 0, num, out characterNames);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out characterCount);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrTrainfNames(HTuple trainingFile, out HTuple characterNames, out HTuple characterCount)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(732);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			num = HTuple.LoadNew(expr_0A, 0, num, out characterNames);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out characterCount);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrTrainfSelect(out HObject characters, HTuple trainingFile, HTuple searchNames, out HTuple foundNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(733);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.Store(expr_0A, 1, searchNames);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			SZXCArimAPI.UnpinTuple(searchNames);
			num = HObject.LoadNew(expr_0A, 1, num, out characters);
			num = HTuple.LoadNew(expr_0A, 0, num, out foundNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrTrainf(out HObject characters, HTuple trainingFile, out HTuple characterNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(734);
			SZXCArimAPI.Store(expr_0A, 0, trainingFile);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(trainingFile);
			num = HObject.LoadNew(expr_0A, 1, num, out characters);
			num = HTuple.LoadNew(expr_0A, 0, num, out characterNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void Pruning(HObject region, out HObject regionPrune, HTuple length)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(735);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, length);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(length);
			num = HObject.LoadNew(expr_0A, 1, num, out regionPrune);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Boundary(HObject region, out HObject regionBorder, HTuple boundaryType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(736);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, boundaryType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(boundaryType);
			num = HObject.LoadNew(expr_0A, 1, num, out regionBorder);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Fitting(HObject region, HObject structElements, out HObject regionFitted)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(737);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElements);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionFitted);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElements);
		}

		public static void GenStructElements(out HObject structElements, HTuple type, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(738);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out structElements);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TransposeRegion(HObject region, out HObject transposed, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(739);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out transposed);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ThinningSeq(HObject region, out HObject regionThin, HTuple golayElement, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(740);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ThinningGolay(HObject region, out HObject regionThin, HTuple golayElement, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(741);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Thinning(HObject region, HObject structElement1, HObject structElement2, out HObject regionThin, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(742);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement1);
			SZXCArimAPI.Store(expr_0A, 3, structElement2);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement1);
			GC.KeepAlive(structElement2);
		}

		public static void ThickeningSeq(HObject region, out HObject regionThick, HTuple golayElement, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(743);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThick);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ThickeningGolay(HObject region, out HObject regionThick, HTuple golayElement, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(744);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThick);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Thickening(HObject region, HObject structElement1, HObject structElement2, out HObject regionThick, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(745);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement1);
			SZXCArimAPI.Store(expr_0A, 3, structElement2);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionThick);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement1);
			GC.KeepAlive(structElement2);
		}

		public static void HitOrMissSeq(HObject region, out HObject regionHitMiss, HTuple golayElement)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(746);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			num = HObject.LoadNew(expr_0A, 1, num, out regionHitMiss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void HitOrMissGolay(HObject region, out HObject regionHitMiss, HTuple golayElement, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(747);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionHitMiss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void HitOrMiss(HObject region, HObject structElement1, HObject structElement2, out HObject regionHitMiss, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(748);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement1);
			SZXCArimAPI.Store(expr_0A, 3, structElement2);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out regionHitMiss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement1);
			GC.KeepAlive(structElement2);
		}

		public static void GolayElements(out HObject structElement1, out HObject structElement2, HTuple golayElement, HTuple rotation, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(749);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out structElement1);
			num = HObject.LoadNew(expr_0A, 2, num, out structElement2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MorphSkiz(HObject region, out HObject regionSkiz, HTuple iterations1, HTuple iterations2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(750);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, iterations1);
			SZXCArimAPI.Store(expr_0A, 1, iterations2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations1);
			SZXCArimAPI.UnpinTuple(iterations2);
			num = HObject.LoadNew(expr_0A, 1, num, out regionSkiz);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void MorphSkeleton(HObject region, out HObject regionSkeleton)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(751);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionSkeleton);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void MorphHat(HObject region, HObject structElement, out HObject regionMorphHat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(752);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMorphHat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void BottomHat(HObject region, HObject structElement, out HObject regionBottomHat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(753);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionBottomHat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void TopHat(HObject region, HObject structElement, out HObject regionTopHat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(754);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionTopHat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void MinkowskiSub2(HObject region, HObject structElement, out HObject regionMinkSub, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(755);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMinkSub);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void MinkowskiSub1(HObject region, HObject structElement, out HObject regionMinkSub, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(756);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMinkSub);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void MinkowskiAdd2(HObject region, HObject structElement, out HObject regionMinkAdd, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(757);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMinkAdd);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void MinkowskiAdd1(HObject region, HObject structElement, out HObject regionMinkAdd, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(758);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionMinkAdd);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void ClosingRectangle1(HObject region, out HObject regionClosing, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(759);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ClosingGolay(HObject region, out HObject regionClosing, HTuple golayElement, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(760);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ClosingCircle(HObject region, out HObject regionClosing, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(761);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Closing(HObject region, HObject structElement, out HObject regionClosing)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(762);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void OpeningSeg(HObject region, HObject structElement, out HObject regionOpening)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(763);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void OpeningGolay(HObject region, out HObject regionOpening, HTuple golayElement, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(764);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void OpeningRectangle1(HObject region, out HObject regionOpening, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(765);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void OpeningCircle(HObject region, out HObject regionOpening, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(766);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Opening(HObject region, HObject structElement, out HObject regionOpening)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(767);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void ErosionSeq(HObject region, out HObject regionErosion, HTuple golayElement, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(768);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ErosionGolay(HObject region, out HObject regionErosion, HTuple golayElement, HTuple iterations, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(769);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.Store(expr_0A, 2, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ErosionRectangle1(HObject region, out HObject regionErosion, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(770);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ErosionCircle(HObject region, out HObject regionErosion, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(771);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Erosion2(HObject region, HObject structElement, out HObject regionErosion, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(772);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void Erosion1(HObject region, HObject structElement, out HObject regionErosion, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(773);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void DilationSeq(HObject region, out HObject regionDilation, HTuple golayElement, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(774);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DilationGolay(HObject region, out HObject regionDilation, HTuple golayElement, HTuple iterations, HTuple rotation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(775);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, golayElement);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.Store(expr_0A, 2, rotation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(golayElement);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(rotation);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DilationRectangle1(HObject region, out HObject regionDilation, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(776);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DilationCircle(HObject region, out HObject regionDilation, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(777);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Dilation2(HObject region, HObject structElement, out HObject regionDilation, HTuple row, HTuple column, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(778);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void Dilation1(HObject region, HObject structElement, out HObject regionDilation, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(779);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, structElement);
			SZXCArimAPI.Store(expr_0A, 0, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out regionDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(structElement);
		}

		public static void GrayBothat(HObject image, HObject SE, out HObject imageBotHat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(780);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageBotHat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void GrayTophat(HObject image, HObject SE, out HObject imageTopHat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(781);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageTopHat);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void GrayClosing(HObject image, HObject SE, out HObject imageClosing)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(782);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void GrayOpening(HObject image, HObject SE, out HObject imageOpening)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(783);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void GrayDilation(HObject image, HObject SE, out HObject imageDilation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(784);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageDilation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void GrayErosion(HObject image, HObject SE, out HObject imageErosion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(785);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, SE);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageErosion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(SE);
		}

		public static void ReadGraySe(out HObject SE, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(786);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_0A, 1, num, out SE);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenDiscSe(out HObject SE, HTuple type, HTuple width, HTuple height, HTuple smax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(787);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, smax);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(smax);
			num = HObject.LoadNew(expr_0A, 1, num, out SE);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectModelContour(out HObject contour, HTuple metrologyHandle, HTuple index, HTuple resolution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(788);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, resolution);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(resolution);
			num = HObject.LoadNew(expr_0A, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectResultContour(out HObject contour, HTuple metrologyHandle, HTuple index, HTuple instance, HTuple resolution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(789);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, instance);
			SZXCArimAPI.Store(expr_0A, 3, resolution);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(instance);
			SZXCArimAPI.UnpinTuple(resolution);
			num = HObject.LoadNew(expr_0A, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AlignMetrologyModel(HTuple metrologyHandle, HTuple row, HTuple column, HTuple angle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(790);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, angle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddMetrologyObjectGeneric(HTuple metrologyHandle, HTuple shape, HTuple shapeParam, HTuple measureLength1, HTuple measureLength2, HTuple measureSigma, HTuple measureThreshold, HTuple genParamName, HTuple genParamValue, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(791);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, shape);
			SZXCArimAPI.Store(expr_0A, 2, shapeParam);
			SZXCArimAPI.Store(expr_0A, 3, measureLength1);
			SZXCArimAPI.Store(expr_0A, 4, measureLength2);
			SZXCArimAPI.Store(expr_0A, 5, measureSigma);
			SZXCArimAPI.Store(expr_0A, 6, measureThreshold);
			SZXCArimAPI.Store(expr_0A, 7, genParamName);
			SZXCArimAPI.Store(expr_0A, 8, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(shape);
			SZXCArimAPI.UnpinTuple(shapeParam);
			SZXCArimAPI.UnpinTuple(measureLength1);
			SZXCArimAPI.UnpinTuple(measureLength2);
			SZXCArimAPI.UnpinTuple(measureSigma);
			SZXCArimAPI.UnpinTuple(measureThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyModelParam(HTuple metrologyHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(792);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMetrologyModelParam(HTuple metrologyHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(793);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeMetrologyModel(HTuple serializedItemHandle, out HTuple metrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(794);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out metrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeMetrologyModel(HTuple metrologyHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(795);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TransformMetrologyObject(HTuple metrologyHandle, HTuple index, HTuple row, HTuple column, HTuple phi, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(796);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.Store(expr_0A, 4, phi);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteMetrologyModel(HTuple metrologyHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(797);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadMetrologyModel(HTuple fileName, out HTuple metrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(798);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out metrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CopyMetrologyModel(HTuple metrologyHandle, HTuple index, out HTuple copiedMetrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(799);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out copiedMetrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CopyMetrologyObject(HTuple metrologyHandle, HTuple index, out HTuple copiedIndices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(800);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out copiedIndices);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectNumInstances(HTuple metrologyHandle, HTuple index, out HTuple numInstances)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(801);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, num, out numInstances);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectResult(HTuple metrologyHandle, HTuple index, HTuple instance, HTuple genParamName, HTuple genParamValue, out HTuple parameter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(802);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, instance);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(instance);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out parameter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectMeasures(out HObject contours, HTuple metrologyHandle, HTuple index, HTuple transition, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(803);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, transition);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(transition);
			num = HObject.LoadNew(expr_0A, 1, num, out contours);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ApplyMetrologyModel(HObject image, HTuple metrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(804);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void GetMetrologyObjectIndices(HTuple metrologyHandle, out HTuple indices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(805);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out indices);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ResetMetrologyObjectFuzzyParam(HTuple metrologyHandle, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(806);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ResetMetrologyObjectParam(HTuple metrologyHandle, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(807);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetMetrologyObjectFuzzyParam(HTuple metrologyHandle, HTuple index, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(808);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMetrologyObjectParam(HTuple metrologyHandle, HTuple index, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(809);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetMetrologyObjectFuzzyParam(HTuple metrologyHandle, HTuple index, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(810);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetMetrologyObjectParam(HTuple metrologyHandle, HTuple index, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(811);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddMetrologyObjectRectangle2Measure(HTuple metrologyHandle, HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2, HTuple measureLength1, HTuple measureLength2, HTuple measureSigma, HTuple measureThreshold, HTuple genParamName, HTuple genParamValue, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(812);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, length1);
			SZXCArimAPI.Store(expr_0A, 5, length2);
			SZXCArimAPI.Store(expr_0A, 6, measureLength1);
			SZXCArimAPI.Store(expr_0A, 7, measureLength2);
			SZXCArimAPI.Store(expr_0A, 8, measureSigma);
			SZXCArimAPI.Store(expr_0A, 9, measureThreshold);
			SZXCArimAPI.Store(expr_0A, 10, genParamName);
			SZXCArimAPI.Store(expr_0A, 11, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			SZXCArimAPI.UnpinTuple(measureLength1);
			SZXCArimAPI.UnpinTuple(measureLength2);
			SZXCArimAPI.UnpinTuple(measureSigma);
			SZXCArimAPI.UnpinTuple(measureThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddMetrologyObjectLineMeasure(HTuple metrologyHandle, HTuple rowBegin, HTuple columnBegin, HTuple rowEnd, HTuple columnEnd, HTuple measureLength1, HTuple measureLength2, HTuple measureSigma, HTuple measureThreshold, HTuple genParamName, HTuple genParamValue, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(813);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowBegin);
			SZXCArimAPI.Store(expr_0A, 2, columnBegin);
			SZXCArimAPI.Store(expr_0A, 3, rowEnd);
			SZXCArimAPI.Store(expr_0A, 4, columnEnd);
			SZXCArimAPI.Store(expr_0A, 5, measureLength1);
			SZXCArimAPI.Store(expr_0A, 6, measureLength2);
			SZXCArimAPI.Store(expr_0A, 7, measureSigma);
			SZXCArimAPI.Store(expr_0A, 8, measureThreshold);
			SZXCArimAPI.Store(expr_0A, 9, genParamName);
			SZXCArimAPI.Store(expr_0A, 10, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(rowBegin);
			SZXCArimAPI.UnpinTuple(columnBegin);
			SZXCArimAPI.UnpinTuple(rowEnd);
			SZXCArimAPI.UnpinTuple(columnEnd);
			SZXCArimAPI.UnpinTuple(measureLength1);
			SZXCArimAPI.UnpinTuple(measureLength2);
			SZXCArimAPI.UnpinTuple(measureSigma);
			SZXCArimAPI.UnpinTuple(measureThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddMetrologyObjectEllipseMeasure(HTuple metrologyHandle, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, HTuple measureLength1, HTuple measureLength2, HTuple measureSigma, HTuple measureThreshold, HTuple genParamName, HTuple genParamValue, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(814);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, radius1);
			SZXCArimAPI.Store(expr_0A, 5, radius2);
			SZXCArimAPI.Store(expr_0A, 6, measureLength1);
			SZXCArimAPI.Store(expr_0A, 7, measureLength2);
			SZXCArimAPI.Store(expr_0A, 8, measureSigma);
			SZXCArimAPI.Store(expr_0A, 9, measureThreshold);
			SZXCArimAPI.Store(expr_0A, 10, genParamName);
			SZXCArimAPI.Store(expr_0A, 11, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			SZXCArimAPI.UnpinTuple(measureLength1);
			SZXCArimAPI.UnpinTuple(measureLength2);
			SZXCArimAPI.UnpinTuple(measureSigma);
			SZXCArimAPI.UnpinTuple(measureThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddMetrologyObjectCircleMeasure(HTuple metrologyHandle, HTuple row, HTuple column, HTuple radius, HTuple measureLength1, HTuple measureLength2, HTuple measureSigma, HTuple measureThreshold, HTuple genParamName, HTuple genParamValue, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(815);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, radius);
			SZXCArimAPI.Store(expr_0A, 4, measureLength1);
			SZXCArimAPI.Store(expr_0A, 5, measureLength2);
			SZXCArimAPI.Store(expr_0A, 6, measureSigma);
			SZXCArimAPI.Store(expr_0A, 7, measureThreshold);
			SZXCArimAPI.Store(expr_0A, 8, genParamName);
			SZXCArimAPI.Store(expr_0A, 9, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(measureLength1);
			SZXCArimAPI.UnpinTuple(measureLength2);
			SZXCArimAPI.UnpinTuple(measureSigma);
			SZXCArimAPI.UnpinTuple(measureThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllMetrologyModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(816);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMetrologyModel(HTuple metrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(817);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMetrologyObject(HTuple metrologyHandle, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(818);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetMetrologyModelImageSize(HTuple metrologyHandle, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(819);
			SZXCArimAPI.Store(expr_0A, 0, metrologyHandle);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(metrologyHandle);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateMetrologyModel(out HTuple metrologyHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(820);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out metrologyHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeMeasure(HTuple measureHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(821);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeMeasure(HTuple serializedItemHandle, out HTuple measureHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(822);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out measureHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteMeasure(HTuple measureHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(823);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadMeasure(HTuple fileName, out HTuple measureHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(824);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out measureHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MeasureThresh(HObject image, HTuple measureHandle, HTuple sigma, HTuple threshold, HTuple select, out HTuple rowThresh, out HTuple columnThresh, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(825);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.Store(expr_0A, 3, select);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(select);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowThresh);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnThresh);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CloseAllMeasures()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(826);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseMeasure(HTuple measureHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(827);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void MeasureProjection(HObject image, HTuple measureHandle, out HTuple grayValues)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(828);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out grayValues);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ResetFuzzyMeasure(HTuple measureHandle, HTuple setType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(829);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, setType);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(setType);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetFuzzyMeasureNormPair(HTuple measureHandle, HTuple pairSize, HTuple setType, HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(830);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, pairSize);
			SZXCArimAPI.Store(expr_0A, 2, setType);
			SZXCArimAPI.Store(expr_0A, 3, function);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(pairSize);
			SZXCArimAPI.UnpinTuple(setType);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetFuzzyMeasure(HTuple measureHandle, HTuple setType, HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(831);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, setType);
			SZXCArimAPI.Store(expr_0A, 2, function);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(setType);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FuzzyMeasurePairing(HObject image, HTuple measureHandle, HTuple sigma, HTuple ampThresh, HTuple fuzzyThresh, HTuple transition, HTuple pairing, HTuple numPairs, out HTuple rowEdgeFirst, out HTuple columnEdgeFirst, out HTuple amplitudeFirst, out HTuple rowEdgeSecond, out HTuple columnEdgeSecond, out HTuple amplitudeSecond, out HTuple rowPairCenter, out HTuple columnPairCenter, out HTuple fuzzyScore, out HTuple intraDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(832);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, ampThresh);
			SZXCArimAPI.Store(expr_0A, 3, fuzzyThresh);
			SZXCArimAPI.Store(expr_0A, 4, transition);
			SZXCArimAPI.Store(expr_0A, 5, pairing);
			SZXCArimAPI.Store(expr_0A, 6, numPairs);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(ampThresh);
			SZXCArimAPI.UnpinTuple(fuzzyThresh);
			SZXCArimAPI.UnpinTuple(transition);
			SZXCArimAPI.UnpinTuple(pairing);
			SZXCArimAPI.UnpinTuple(numPairs);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out amplitudeFirst);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rowEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out columnEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out amplitudeSecond);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out rowPairCenter);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out columnPairCenter);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.DOUBLE, num, out fuzzyScore);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.DOUBLE, num, out intraDistance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FuzzyMeasurePairs(HObject image, HTuple measureHandle, HTuple sigma, HTuple ampThresh, HTuple fuzzyThresh, HTuple transition, out HTuple rowEdgeFirst, out HTuple columnEdgeFirst, out HTuple amplitudeFirst, out HTuple rowEdgeSecond, out HTuple columnEdgeSecond, out HTuple amplitudeSecond, out HTuple rowEdgeCenter, out HTuple columnEdgeCenter, out HTuple fuzzyScore, out HTuple intraDistance, out HTuple interDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(833);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, ampThresh);
			SZXCArimAPI.Store(expr_0A, 3, fuzzyThresh);
			SZXCArimAPI.Store(expr_0A, 4, transition);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			SZXCArimAPI.InitOCT(expr_0A, 10);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(ampThresh);
			SZXCArimAPI.UnpinTuple(fuzzyThresh);
			SZXCArimAPI.UnpinTuple(transition);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out amplitudeFirst);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rowEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out columnEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out amplitudeSecond);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out rowEdgeCenter);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out columnEdgeCenter);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.DOUBLE, num, out fuzzyScore);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.DOUBLE, num, out intraDistance);
			num = HTuple.LoadNew(expr_0A, 10, HTupleType.DOUBLE, num, out interDistance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FuzzyMeasurePos(HObject image, HTuple measureHandle, HTuple sigma, HTuple ampThresh, HTuple fuzzyThresh, HTuple transition, out HTuple rowEdge, out HTuple columnEdge, out HTuple amplitude, out HTuple fuzzyScore, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(834);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, ampThresh);
			SZXCArimAPI.Store(expr_0A, 3, fuzzyThresh);
			SZXCArimAPI.Store(expr_0A, 4, transition);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(ampThresh);
			SZXCArimAPI.UnpinTuple(fuzzyThresh);
			SZXCArimAPI.UnpinTuple(transition);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowEdge);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnEdge);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out amplitude);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out fuzzyScore);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeasurePairs(HObject image, HTuple measureHandle, HTuple sigma, HTuple threshold, HTuple transition, HTuple select, out HTuple rowEdgeFirst, out HTuple columnEdgeFirst, out HTuple amplitudeFirst, out HTuple rowEdgeSecond, out HTuple columnEdgeSecond, out HTuple amplitudeSecond, out HTuple intraDistance, out HTuple interDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(835);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.Store(expr_0A, 3, transition);
			SZXCArimAPI.Store(expr_0A, 4, select);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(transition);
			SZXCArimAPI.UnpinTuple(select);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnEdgeFirst);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out amplitudeFirst);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rowEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out columnEdgeSecond);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out amplitudeSecond);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out intraDistance);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out interDistance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeasurePos(HObject image, HTuple measureHandle, HTuple sigma, HTuple threshold, HTuple transition, HTuple select, out HTuple rowEdge, out HTuple columnEdge, out HTuple amplitude, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(836);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.Store(expr_0A, 3, transition);
			SZXCArimAPI.Store(expr_0A, 4, select);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(transition);
			SZXCArimAPI.UnpinTuple(select);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowEdge);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnEdge);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out amplitude);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void TranslateMeasure(HTuple measureHandle, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(837);
			SZXCArimAPI.Store(expr_0A, 0, measureHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(measureHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GenMeasureArc(HTuple centerRow, HTuple centerCol, HTuple radius, HTuple angleStart, HTuple angleExtent, HTuple annulusRadius, HTuple width, HTuple height, HTuple interpolation, out HTuple measureHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(838);
			SZXCArimAPI.Store(expr_0A, 0, centerRow);
			SZXCArimAPI.Store(expr_0A, 1, centerCol);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.Store(expr_0A, 3, angleStart);
			SZXCArimAPI.Store(expr_0A, 4, angleExtent);
			SZXCArimAPI.Store(expr_0A, 5, annulusRadius);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.Store(expr_0A, 8, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(annulusRadius);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HTuple.LoadNew(expr_0A, 0, num, out measureHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenMeasureRectangle2(HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2, HTuple width, HTuple height, HTuple interpolation, out HTuple measureHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(839);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, length1);
			SZXCArimAPI.Store(expr_0A, 4, length2);
			SZXCArimAPI.Store(expr_0A, 5, width);
			SZXCArimAPI.Store(expr_0A, 6, height);
			SZXCArimAPI.Store(expr_0A, 7, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HTuple.LoadNew(expr_0A, 0, num, out measureHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeMatrix(HTuple serializedItemHandle, out HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(840);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeMatrix(HTuple matrixID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(841);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadMatrix(HTuple fileName, out HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(842);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteMatrix(HTuple matrixID, HTuple fileFormat, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(843);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, fileFormat);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(fileFormat);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OrthogonalDecomposeMatrix(HTuple matrixID, HTuple decompositionType, HTuple outputMatricesType, HTuple computeOrthogonal, out HTuple matrixOrthogonalID, out HTuple matrixTriangularID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(844);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, decompositionType);
			SZXCArimAPI.Store(expr_0A, 2, outputMatricesType);
			SZXCArimAPI.Store(expr_0A, 3, computeOrthogonal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(decompositionType);
			SZXCArimAPI.UnpinTuple(outputMatricesType);
			SZXCArimAPI.UnpinTuple(computeOrthogonal);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixOrthogonalID);
			num = HTuple.LoadNew(expr_0A, 1, num, out matrixTriangularID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DecomposeMatrix(HTuple matrixID, HTuple matrixType, out HTuple matrix1ID, out HTuple matrix2ID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(845);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrix1ID);
			num = HTuple.LoadNew(expr_0A, 1, num, out matrix2ID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SvdMatrix(HTuple matrixID, HTuple SVDType, HTuple computeSingularVectors, out HTuple matrixUID, out HTuple matrixSID, out HTuple matrixVID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(846);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, SVDType);
			SZXCArimAPI.Store(expr_0A, 2, computeSingularVectors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(SVDType);
			SZXCArimAPI.UnpinTuple(computeSingularVectors);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixUID);
			num = HTuple.LoadNew(expr_0A, 1, num, out matrixSID);
			num = HTuple.LoadNew(expr_0A, 2, num, out matrixVID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GeneralizedEigenvaluesGeneralMatrix(HTuple matrixAID, HTuple matrixBID, HTuple computeEigenvectors, out HTuple eigenvaluesRealID, out HTuple eigenvaluesImagID, out HTuple eigenvectorsRealID, out HTuple eigenvectorsImagID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(847);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.Store(expr_0A, 2, computeEigenvectors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.UnpinTuple(computeEigenvectors);
			num = HTuple.LoadNew(expr_0A, 0, num, out eigenvaluesRealID);
			num = HTuple.LoadNew(expr_0A, 1, num, out eigenvaluesImagID);
			num = HTuple.LoadNew(expr_0A, 2, num, out eigenvectorsRealID);
			num = HTuple.LoadNew(expr_0A, 3, num, out eigenvectorsImagID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GeneralizedEigenvaluesSymmetricMatrix(HTuple matrixAID, HTuple matrixBID, HTuple computeEigenvectors, out HTuple eigenvaluesID, out HTuple eigenvectorsID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(848);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.Store(expr_0A, 2, computeEigenvectors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.UnpinTuple(computeEigenvectors);
			num = HTuple.LoadNew(expr_0A, 0, num, out eigenvaluesID);
			num = HTuple.LoadNew(expr_0A, 1, num, out eigenvectorsID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EigenvaluesGeneralMatrix(HTuple matrixID, HTuple computeEigenvectors, out HTuple eigenvaluesRealID, out HTuple eigenvaluesImagID, out HTuple eigenvectorsRealID, out HTuple eigenvectorsImagID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(849);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, computeEigenvectors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(computeEigenvectors);
			num = HTuple.LoadNew(expr_0A, 0, num, out eigenvaluesRealID);
			num = HTuple.LoadNew(expr_0A, 1, num, out eigenvaluesImagID);
			num = HTuple.LoadNew(expr_0A, 2, num, out eigenvectorsRealID);
			num = HTuple.LoadNew(expr_0A, 3, num, out eigenvectorsImagID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EigenvaluesSymmetricMatrix(HTuple matrixID, HTuple computeEigenvectors, out HTuple eigenvaluesID, out HTuple eigenvectorsID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(850);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, computeEigenvectors);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(computeEigenvectors);
			num = HTuple.LoadNew(expr_0A, 0, num, out eigenvaluesID);
			num = HTuple.LoadNew(expr_0A, 1, num, out eigenvectorsID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SolveMatrix(HTuple matrixLHSID, HTuple matrixLHSType, HTuple epsilon, HTuple matrixRHSID, out HTuple matrixResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(851);
			SZXCArimAPI.Store(expr_0A, 0, matrixLHSID);
			SZXCArimAPI.Store(expr_0A, 1, matrixLHSType);
			SZXCArimAPI.Store(expr_0A, 2, epsilon);
			SZXCArimAPI.Store(expr_0A, 3, matrixRHSID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixLHSID);
			SZXCArimAPI.UnpinTuple(matrixLHSType);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(matrixRHSID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeterminantMatrix(HTuple matrixID, HTuple matrixType, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(852);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InvertMatrixMod(HTuple matrixID, HTuple matrixType, HTuple epsilon)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(853);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.Store(expr_0A, 2, epsilon);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void InvertMatrix(HTuple matrixID, HTuple matrixType, HTuple epsilon, out HTuple matrixInvID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(854);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.Store(expr_0A, 2, epsilon);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			SZXCArimAPI.UnpinTuple(epsilon);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixInvID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TransposeMatrixMod(HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(855);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TransposeMatrix(HTuple matrixID, out HTuple matrixTransposedID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(856);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixTransposedID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MaxMatrix(HTuple matrixID, HTuple maxType, out HTuple matrixMaxID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(857);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, maxType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(maxType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixMaxID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MinMatrix(HTuple matrixID, HTuple minType, out HTuple matrixMinID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(858);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, minType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(minType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixMinID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PowMatrixMod(HTuple matrixID, HTuple matrixType, HTuple power)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(859);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.Store(expr_0A, 2, power);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			SZXCArimAPI.UnpinTuple(power);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void PowMatrix(HTuple matrixID, HTuple matrixType, HTuple power, out HTuple matrixPowID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(860);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixType);
			SZXCArimAPI.Store(expr_0A, 2, power);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixType);
			SZXCArimAPI.UnpinTuple(power);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixPowID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PowElementMatrixMod(HTuple matrixID, HTuple matrixExpID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(861);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixExpID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixExpID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void PowElementMatrix(HTuple matrixID, HTuple matrixExpID, out HTuple matrixPowID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(862);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixExpID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixExpID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixPowID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PowScalarElementMatrixMod(HTuple matrixID, HTuple power)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(863);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, power);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(power);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void PowScalarElementMatrix(HTuple matrixID, HTuple power, out HTuple matrixPowID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(864);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, power);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(power);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixPowID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SqrtMatrixMod(HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(865);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SqrtMatrix(HTuple matrixID, out HTuple matrixSqrtID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(866);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixSqrtID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AbsMatrixMod(HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(867);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AbsMatrix(HTuple matrixID, out HTuple matrixAbsID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(868);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixAbsID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void NormMatrix(HTuple matrixID, HTuple normType, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(869);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, normType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(normType);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MeanMatrix(HTuple matrixID, HTuple meanType, out HTuple matrixMeanID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(870);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, meanType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(meanType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixMeanID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SumMatrix(HTuple matrixID, HTuple sumType, out HTuple matrixSumID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(871);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, sumType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(sumType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixSumID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DivElementMatrixMod(HTuple matrixAID, HTuple matrixBID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(872);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DivElementMatrix(HTuple matrixAID, HTuple matrixBID, out HTuple matrixDivID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(873);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixDivID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MultElementMatrixMod(HTuple matrixAID, HTuple matrixBID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(874);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void MultElementMatrix(HTuple matrixAID, HTuple matrixBID, out HTuple matrixMultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(875);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixMultID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ScaleMatrixMod(HTuple matrixID, HTuple factor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(876);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, factor);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(factor);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ScaleMatrix(HTuple matrixID, HTuple factor, out HTuple matrixScaledID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(877);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, factor);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(factor);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixScaledID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SubMatrixMod(HTuple matrixAID, HTuple matrixBID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(878);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SubMatrix(HTuple matrixAID, HTuple matrixBID, out HTuple matrixSubID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(879);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixSubID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddMatrixMod(HTuple matrixAID, HTuple matrixBID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(880);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddMatrix(HTuple matrixAID, HTuple matrixBID, out HTuple matrixSumID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(881);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixSumID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MultMatrixMod(HTuple matrixAID, HTuple matrixBID, HTuple multType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(882);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.Store(expr_0A, 2, multType);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.UnpinTuple(multType);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void MultMatrix(HTuple matrixAID, HTuple matrixBID, HTuple multType, out HTuple matrixMultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(883);
			SZXCArimAPI.Store(expr_0A, 0, matrixAID);
			SZXCArimAPI.Store(expr_0A, 1, matrixBID);
			SZXCArimAPI.Store(expr_0A, 2, multType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixAID);
			SZXCArimAPI.UnpinTuple(matrixBID);
			SZXCArimAPI.UnpinTuple(multType);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixMultID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSizeMatrix(HTuple matrixID, out HTuple rows, out HTuple columns)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(884);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out columns);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RepeatMatrix(HTuple matrixID, HTuple rows, HTuple columns, out HTuple matrixRepeatedID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(885);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, rows);
			SZXCArimAPI.Store(expr_0A, 2, columns);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixRepeatedID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CopyMatrix(HTuple matrixID, out HTuple matrixCopyID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(886);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixCopyID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDiagonalMatrix(HTuple matrixID, HTuple vectorID, HTuple diagonal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(887);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, vectorID);
			SZXCArimAPI.Store(expr_0A, 2, diagonal);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(vectorID);
			SZXCArimAPI.UnpinTuple(diagonal);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDiagonalMatrix(HTuple matrixID, HTuple diagonal, out HTuple vectorID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(888);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, diagonal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(diagonal);
			num = HTuple.LoadNew(expr_0A, 0, num, out vectorID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSubMatrix(HTuple matrixID, HTuple matrixSubID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(889);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, matrixSubID);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(matrixSubID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSubMatrix(HTuple matrixID, HTuple row, HTuple column, HTuple rowsSub, HTuple columnsSub, out HTuple matrixSubID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(890);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, rowsSub);
			SZXCArimAPI.Store(expr_0A, 4, columnsSub);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(rowsSub);
			SZXCArimAPI.UnpinTuple(columnsSub);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixSubID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFullMatrix(HTuple matrixID, HTuple values)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(891);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, values);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(values);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFullMatrix(HTuple matrixID, out HTuple values)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(892);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out values);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetValueMatrix(HTuple matrixID, HTuple row, HTuple column, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(893);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetValueMatrix(HTuple matrixID, HTuple row, HTuple column, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(894);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllMatrices()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(895);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearMatrix(HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(896);
			SZXCArimAPI.Store(expr_0A, 0, matrixID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(matrixID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateMatrix(HTuple rows, HTuple columns, HTuple value, out HTuple matrixID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(897);
			SZXCArimAPI.Store(expr_0A, 0, rows);
			SZXCArimAPI.Store(expr_0A, 1, columns);
			SZXCArimAPI.Store(expr_0A, 2, value);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(columns);
			SZXCArimAPI.UnpinTuple(value);
			num = HTuple.LoadNew(expr_0A, 0, num, out matrixID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllSampleIdentifiers()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(898);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSampleIdentifier(HTuple sampleIdentifier)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(899);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeSampleIdentifier(HTuple serializedItemHandle, out HTuple sampleIdentifier)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(900);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampleIdentifier);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadSampleIdentifier(HTuple fileName, out HTuple sampleIdentifier)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(901);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampleIdentifier);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeSampleIdentifier(HTuple sampleIdentifier, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(902);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteSampleIdentifier(HTuple sampleIdentifier, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(903);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ApplySampleIdentifier(HObject image, HTuple sampleIdentifier, HTuple numResults, HTuple ratingThreshold, HTuple genParamName, HTuple genParamValue, out HTuple objectIdx, out HTuple rating)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(904);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, numResults);
			SZXCArimAPI.Store(expr_0A, 2, ratingThreshold);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(numResults);
			SZXCArimAPI.UnpinTuple(ratingThreshold);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out objectIdx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rating);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetSampleIdentifierParam(HTuple sampleIdentifier, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(905);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSampleIdentifierParam(HTuple sampleIdentifier, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(906);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSampleIdentifierObjectInfo(HTuple sampleIdentifier, HTuple objectIdx, HTuple infoName, out HTuple infoValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(907);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, infoName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(infoName);
			num = HTuple.LoadNew(expr_0A, 0, num, out infoValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetSampleIdentifierObjectInfo(HTuple sampleIdentifier, HTuple objectIdx, HTuple infoName, HTuple infoValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(908);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, infoName);
			SZXCArimAPI.Store(expr_0A, 3, infoValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(infoName);
			SZXCArimAPI.UnpinTuple(infoValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RemoveSampleIdentifierTrainingData(HTuple sampleIdentifier, HTuple objectIdx, HTuple objectSampleIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(909);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, objectSampleIdx);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(objectSampleIdx);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RemoveSampleIdentifierPreparationData(HTuple sampleIdentifier, HTuple objectIdx, HTuple objectSampleIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(910);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, objectSampleIdx);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(objectSampleIdx);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainSampleIdentifier(HTuple sampleIdentifier, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(911);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddSampleIdentifierTrainingData(HObject sampleImage, HTuple sampleIdentifier, HTuple objectIdx, HTuple genParamName, HTuple genParamValue, out HTuple objectSampleIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(912);
			SZXCArimAPI.Store(expr_0A, 1, sampleImage);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out objectSampleIdx);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(sampleImage);
		}

		public static void PrepareSampleIdentifier(HTuple sampleIdentifier, HTuple removePreparationData, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(913);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, removePreparationData);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(removePreparationData);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddSampleIdentifierPreparationData(HObject sampleImage, HTuple sampleIdentifier, HTuple objectIdx, HTuple genParamName, HTuple genParamValue, out HTuple objectSampleIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(914);
			SZXCArimAPI.Store(expr_0A, 1, sampleImage);
			SZXCArimAPI.Store(expr_0A, 0, sampleIdentifier);
			SZXCArimAPI.Store(expr_0A, 1, objectIdx);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampleIdentifier);
			SZXCArimAPI.UnpinTuple(objectIdx);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out objectSampleIdx);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(sampleImage);
		}

		public static void CreateSampleIdentifier(HTuple genParamName, HTuple genParamValue, out HTuple sampleIdentifier)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(915);
			SZXCArimAPI.Store(expr_0A, 0, genParamName);
			SZXCArimAPI.Store(expr_0A, 1, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampleIdentifier);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeShapeModel(HTuple serializedItemHandle, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(916);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadShapeModel(HTuple fileName, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(917);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeShapeModel(HTuple modelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(918);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteShapeModel(HTuple modelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(919);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllShapeModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(920);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearShapeModel(HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(921);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetShapeModelContours(out HObject modelContours, HTuple modelID, HTuple level)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(922);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, level);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(level);
			num = HObject.LoadNew(expr_0A, 1, num, out modelContours);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DetermineShapeModelParams(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple scaleMin, HTuple scaleMax, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, HTuple parameters, out HTuple parameterName, out HTuple parameterValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(923);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleMax);
			SZXCArimAPI.Store(expr_0A, 5, optimization);
			SZXCArimAPI.Store(expr_0A, 6, metric);
			SZXCArimAPI.Store(expr_0A, 7, contrast);
			SZXCArimAPI.Store(expr_0A, 8, minContrast);
			SZXCArimAPI.Store(expr_0A, 9, parameters);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(parameters);
			num = HTuple.LoadNew(expr_0A, 0, num, out parameterName);
			num = HTuple.LoadNew(expr_0A, 1, num, out parameterValue);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void GetShapeModelParams(HTuple modelID, out HTuple numLevels, out HTuple angleStart, out HTuple angleExtent, out HTuple angleStep, out HTuple scaleMin, out HTuple scaleMax, out HTuple scaleStep, out HTuple metric, out HTuple minContrast)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(924);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numLevels);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out angleStart);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angleExtent);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out angleStep);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out scaleMin);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out scaleMax);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out scaleStep);
			num = HTuple.LoadNew(expr_0A, 7, num, out metric);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.INTEGER, num, out minContrast);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetShapeModelOrigin(HTuple modelID, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(925);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetShapeModelOrigin(HTuple modelID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(926);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FindAnisoShapeModels(HObject image, HTuple modelIDs, HTuple angleStart, HTuple angleExtent, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleCMin, HTuple scaleCMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple scaleR, out HTuple scaleC, out HTuple score, out HTuple model)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(927);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelIDs);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 5, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 6, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 7, minScore);
			SZXCArimAPI.Store(expr_0A, 8, numMatches);
			SZXCArimAPI.Store(expr_0A, 9, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 10, subPixel);
			SZXCArimAPI.Store(expr_0A, 11, numLevels);
			SZXCArimAPI.Store(expr_0A, 12, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelIDs);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out scaleR);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out scaleC);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out model);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindScaledShapeModels(HObject image, HTuple modelIDs, HTuple angleStart, HTuple angleExtent, HTuple scaleMin, HTuple scaleMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple scale, out HTuple score, out HTuple model)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(928);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelIDs);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleMax);
			SZXCArimAPI.Store(expr_0A, 5, minScore);
			SZXCArimAPI.Store(expr_0A, 6, numMatches);
			SZXCArimAPI.Store(expr_0A, 7, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 8, subPixel);
			SZXCArimAPI.Store(expr_0A, 9, numLevels);
			SZXCArimAPI.Store(expr_0A, 10, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelIDs);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out scale);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out model);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindShapeModels(HObject image, HTuple modelIDs, HTuple angleStart, HTuple angleExtent, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple score, out HTuple model)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(929);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelIDs);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, numMatches);
			SZXCArimAPI.Store(expr_0A, 5, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 6, subPixel);
			SZXCArimAPI.Store(expr_0A, 7, numLevels);
			SZXCArimAPI.Store(expr_0A, 8, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelIDs);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out model);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindAnisoShapeModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleCMin, HTuple scaleCMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple scaleR, out HTuple scaleC, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(930);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 5, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 6, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 7, minScore);
			SZXCArimAPI.Store(expr_0A, 8, numMatches);
			SZXCArimAPI.Store(expr_0A, 9, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 10, subPixel);
			SZXCArimAPI.Store(expr_0A, 11, numLevels);
			SZXCArimAPI.Store(expr_0A, 12, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out scaleR);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out scaleC);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindScaledShapeModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple scaleMin, HTuple scaleMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple scale, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(931);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleMax);
			SZXCArimAPI.Store(expr_0A, 5, minScore);
			SZXCArimAPI.Store(expr_0A, 6, numMatches);
			SZXCArimAPI.Store(expr_0A, 7, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 8, subPixel);
			SZXCArimAPI.Store(expr_0A, 9, numLevels);
			SZXCArimAPI.Store(expr_0A, 10, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out scale);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindShapeModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, HTuple greediness, out HTuple row, out HTuple column, out HTuple angle, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(932);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, numMatches);
			SZXCArimAPI.Store(expr_0A, 5, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 6, subPixel);
			SZXCArimAPI.Store(expr_0A, 7, numLevels);
			SZXCArimAPI.Store(expr_0A, 8, greediness);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SetShapeModelMetric(HObject image, HTuple modelID, HTuple homMat2D, HTuple metric)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(933);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, homMat2D);
			SZXCArimAPI.Store(expr_0A, 2, metric);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void SetShapeModelParam(HTuple modelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(934);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateAnisoShapeModelXld(HObject contours, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(935);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreateScaledShapeModelXld(HObject contours, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleMin, HTuple scaleMax, HTuple scaleStep, HTuple optimization, HTuple metric, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(936);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleStep);
			SZXCArimAPI.Store(expr_0A, 7, optimization);
			SZXCArimAPI.Store(expr_0A, 8, metric);
			SZXCArimAPI.Store(expr_0A, 9, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(scaleStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreateShapeModelXld(HObject contours, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple optimization, HTuple metric, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(937);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, optimization);
			SZXCArimAPI.Store(expr_0A, 5, metric);
			SZXCArimAPI.Store(expr_0A, 6, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreateAnisoShapeModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(938);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, contrast);
			SZXCArimAPI.Store(expr_0A, 13, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreateScaledShapeModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleMin, HTuple scaleMax, HTuple scaleStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(939);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleStep);
			SZXCArimAPI.Store(expr_0A, 7, optimization);
			SZXCArimAPI.Store(expr_0A, 8, metric);
			SZXCArimAPI.Store(expr_0A, 9, contrast);
			SZXCArimAPI.Store(expr_0A, 10, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(scaleStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreateShapeModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(940);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, optimization);
			SZXCArimAPI.Store(expr_0A, 5, metric);
			SZXCArimAPI.Store(expr_0A, 6, contrast);
			SZXCArimAPI.Store(expr_0A, 7, minContrast);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void InspectShapeModel(HObject image, out HObject modelImages, out HObject modelRegions, HTuple numLevels, HTuple contrast)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(941);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, contrast);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(contrast);
			num = HObject.LoadNew(expr_0A, 1, num, out modelImages);
			num = HObject.LoadNew(expr_0A, 2, num, out modelRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClearAllDescriptorModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(942);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDescriptorModel(HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(943);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeDescriptorModel(HTuple serializedItemHandle, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(944);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDescriptorModel(HTuple modelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(945);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadDescriptorModel(HTuple fileName, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(946);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDescriptorModel(HTuple modelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(947);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FindCalibDescriptorModel(HObject image, HTuple modelID, HTuple detectorParamName, HTuple detectorParamValue, HTuple descriptorParamName, HTuple descriptorParamValue, HTuple minScore, HTuple numMatches, HTuple camParam, HTuple scoreType, out HTuple pose, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(948);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, detectorParamName);
			SZXCArimAPI.Store(expr_0A, 2, detectorParamValue);
			SZXCArimAPI.Store(expr_0A, 3, descriptorParamName);
			SZXCArimAPI.Store(expr_0A, 4, descriptorParamValue);
			SZXCArimAPI.Store(expr_0A, 5, minScore);
			SZXCArimAPI.Store(expr_0A, 6, numMatches);
			SZXCArimAPI.Store(expr_0A, 7, camParam);
			SZXCArimAPI.Store(expr_0A, 8, scoreType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(detectorParamName);
			SZXCArimAPI.UnpinTuple(detectorParamValue);
			SZXCArimAPI.UnpinTuple(descriptorParamName);
			SZXCArimAPI.UnpinTuple(descriptorParamValue);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(scoreType);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindUncalibDescriptorModel(HObject image, HTuple modelID, HTuple detectorParamName, HTuple detectorParamValue, HTuple descriptorParamName, HTuple descriptorParamValue, HTuple minScore, HTuple numMatches, HTuple scoreType, out HTuple homMat2D, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(949);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, detectorParamName);
			SZXCArimAPI.Store(expr_0A, 2, detectorParamValue);
			SZXCArimAPI.Store(expr_0A, 3, descriptorParamName);
			SZXCArimAPI.Store(expr_0A, 4, descriptorParamValue);
			SZXCArimAPI.Store(expr_0A, 5, minScore);
			SZXCArimAPI.Store(expr_0A, 6, numMatches);
			SZXCArimAPI.Store(expr_0A, 7, scoreType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(detectorParamName);
			SZXCArimAPI.UnpinTuple(detectorParamValue);
			SZXCArimAPI.UnpinTuple(descriptorParamName);
			SZXCArimAPI.UnpinTuple(descriptorParamValue);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(scoreType);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetDescriptorModelPoints(HTuple modelID, HTuple set, HTuple subset, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(950);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, set);
			SZXCArimAPI.Store(expr_0A, 2, subset);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(set);
			SZXCArimAPI.UnpinTuple(subset);
			num = HTuple.LoadNew(expr_0A, 0, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDescriptorModelParams(HTuple modelID, out HTuple detectorType, out HTuple detectorParamName, out HTuple detectorParamValue, out HTuple descriptorParamName, out HTuple descriptorParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(951);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out detectorType);
			num = HTuple.LoadNew(expr_0A, 1, num, out detectorParamName);
			num = HTuple.LoadNew(expr_0A, 2, num, out detectorParamValue);
			num = HTuple.LoadNew(expr_0A, 3, num, out descriptorParamName);
			num = HTuple.LoadNew(expr_0A, 4, num, out descriptorParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateCalibDescriptorModel(HObject template, HTuple camParam, HTuple referencePose, HTuple detectorType, HTuple detectorParamName, HTuple detectorParamValue, HTuple descriptorParamName, HTuple descriptorParamValue, HTuple seed, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(952);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, camParam);
			SZXCArimAPI.Store(expr_0A, 1, referencePose);
			SZXCArimAPI.Store(expr_0A, 2, detectorType);
			SZXCArimAPI.Store(expr_0A, 3, detectorParamName);
			SZXCArimAPI.Store(expr_0A, 4, detectorParamValue);
			SZXCArimAPI.Store(expr_0A, 5, descriptorParamName);
			SZXCArimAPI.Store(expr_0A, 6, descriptorParamValue);
			SZXCArimAPI.Store(expr_0A, 7, seed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(referencePose);
			SZXCArimAPI.UnpinTuple(detectorType);
			SZXCArimAPI.UnpinTuple(detectorParamName);
			SZXCArimAPI.UnpinTuple(detectorParamValue);
			SZXCArimAPI.UnpinTuple(descriptorParamName);
			SZXCArimAPI.UnpinTuple(descriptorParamValue);
			SZXCArimAPI.UnpinTuple(seed);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreateUncalibDescriptorModel(HObject template, HTuple detectorType, HTuple detectorParamName, HTuple detectorParamValue, HTuple descriptorParamName, HTuple descriptorParamValue, HTuple seed, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(953);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, detectorType);
			SZXCArimAPI.Store(expr_0A, 1, detectorParamName);
			SZXCArimAPI.Store(expr_0A, 2, detectorParamValue);
			SZXCArimAPI.Store(expr_0A, 3, descriptorParamName);
			SZXCArimAPI.Store(expr_0A, 4, descriptorParamValue);
			SZXCArimAPI.Store(expr_0A, 5, seed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(detectorType);
			SZXCArimAPI.UnpinTuple(detectorParamName);
			SZXCArimAPI.UnpinTuple(detectorParamValue);
			SZXCArimAPI.UnpinTuple(descriptorParamName);
			SZXCArimAPI.UnpinTuple(descriptorParamValue);
			SZXCArimAPI.UnpinTuple(seed);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void GetDescriptorModelResults(HTuple modelID, HTuple objectID, HTuple resultNames, out HTuple results)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(954);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, objectID);
			SZXCArimAPI.Store(expr_0A, 2, resultNames);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(objectID);
			SZXCArimAPI.UnpinTuple(resultNames);
			num = HTuple.LoadNew(expr_0A, 0, num, out results);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDescriptorModelOrigin(HTuple modelID, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(955);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDescriptorModelOrigin(HTuple modelID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(956);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDeformableModelOrigin(HTuple modelID, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(957);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDeformableModelOrigin(HTuple modelID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(958);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetDeformableModelParam(HTuple modelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(959);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDeformableModelParams(HTuple modelID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(960);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDeformableModelContours(out HObject modelContours, HTuple modelID, HTuple level)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(961);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, level);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(level);
			num = HObject.LoadNew(expr_0A, 1, num, out modelContours);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DetermineDeformableModelParams(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple scaleMin, HTuple scaleMax, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, HTuple genParamName, HTuple genParamValue, HTuple parameters, out HTuple parameterName, out HTuple parameterValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(962);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleMax);
			SZXCArimAPI.Store(expr_0A, 5, optimization);
			SZXCArimAPI.Store(expr_0A, 6, metric);
			SZXCArimAPI.Store(expr_0A, 7, contrast);
			SZXCArimAPI.Store(expr_0A, 8, minContrast);
			SZXCArimAPI.Store(expr_0A, 9, genParamName);
			SZXCArimAPI.Store(expr_0A, 10, genParamValue);
			SZXCArimAPI.Store(expr_0A, 11, parameters);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleMin);
			SZXCArimAPI.UnpinTuple(scaleMax);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.UnpinTuple(parameters);
			num = HTuple.LoadNew(expr_0A, 0, num, out parameterName);
			num = HTuple.LoadNew(expr_0A, 1, num, out parameterValue);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void DeserializeDeformableModel(HTuple serializedItemHandle, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(963);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDeformableModel(HTuple modelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(964);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadDeformableModel(HTuple fileName, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(965);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDeformableModel(HTuple modelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(966);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllDeformableModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(967);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDeformableModel(HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(968);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FindLocalDeformableModel(HObject image, out HObject imageRectified, out HObject vectorField, out HObject deformedContours, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleCMin, HTuple scaleCMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple numLevels, HTuple greediness, HTuple resultType, HTuple genParamName, HTuple genParamValue, out HTuple score, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(969);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 5, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 6, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 7, minScore);
			SZXCArimAPI.Store(expr_0A, 8, numMatches);
			SZXCArimAPI.Store(expr_0A, 9, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 10, numLevels);
			SZXCArimAPI.Store(expr_0A, 11, greediness);
			SZXCArimAPI.Store(expr_0A, 12, resultType);
			SZXCArimAPI.Store(expr_0A, 13, genParamName);
			SZXCArimAPI.Store(expr_0A, 14, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			SZXCArimAPI.UnpinTuple(resultType);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRectified);
			num = HObject.LoadNew(expr_0A, 2, num, out vectorField);
			num = HObject.LoadNew(expr_0A, 3, num, out deformedContours);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindPlanarCalibDeformableModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleCMin, HTuple scaleCMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple numLevels, HTuple greediness, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple covPose, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(970);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 5, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 6, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 7, minScore);
			SZXCArimAPI.Store(expr_0A, 8, numMatches);
			SZXCArimAPI.Store(expr_0A, 9, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 10, numLevels);
			SZXCArimAPI.Store(expr_0A, 11, greediness);
			SZXCArimAPI.Store(expr_0A, 12, genParamName);
			SZXCArimAPI.Store(expr_0A, 13, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindPlanarUncalibDeformableModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleCMin, HTuple scaleCMax, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple numLevels, HTuple greediness, HTuple genParamName, HTuple genParamValue, out HTuple homMat2D, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(971);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 5, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 6, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 7, minScore);
			SZXCArimAPI.Store(expr_0A, 8, numMatches);
			SZXCArimAPI.Store(expr_0A, 9, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 10, numLevels);
			SZXCArimAPI.Store(expr_0A, 11, greediness);
			SZXCArimAPI.Store(expr_0A, 12, genParamName);
			SZXCArimAPI.Store(expr_0A, 13, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(greediness);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SetLocalDeformableModelMetric(HObject image, HObject vectorField, HTuple modelID, HTuple metric)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(972);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, vectorField);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, metric);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
			GC.KeepAlive(vectorField);
		}

		public static void SetPlanarCalibDeformableModelMetric(HObject image, HTuple modelID, HTuple pose, HTuple metric)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(973);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, pose);
			SZXCArimAPI.Store(expr_0A, 2, metric);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void SetPlanarUncalibDeformableModelMetric(HObject image, HTuple modelID, HTuple homMat2D, HTuple metric)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(974);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, homMat2D);
			SZXCArimAPI.Store(expr_0A, 2, metric);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void CreateLocalDeformableModelXld(HObject contours, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(975);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, minContrast);
			SZXCArimAPI.Store(expr_0A, 13, genParamName);
			SZXCArimAPI.Store(expr_0A, 14, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreatePlanarCalibDeformableModelXld(HObject contours, HTuple camParam, HTuple referencePose, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(976);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, camParam);
			SZXCArimAPI.Store(expr_0A, 1, referencePose);
			SZXCArimAPI.Store(expr_0A, 2, numLevels);
			SZXCArimAPI.Store(expr_0A, 3, angleStart);
			SZXCArimAPI.Store(expr_0A, 4, angleExtent);
			SZXCArimAPI.Store(expr_0A, 5, angleStep);
			SZXCArimAPI.Store(expr_0A, 6, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 7, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 8, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 9, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 10, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 11, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 12, optimization);
			SZXCArimAPI.Store(expr_0A, 13, metric);
			SZXCArimAPI.Store(expr_0A, 14, minContrast);
			SZXCArimAPI.Store(expr_0A, 15, genParamName);
			SZXCArimAPI.Store(expr_0A, 16, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(referencePose);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreatePlanarUncalibDeformableModelXld(HObject contours, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(977);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, minContrast);
			SZXCArimAPI.Store(expr_0A, 13, genParamName);
			SZXCArimAPI.Store(expr_0A, 14, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CreateLocalDeformableModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(978);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, contrast);
			SZXCArimAPI.Store(expr_0A, 13, minContrast);
			SZXCArimAPI.Store(expr_0A, 14, genParamName);
			SZXCArimAPI.Store(expr_0A, 15, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreatePlanarCalibDeformableModel(HObject template, HTuple camParam, HTuple referencePose, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(979);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, camParam);
			SZXCArimAPI.Store(expr_0A, 1, referencePose);
			SZXCArimAPI.Store(expr_0A, 2, numLevels);
			SZXCArimAPI.Store(expr_0A, 3, angleStart);
			SZXCArimAPI.Store(expr_0A, 4, angleExtent);
			SZXCArimAPI.Store(expr_0A, 5, angleStep);
			SZXCArimAPI.Store(expr_0A, 6, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 7, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 8, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 9, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 10, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 11, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 12, optimization);
			SZXCArimAPI.Store(expr_0A, 13, metric);
			SZXCArimAPI.Store(expr_0A, 14, contrast);
			SZXCArimAPI.Store(expr_0A, 15, minContrast);
			SZXCArimAPI.Store(expr_0A, 16, genParamName);
			SZXCArimAPI.Store(expr_0A, 17, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(referencePose);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreatePlanarUncalibDeformableModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple scaleRMin, HTuple scaleRMax, HTuple scaleRStep, HTuple scaleCMin, HTuple scaleCMax, HTuple scaleCStep, HTuple optimization, HTuple metric, HTuple contrast, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(980);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, scaleRMin);
			SZXCArimAPI.Store(expr_0A, 5, scaleRMax);
			SZXCArimAPI.Store(expr_0A, 6, scaleRStep);
			SZXCArimAPI.Store(expr_0A, 7, scaleCMin);
			SZXCArimAPI.Store(expr_0A, 8, scaleCMax);
			SZXCArimAPI.Store(expr_0A, 9, scaleCStep);
			SZXCArimAPI.Store(expr_0A, 10, optimization);
			SZXCArimAPI.Store(expr_0A, 11, metric);
			SZXCArimAPI.Store(expr_0A, 12, contrast);
			SZXCArimAPI.Store(expr_0A, 13, minContrast);
			SZXCArimAPI.Store(expr_0A, 14, genParamName);
			SZXCArimAPI.Store(expr_0A, 15, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(scaleRMin);
			SZXCArimAPI.UnpinTuple(scaleRMax);
			SZXCArimAPI.UnpinTuple(scaleRStep);
			SZXCArimAPI.UnpinTuple(scaleCMin);
			SZXCArimAPI.UnpinTuple(scaleCMax);
			SZXCArimAPI.UnpinTuple(scaleCStep);
			SZXCArimAPI.UnpinTuple(optimization);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void ClearAllNccModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(981);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearNccModel(HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(982);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeNccModel(HTuple serializedItemHandle, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(983);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeNccModel(HTuple modelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(984);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadNccModel(HTuple fileName, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(985);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteNccModel(HTuple modelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(986);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DetermineNccModelParams(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple metric, HTuple parameters, out HTuple parameterName, out HTuple parameterValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(987);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, metric);
			SZXCArimAPI.Store(expr_0A, 4, parameters);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(metric);
			SZXCArimAPI.UnpinTuple(parameters);
			num = HTuple.LoadNew(expr_0A, 0, num, out parameterName);
			num = HTuple.LoadNew(expr_0A, 1, num, out parameterValue);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void GetNccModelParams(HTuple modelID, out HTuple numLevels, out HTuple angleStart, out HTuple angleExtent, out HTuple angleStep, out HTuple metric)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(988);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numLevels);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out angleStart);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angleExtent);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out angleStep);
			num = HTuple.LoadNew(expr_0A, 4, num, out metric);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetNccModelOrigin(HTuple modelID, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(989);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetNccModelOrigin(HTuple modelID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(990);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FindNccModel(HObject image, HTuple modelID, HTuple angleStart, HTuple angleExtent, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, out HTuple row, out HTuple column, out HTuple angle, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(991);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, numMatches);
			SZXCArimAPI.Store(expr_0A, 5, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 6, subPixel);
			SZXCArimAPI.Store(expr_0A, 7, numLevels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SetNccModelParam(HTuple modelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(992);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateNccModel(HObject template, HTuple numLevels, HTuple angleStart, HTuple angleExtent, HTuple angleStep, HTuple metric, out HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(993);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevels);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, metric);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(metric);
			num = HTuple.LoadNew(expr_0A, 0, num, out modelID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void GetFoundComponentModel(out HObject foundComponents, HTuple componentModelID, HTuple modelStart, HTuple modelEnd, HTuple rowComp, HTuple columnComp, HTuple angleComp, HTuple scoreComp, HTuple modelComp, HTuple modelMatch, HTuple markOrientation, out HTuple rowCompInst, out HTuple columnCompInst, out HTuple angleCompInst, out HTuple scoreCompInst)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(994);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.Store(expr_0A, 1, modelStart);
			SZXCArimAPI.Store(expr_0A, 2, modelEnd);
			SZXCArimAPI.Store(expr_0A, 3, rowComp);
			SZXCArimAPI.Store(expr_0A, 4, columnComp);
			SZXCArimAPI.Store(expr_0A, 5, angleComp);
			SZXCArimAPI.Store(expr_0A, 6, scoreComp);
			SZXCArimAPI.Store(expr_0A, 7, modelComp);
			SZXCArimAPI.Store(expr_0A, 8, modelMatch);
			SZXCArimAPI.Store(expr_0A, 9, markOrientation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			SZXCArimAPI.UnpinTuple(modelStart);
			SZXCArimAPI.UnpinTuple(modelEnd);
			SZXCArimAPI.UnpinTuple(rowComp);
			SZXCArimAPI.UnpinTuple(columnComp);
			SZXCArimAPI.UnpinTuple(angleComp);
			SZXCArimAPI.UnpinTuple(scoreComp);
			SZXCArimAPI.UnpinTuple(modelComp);
			SZXCArimAPI.UnpinTuple(modelMatch);
			SZXCArimAPI.UnpinTuple(markOrientation);
			num = HObject.LoadNew(expr_0A, 1, num, out foundComponents);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowCompInst);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnCompInst);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angleCompInst);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out scoreCompInst);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindComponentModel(HObject image, HTuple componentModelID, HTuple rootComponent, HTuple angleStartRoot, HTuple angleExtentRoot, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple ifRootNotFound, HTuple ifComponentNotFound, HTuple posePrediction, HTuple minScoreComp, HTuple subPixelComp, HTuple numLevelsComp, HTuple greedinessComp, out HTuple modelStart, out HTuple modelEnd, out HTuple score, out HTuple rowComp, out HTuple columnComp, out HTuple angleComp, out HTuple scoreComp, out HTuple modelComp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(995);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.Store(expr_0A, 1, rootComponent);
			SZXCArimAPI.Store(expr_0A, 2, angleStartRoot);
			SZXCArimAPI.Store(expr_0A, 3, angleExtentRoot);
			SZXCArimAPI.Store(expr_0A, 4, minScore);
			SZXCArimAPI.Store(expr_0A, 5, numMatches);
			SZXCArimAPI.Store(expr_0A, 6, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 7, ifRootNotFound);
			SZXCArimAPI.Store(expr_0A, 8, ifComponentNotFound);
			SZXCArimAPI.Store(expr_0A, 9, posePrediction);
			SZXCArimAPI.Store(expr_0A, 10, minScoreComp);
			SZXCArimAPI.Store(expr_0A, 11, subPixelComp);
			SZXCArimAPI.Store(expr_0A, 12, numLevelsComp);
			SZXCArimAPI.Store(expr_0A, 13, greedinessComp);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			SZXCArimAPI.UnpinTuple(rootComponent);
			SZXCArimAPI.UnpinTuple(angleStartRoot);
			SZXCArimAPI.UnpinTuple(angleExtentRoot);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(ifRootNotFound);
			SZXCArimAPI.UnpinTuple(ifComponentNotFound);
			SZXCArimAPI.UnpinTuple(posePrediction);
			SZXCArimAPI.UnpinTuple(minScoreComp);
			SZXCArimAPI.UnpinTuple(subPixelComp);
			SZXCArimAPI.UnpinTuple(numLevelsComp);
			SZXCArimAPI.UnpinTuple(greedinessComp);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out modelStart);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out modelEnd);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rowComp);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out columnComp);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out angleComp);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out scoreComp);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out modelComp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClearAllComponentModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(996);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearComponentModel(HTuple componentModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(997);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetComponentModelTree(out HObject tree, out HObject relations, HTuple componentModelID, HTuple rootComponent, HTuple image, out HTuple startNode, out HTuple endNode, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2, out HTuple angleStart, out HTuple angleExtent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(998);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.Store(expr_0A, 1, rootComponent);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			SZXCArimAPI.UnpinTuple(rootComponent);
			SZXCArimAPI.UnpinTuple(image);
			num = HObject.LoadNew(expr_0A, 1, num, out tree);
			num = HObject.LoadNew(expr_0A, 2, num, out relations);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out startNode);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out endNode);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out length2);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out angleStart);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.DOUBLE, num, out angleExtent);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetComponentModelParams(HTuple componentModelID, out HTuple minScoreComp, out HTuple rootRanking, out HTuple shapeModelIDs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(999);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out minScoreComp);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out rootRanking);
			num = HTuple.LoadNew(expr_0A, 2, num, out shapeModelIDs);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeComponentModel(HTuple serializedItemHandle, out HTuple componentModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1000);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeComponentModel(HTuple componentModelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1001);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadComponentModel(HTuple fileName, out HTuple componentModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1002);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteComponentModel(HTuple componentModelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1003);
			SZXCArimAPI.Store(expr_0A, 0, componentModelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentModelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateComponentModel(HObject modelImage, HObject componentRegions, HTuple variationRow, HTuple variationColumn, HTuple variationAngle, HTuple angleStart, HTuple angleExtent, HTuple contrastLowComp, HTuple contrastHighComp, HTuple minSizeComp, HTuple minContrastComp, HTuple minScoreComp, HTuple numLevelsComp, HTuple angleStepComp, HTuple optimizationComp, HTuple metricComp, HTuple pregenerationComp, out HTuple componentModelID, out HTuple rootRanking)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1004);
			SZXCArimAPI.Store(expr_0A, 1, modelImage);
			SZXCArimAPI.Store(expr_0A, 2, componentRegions);
			SZXCArimAPI.Store(expr_0A, 0, variationRow);
			SZXCArimAPI.Store(expr_0A, 1, variationColumn);
			SZXCArimAPI.Store(expr_0A, 2, variationAngle);
			SZXCArimAPI.Store(expr_0A, 3, angleStart);
			SZXCArimAPI.Store(expr_0A, 4, angleExtent);
			SZXCArimAPI.Store(expr_0A, 5, contrastLowComp);
			SZXCArimAPI.Store(expr_0A, 6, contrastHighComp);
			SZXCArimAPI.Store(expr_0A, 7, minSizeComp);
			SZXCArimAPI.Store(expr_0A, 8, minContrastComp);
			SZXCArimAPI.Store(expr_0A, 9, minScoreComp);
			SZXCArimAPI.Store(expr_0A, 10, numLevelsComp);
			SZXCArimAPI.Store(expr_0A, 11, angleStepComp);
			SZXCArimAPI.Store(expr_0A, 12, optimizationComp);
			SZXCArimAPI.Store(expr_0A, 13, metricComp);
			SZXCArimAPI.Store(expr_0A, 14, pregenerationComp);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(variationRow);
			SZXCArimAPI.UnpinTuple(variationColumn);
			SZXCArimAPI.UnpinTuple(variationAngle);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(contrastLowComp);
			SZXCArimAPI.UnpinTuple(contrastHighComp);
			SZXCArimAPI.UnpinTuple(minSizeComp);
			SZXCArimAPI.UnpinTuple(minContrastComp);
			SZXCArimAPI.UnpinTuple(minScoreComp);
			SZXCArimAPI.UnpinTuple(numLevelsComp);
			SZXCArimAPI.UnpinTuple(angleStepComp);
			SZXCArimAPI.UnpinTuple(optimizationComp);
			SZXCArimAPI.UnpinTuple(metricComp);
			SZXCArimAPI.UnpinTuple(pregenerationComp);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentModelID);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out rootRanking);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(modelImage);
			GC.KeepAlive(componentRegions);
		}

		public static void CreateTrainedComponentModel(HTuple componentTrainingID, HTuple angleStart, HTuple angleExtent, HTuple minContrastComp, HTuple minScoreComp, HTuple numLevelsComp, HTuple angleStepComp, HTuple optimizationComp, HTuple metricComp, HTuple pregenerationComp, out HTuple componentModelID, out HTuple rootRanking)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1005);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, minContrastComp);
			SZXCArimAPI.Store(expr_0A, 4, minScoreComp);
			SZXCArimAPI.Store(expr_0A, 5, numLevelsComp);
			SZXCArimAPI.Store(expr_0A, 6, angleStepComp);
			SZXCArimAPI.Store(expr_0A, 7, optimizationComp);
			SZXCArimAPI.Store(expr_0A, 8, metricComp);
			SZXCArimAPI.Store(expr_0A, 9, pregenerationComp);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(minContrastComp);
			SZXCArimAPI.UnpinTuple(minScoreComp);
			SZXCArimAPI.UnpinTuple(numLevelsComp);
			SZXCArimAPI.UnpinTuple(angleStepComp);
			SZXCArimAPI.UnpinTuple(optimizationComp);
			SZXCArimAPI.UnpinTuple(metricComp);
			SZXCArimAPI.UnpinTuple(pregenerationComp);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentModelID);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out rootRanking);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllTrainingComponents()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1006);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTrainingComponents(HTuple componentTrainingID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1007);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetComponentRelations(out HObject relations, HTuple componentTrainingID, HTuple referenceComponent, HTuple image, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2, out HTuple angleStart, out HTuple angleExtent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1008);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, referenceComponent);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(referenceComponent);
			SZXCArimAPI.UnpinTuple(image);
			num = HObject.LoadNew(expr_0A, 1, num, out relations);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out length2);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out angleStart);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out angleExtent);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTrainingComponents(out HObject trainingComponents, HTuple componentTrainingID, HTuple components, HTuple image, HTuple markOrientation, out HTuple row, out HTuple column, out HTuple angle, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1009);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, components);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 3, markOrientation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(components);
			SZXCArimAPI.UnpinTuple(image);
			SZXCArimAPI.UnpinTuple(markOrientation);
			num = HObject.LoadNew(expr_0A, 1, num, out trainingComponents);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ModifyComponentRelations(HTuple componentTrainingID, HTuple referenceComponent, HTuple toleranceComponent, HTuple positionTolerance, HTuple angleTolerance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1010);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, referenceComponent);
			SZXCArimAPI.Store(expr_0A, 2, toleranceComponent);
			SZXCArimAPI.Store(expr_0A, 3, positionTolerance);
			SZXCArimAPI.Store(expr_0A, 4, angleTolerance);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(referenceComponent);
			SZXCArimAPI.UnpinTuple(toleranceComponent);
			SZXCArimAPI.UnpinTuple(positionTolerance);
			SZXCArimAPI.UnpinTuple(angleTolerance);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeTrainingComponents(HTuple serializedItemHandle, out HTuple componentTrainingID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1011);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentTrainingID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeTrainingComponents(HTuple componentTrainingID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1012);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadTrainingComponents(HTuple fileName, out HTuple componentTrainingID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1013);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentTrainingID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteTrainingComponents(HTuple componentTrainingID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1014);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClusterModelComponents(HObject trainingImages, out HObject modelComponents, HTuple componentTrainingID, HTuple ambiguityCriterion, HTuple maxContourOverlap, HTuple clusterThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1015);
			SZXCArimAPI.Store(expr_0A, 1, trainingImages);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, ambiguityCriterion);
			SZXCArimAPI.Store(expr_0A, 2, maxContourOverlap);
			SZXCArimAPI.Store(expr_0A, 3, clusterThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(ambiguityCriterion);
			SZXCArimAPI.UnpinTuple(maxContourOverlap);
			SZXCArimAPI.UnpinTuple(clusterThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out modelComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(trainingImages);
		}

		public static void InspectClusteredComponents(out HObject modelComponents, HTuple componentTrainingID, HTuple ambiguityCriterion, HTuple maxContourOverlap, HTuple clusterThreshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1016);
			SZXCArimAPI.Store(expr_0A, 0, componentTrainingID);
			SZXCArimAPI.Store(expr_0A, 1, ambiguityCriterion);
			SZXCArimAPI.Store(expr_0A, 2, maxContourOverlap);
			SZXCArimAPI.Store(expr_0A, 3, clusterThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(componentTrainingID);
			SZXCArimAPI.UnpinTuple(ambiguityCriterion);
			SZXCArimAPI.UnpinTuple(maxContourOverlap);
			SZXCArimAPI.UnpinTuple(clusterThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out modelComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainModelComponents(HObject modelImage, HObject initialComponents, HObject trainingImages, out HObject modelComponents, HTuple contrastLow, HTuple contrastHigh, HTuple minSize, HTuple minScore, HTuple searchRowTol, HTuple searchColumnTol, HTuple searchAngleTol, HTuple trainingEmphasis, HTuple ambiguityCriterion, HTuple maxContourOverlap, HTuple clusterThreshold, out HTuple componentTrainingID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1017);
			SZXCArimAPI.Store(expr_0A, 1, modelImage);
			SZXCArimAPI.Store(expr_0A, 2, initialComponents);
			SZXCArimAPI.Store(expr_0A, 3, trainingImages);
			SZXCArimAPI.Store(expr_0A, 0, contrastLow);
			SZXCArimAPI.Store(expr_0A, 1, contrastHigh);
			SZXCArimAPI.Store(expr_0A, 2, minSize);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, searchRowTol);
			SZXCArimAPI.Store(expr_0A, 5, searchColumnTol);
			SZXCArimAPI.Store(expr_0A, 6, searchAngleTol);
			SZXCArimAPI.Store(expr_0A, 7, trainingEmphasis);
			SZXCArimAPI.Store(expr_0A, 8, ambiguityCriterion);
			SZXCArimAPI.Store(expr_0A, 9, maxContourOverlap);
			SZXCArimAPI.Store(expr_0A, 10, clusterThreshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(contrastLow);
			SZXCArimAPI.UnpinTuple(contrastHigh);
			SZXCArimAPI.UnpinTuple(minSize);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(searchRowTol);
			SZXCArimAPI.UnpinTuple(searchColumnTol);
			SZXCArimAPI.UnpinTuple(searchAngleTol);
			SZXCArimAPI.UnpinTuple(trainingEmphasis);
			SZXCArimAPI.UnpinTuple(ambiguityCriterion);
			SZXCArimAPI.UnpinTuple(maxContourOverlap);
			SZXCArimAPI.UnpinTuple(clusterThreshold);
			num = HObject.LoadNew(expr_0A, 1, num, out modelComponents);
			num = HTuple.LoadNew(expr_0A, 0, num, out componentTrainingID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(modelImage);
			GC.KeepAlive(initialComponents);
			GC.KeepAlive(trainingImages);
		}

		public static void GenInitialComponents(HObject modelImage, out HObject initialComponents, HTuple contrastLow, HTuple contrastHigh, HTuple minSize, HTuple mode, HTuple genericName, HTuple genericValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1018);
			SZXCArimAPI.Store(expr_0A, 1, modelImage);
			SZXCArimAPI.Store(expr_0A, 0, contrastLow);
			SZXCArimAPI.Store(expr_0A, 1, contrastHigh);
			SZXCArimAPI.Store(expr_0A, 2, minSize);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.Store(expr_0A, 4, genericName);
			SZXCArimAPI.Store(expr_0A, 5, genericValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(contrastLow);
			SZXCArimAPI.UnpinTuple(contrastHigh);
			SZXCArimAPI.UnpinTuple(minSize);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(genericName);
			SZXCArimAPI.UnpinTuple(genericValue);
			num = HObject.LoadNew(expr_0A, 1, num, out initialComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(modelImage);
		}

		public static void GetDeformableSurfaceMatchingResult(HTuple deformableSurfaceMatchingResult, HTuple resultName, HTuple resultIndex, out HTuple resultValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1019);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceMatchingResult);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.Store(expr_0A, 2, resultIndex);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceMatchingResult);
			SZXCArimAPI.UnpinTuple(resultName);
			SZXCArimAPI.UnpinTuple(resultIndex);
			num = HTuple.LoadNew(expr_0A, 0, num, out resultValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearDeformableSurfaceMatchingResult(HTuple deformableSurfaceMatchingResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1020);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceMatchingResult);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceMatchingResult);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDeformableSurfaceModel(HTuple deformableSurfaceModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1021);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeDeformableSurfaceModel(HTuple serializedItemHandle, out HTuple deformableSurfaceModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1022);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out deformableSurfaceModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDeformableSurfaceModel(HTuple deformableSurfaceModel, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1023);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadDeformableSurfaceModel(HTuple fileName, out HTuple deformableSurfaceModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1024);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out deformableSurfaceModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDeformableSurfaceModel(HTuple deformableSurfaceModel, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1025);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RefineDeformableSurfaceModel(HTuple deformableSurfaceModel, HTuple objectModel3D, HTuple relSamplingDistance, HTuple initialDeformationObjectModel3D, HTuple genParamName, HTuple genParamValue, out HTuple score, out HTuple deformableSurfaceMatchingResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1026);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 3, initialDeformationObjectModel3D);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(initialDeformationObjectModel3D);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 1, num, out deformableSurfaceMatchingResult);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindDeformableSurfaceModel(HTuple deformableSurfaceModel, HTuple objectModel3D, HTuple relSamplingDistance, HTuple minScore, HTuple genParamName, HTuple genParamValue, out HTuple score, out HTuple deformableSurfaceMatchingResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1027);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 1, num, out deformableSurfaceMatchingResult);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDeformableSurfaceModelParam(HTuple deformableSurfaceModel, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1028);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddDeformableSurfaceModelReferencePoint(HTuple deformableSurfaceModel, HTuple referencePointX, HTuple referencePointY, HTuple referencePointZ, out HTuple referencePointIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1029);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, referencePointX);
			SZXCArimAPI.Store(expr_0A, 2, referencePointY);
			SZXCArimAPI.Store(expr_0A, 3, referencePointZ);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(referencePointX);
			SZXCArimAPI.UnpinTuple(referencePointY);
			SZXCArimAPI.UnpinTuple(referencePointZ);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out referencePointIndex);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddDeformableSurfaceModelSample(HTuple deformableSurfaceModel, HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1030);
			SZXCArimAPI.Store(expr_0A, 0, deformableSurfaceModel);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(deformableSurfaceModel);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateDeformableSurfaceModel(HTuple objectModel3D, HTuple relSamplingDistance, HTuple genParamName, HTuple genParamValue, out HTuple deformableSurfaceModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1031);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out deformableSurfaceModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSurfaceMatchingResult(HTuple surfaceMatchingResultID, HTuple resultName, HTuple resultIndex, out HTuple resultValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1032);
			SZXCArimAPI.Store(expr_0A, 0, surfaceMatchingResultID);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.Store(expr_0A, 2, resultIndex);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceMatchingResultID);
			SZXCArimAPI.UnpinTuple(resultName);
			SZXCArimAPI.UnpinTuple(resultIndex);
			num = HTuple.LoadNew(expr_0A, 0, num, out resultValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllSurfaceMatchingResults()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1033);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSurfaceMatchingResult(HTuple surfaceMatchingResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1034);
			SZXCArimAPI.Store(expr_0A, 0, surfaceMatchingResultID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceMatchingResultID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllSurfaceModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1035);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSurfaceModel(HTuple surfaceModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1036);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeSurfaceModel(HTuple serializedItemHandle, out HTuple surfaceModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1037);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out surfaceModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeSurfaceModel(HTuple surfaceModelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1038);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadSurfaceModel(HTuple fileName, out HTuple surfaceModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1039);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out surfaceModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteSurfaceModel(HTuple surfaceModelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1040);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RefineSurfaceModelPose(HTuple surfaceModelID, HTuple objectModel3D, HTuple initialPose, HTuple minScore, HTuple returnResultHandle, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple score, out HTuple surfaceMatchingResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1041);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, initialPose);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, returnResultHandle);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(initialPose);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(returnResultHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 2, num, out surfaceMatchingResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindSurfaceModel(HTuple surfaceModelID, HTuple objectModel3D, HTuple relSamplingDistance, HTuple keyPointFraction, HTuple minScore, HTuple returnResultHandle, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple score, out HTuple surfaceMatchingResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1042);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 3, keyPointFraction);
			SZXCArimAPI.Store(expr_0A, 4, minScore);
			SZXCArimAPI.Store(expr_0A, 5, returnResultHandle);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(keyPointFraction);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(returnResultHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 2, num, out surfaceMatchingResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSurfaceModelParam(HTuple surfaceModelID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1043);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateSurfaceModel(HTuple objectModel3D, HTuple relSamplingDistance, HTuple genParamName, HTuple genParamValue, out HTuple surfaceModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1044);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out surfaceModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateCamPoseLookAtPoint(HTuple camPosX, HTuple camPosY, HTuple camPosZ, HTuple lookAtX, HTuple lookAtY, HTuple lookAtZ, HTuple refPlaneNormal, HTuple camRoll, out HTuple camPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1045);
			SZXCArimAPI.Store(expr_0A, 0, camPosX);
			SZXCArimAPI.Store(expr_0A, 1, camPosY);
			SZXCArimAPI.Store(expr_0A, 2, camPosZ);
			SZXCArimAPI.Store(expr_0A, 3, lookAtX);
			SZXCArimAPI.Store(expr_0A, 4, lookAtY);
			SZXCArimAPI.Store(expr_0A, 5, lookAtZ);
			SZXCArimAPI.Store(expr_0A, 6, refPlaneNormal);
			SZXCArimAPI.Store(expr_0A, 7, camRoll);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camPosX);
			SZXCArimAPI.UnpinTuple(camPosY);
			SZXCArimAPI.UnpinTuple(camPosZ);
			SZXCArimAPI.UnpinTuple(lookAtX);
			SZXCArimAPI.UnpinTuple(lookAtY);
			SZXCArimAPI.UnpinTuple(lookAtZ);
			SZXCArimAPI.UnpinTuple(refPlaneNormal);
			SZXCArimAPI.UnpinTuple(camRoll);
			num = HTuple.LoadNew(expr_0A, 0, num, out camPose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ConvertPoint3dSpherToCart(HTuple longitude, HTuple latitude, HTuple radius, HTuple equatPlaneNormal, HTuple zeroMeridian, out HTuple x, out HTuple y, out HTuple z)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1046);
			SZXCArimAPI.Store(expr_0A, 0, longitude);
			SZXCArimAPI.Store(expr_0A, 1, latitude);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.Store(expr_0A, 3, equatPlaneNormal);
			SZXCArimAPI.Store(expr_0A, 4, zeroMeridian);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(longitude);
			SZXCArimAPI.UnpinTuple(latitude);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(equatPlaneNormal);
			SZXCArimAPI.UnpinTuple(zeroMeridian);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ConvertPoint3dCartToSpher(HTuple x, HTuple y, HTuple z, HTuple equatPlaneNormal, HTuple zeroMeridian, out HTuple longitude, out HTuple latitude, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1047);
			SZXCArimAPI.Store(expr_0A, 0, x);
			SZXCArimAPI.Store(expr_0A, 1, y);
			SZXCArimAPI.Store(expr_0A, 2, z);
			SZXCArimAPI.Store(expr_0A, 3, equatPlaneNormal);
			SZXCArimAPI.Store(expr_0A, 4, zeroMeridian);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(z);
			SZXCArimAPI.UnpinTuple(equatPlaneNormal);
			SZXCArimAPI.UnpinTuple(zeroMeridian);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out longitude);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out latitude);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllShapeModel3d()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1048);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearShapeModel3d(HTuple shapeModel3DID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1049);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeShapeModel3d(HTuple serializedItemHandle, out HTuple shapeModel3DID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1050);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out shapeModel3DID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeShapeModel3d(HTuple shapeModel3DID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1051);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadShapeModel3d(HTuple fileName, out HTuple shapeModel3DID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1052);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out shapeModel3DID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteShapeModel3d(HTuple shapeModel3DID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1053);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TransPoseShapeModel3d(HTuple shapeModel3DID, HTuple poseIn, HTuple transformation, out HTuple poseOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1054);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, poseIn);
			SZXCArimAPI.Store(expr_0A, 2, transformation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(poseIn);
			SZXCArimAPI.UnpinTuple(transformation);
			num = HTuple.LoadNew(expr_0A, 0, num, out poseOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectShapeModel3d(out HObject modelContours, HTuple shapeModel3DID, HTuple camParam, HTuple pose, HTuple hiddenSurfaceRemoval, HTuple minFaceAngle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1055);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, camParam);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.Store(expr_0A, 3, hiddenSurfaceRemoval);
			SZXCArimAPI.Store(expr_0A, 4, minFaceAngle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(hiddenSurfaceRemoval);
			SZXCArimAPI.UnpinTuple(minFaceAngle);
			num = HObject.LoadNew(expr_0A, 1, num, out modelContours);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetShapeModel3dContours(out HObject modelContours, HTuple shapeModel3DID, HTuple level, HTuple view, out HTuple viewPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1056);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, level);
			SZXCArimAPI.Store(expr_0A, 2, view);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(level);
			SZXCArimAPI.UnpinTuple(view);
			num = HObject.LoadNew(expr_0A, 1, num, out modelContours);
			num = HTuple.LoadNew(expr_0A, 0, num, out viewPose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetShapeModel3dParams(HTuple shapeModel3DID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1057);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindShapeModel3d(HObject image, HTuple shapeModel3DID, HTuple minScore, HTuple greediness, HTuple numLevels, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple covPose, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1058);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, shapeModel3DID);
			SZXCArimAPI.Store(expr_0A, 1, minScore);
			SZXCArimAPI.Store(expr_0A, 2, greediness);
			SZXCArimAPI.Store(expr_0A, 3, numLevels);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shapeModel3DID);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(greediness);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CreateShapeModel3d(HTuple objectModel3D, HTuple camParam, HTuple refRotX, HTuple refRotY, HTuple refRotZ, HTuple orderOfRotation, HTuple longitudeMin, HTuple longitudeMax, HTuple latitudeMin, HTuple latitudeMax, HTuple camRollMin, HTuple camRollMax, HTuple distMin, HTuple distMax, HTuple minContrast, HTuple genParamName, HTuple genParamValue, out HTuple shapeModel3DID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1059);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, camParam);
			SZXCArimAPI.Store(expr_0A, 2, refRotX);
			SZXCArimAPI.Store(expr_0A, 3, refRotY);
			SZXCArimAPI.Store(expr_0A, 4, refRotZ);
			SZXCArimAPI.Store(expr_0A, 5, orderOfRotation);
			SZXCArimAPI.Store(expr_0A, 6, longitudeMin);
			SZXCArimAPI.Store(expr_0A, 7, longitudeMax);
			SZXCArimAPI.Store(expr_0A, 8, latitudeMin);
			SZXCArimAPI.Store(expr_0A, 9, latitudeMax);
			SZXCArimAPI.Store(expr_0A, 10, camRollMin);
			SZXCArimAPI.Store(expr_0A, 11, camRollMax);
			SZXCArimAPI.Store(expr_0A, 12, distMin);
			SZXCArimAPI.Store(expr_0A, 13, distMax);
			SZXCArimAPI.Store(expr_0A, 14, minContrast);
			SZXCArimAPI.Store(expr_0A, 15, genParamName);
			SZXCArimAPI.Store(expr_0A, 16, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(refRotX);
			SZXCArimAPI.UnpinTuple(refRotY);
			SZXCArimAPI.UnpinTuple(refRotZ);
			SZXCArimAPI.UnpinTuple(orderOfRotation);
			SZXCArimAPI.UnpinTuple(longitudeMin);
			SZXCArimAPI.UnpinTuple(longitudeMax);
			SZXCArimAPI.UnpinTuple(latitudeMin);
			SZXCArimAPI.UnpinTuple(latitudeMax);
			SZXCArimAPI.UnpinTuple(camRollMin);
			SZXCArimAPI.UnpinTuple(camRollMax);
			SZXCArimAPI.UnpinTuple(distMin);
			SZXCArimAPI.UnpinTuple(distMax);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out shapeModel3DID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SimplifyObjectModel3d(HTuple objectModel3D, HTuple method, HTuple amount, HTuple genParamName, HTuple genParamValue, out HTuple simplifiedObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1060);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, amount);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(amount);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out simplifiedObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceObjectModel3d(HTuple objectModel3DFrom, HTuple objectModel3DTo, HTuple pose, HTuple maxDistance, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1061);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3DFrom);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3DTo);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.Store(expr_0A, 3, maxDistance);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3DFrom);
			SZXCArimAPI.UnpinTuple(objectModel3DTo);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(maxDistance);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void UnionObjectModel3d(HTuple objectModels3D, HTuple method, out HTuple unionObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1062);
			SZXCArimAPI.Store(expr_0A, 0, objectModels3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModels3D);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, num, out unionObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetObjectModel3dAttribMod(HTuple objectModel3D, HTuple attribName, HTuple attachExtAttribTo, HTuple attribValues)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1063);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attribName);
			SZXCArimAPI.Store(expr_0A, 2, attachExtAttribTo);
			SZXCArimAPI.Store(expr_0A, 3, attribValues);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attachExtAttribTo);
			SZXCArimAPI.UnpinTuple(attribValues);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetObjectModel3dAttrib(HTuple objectModel3D, HTuple attribName, HTuple attachExtAttribTo, HTuple attribValues, out HTuple objectModel3DOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1064);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attribName);
			SZXCArimAPI.Store(expr_0A, 2, attachExtAttribTo);
			SZXCArimAPI.Store(expr_0A, 3, attribValues);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attribName);
			SZXCArimAPI.UnpinTuple(attachExtAttribTo);
			SZXCArimAPI.UnpinTuple(attribValues);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenEmptyObjectModel3d(out HTuple emptyObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1065);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out emptyObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SampleObjectModel3d(HTuple objectModel3D, HTuple method, HTuple sampleDistance, HTuple genParamName, HTuple genParamValue, out HTuple sampledObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1066);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, sampleDistance);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(sampleDistance);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampledObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RegisterObjectModel3dGlobal(HTuple objectModels3D, HTuple homMats3D, HTuple from, HTuple to, HTuple genParamName, HTuple genParamValue, out HTuple homMats3DOut, out HTuple scores)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1067);
			SZXCArimAPI.Store(expr_0A, 0, objectModels3D);
			SZXCArimAPI.Store(expr_0A, 1, homMats3D);
			SZXCArimAPI.Store(expr_0A, 2, from);
			SZXCArimAPI.Store(expr_0A, 3, to);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModels3D);
			SZXCArimAPI.UnpinTuple(homMats3D);
			SZXCArimAPI.UnpinTuple(from);
			SZXCArimAPI.UnpinTuple(to);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out homMats3DOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out scores);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RegisterObjectModel3dPair(HTuple objectModel3D1, HTuple objectModel3D2, HTuple method, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1068);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D1);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D2);
			SZXCArimAPI.Store(expr_0A, 2, method);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D1);
			SZXCArimAPI.UnpinTuple(objectModel3D2);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenObjectModel3dFromPoints(HTuple x, HTuple y, HTuple z, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1069);
			SZXCArimAPI.Store(expr_0A, 0, x);
			SZXCArimAPI.Store(expr_0A, 1, y);
			SZXCArimAPI.Store(expr_0A, 2, z);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(z);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenBoxObjectModel3d(HTuple pose, HTuple lengthX, HTuple lengthY, HTuple lengthZ, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1070);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.Store(expr_0A, 1, lengthX);
			SZXCArimAPI.Store(expr_0A, 2, lengthY);
			SZXCArimAPI.Store(expr_0A, 3, lengthZ);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(lengthX);
			SZXCArimAPI.UnpinTuple(lengthY);
			SZXCArimAPI.UnpinTuple(lengthZ);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenPlaneObjectModel3d(HTuple pose, HTuple XExtent, HTuple YExtent, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1071);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.Store(expr_0A, 1, XExtent);
			SZXCArimAPI.Store(expr_0A, 2, YExtent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(XExtent);
			SZXCArimAPI.UnpinTuple(YExtent);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenSphereObjectModel3dCenter(HTuple x, HTuple y, HTuple z, HTuple radius, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1072);
			SZXCArimAPI.Store(expr_0A, 0, x);
			SZXCArimAPI.Store(expr_0A, 1, y);
			SZXCArimAPI.Store(expr_0A, 2, z);
			SZXCArimAPI.Store(expr_0A, 3, radius);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(z);
			SZXCArimAPI.UnpinTuple(radius);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenSphereObjectModel3d(HTuple pose, HTuple radius, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1073);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(radius);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenCylinderObjectModel3d(HTuple pose, HTuple radius, HTuple minExtent, HTuple maxExtent, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1074);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.Store(expr_0A, 2, minExtent);
			SZXCArimAPI.Store(expr_0A, 3, maxExtent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(minExtent);
			SZXCArimAPI.UnpinTuple(maxExtent);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SmallestBoundingBoxObjectModel3d(HTuple objectModel3D, HTuple type, out HTuple pose, out HTuple length1, out HTuple length2, out HTuple length3)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1075);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, type);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(type);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out length2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length3);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SmallestSphereObjectModel3d(HTuple objectModel3D, out HTuple centerPoint, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1076);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out centerPoint);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectPlaneObjectModel3d(HTuple objectModel3D, HTuple plane, out HTuple objectModel3DIntersection)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1077);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, plane);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(plane);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DIntersection);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ConvexHullObjectModel3d(HTuple objectModel3D, out HTuple objectModel3DConvexHull)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1078);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DConvexHull);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectObjectModel3d(HTuple objectModel3D, HTuple feature, HTuple operation, HTuple minValue, HTuple maxValue, out HTuple objectModel3DSelected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1079);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, feature);
			SZXCArimAPI.Store(expr_0A, 2, operation);
			SZXCArimAPI.Store(expr_0A, 3, minValue);
			SZXCArimAPI.Store(expr_0A, 4, maxValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(minValue);
			SZXCArimAPI.UnpinTuple(maxValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DSelected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AreaObjectModel3d(HTuple objectModel3D, out HTuple area)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1080);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out area);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MaxDiameterObjectModel3d(HTuple objectModel3D, out HTuple diameter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1081);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out diameter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MomentsObjectModel3d(HTuple objectModel3D, HTuple momentsToCalculate, out HTuple moments)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1082);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, momentsToCalculate);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(momentsToCalculate);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out moments);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void VolumeObjectModel3dRelativeToPlane(HTuple objectModel3D, HTuple plane, HTuple mode, HTuple useFaceOrientation, out HTuple volume)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1083);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, plane);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, useFaceOrientation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(plane);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(useFaceOrientation);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out volume);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReduceObjectModel3dByView(HObject region, HTuple objectModel3D, HTuple camParam, HTuple pose, out HTuple objectModel3DReduced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1084);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, camParam);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void ConnectionObjectModel3d(HTuple objectModel3D, HTuple feature, HTuple value, out HTuple objectModel3DConnected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1085);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, feature);
			SZXCArimAPI.Store(expr_0A, 2, value);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(value);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DConnected);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectPointsObjectModel3d(HTuple objectModel3D, HTuple attrib, HTuple minValue, HTuple maxValue, out HTuple objectModel3DThresholded)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1086);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attrib);
			SZXCArimAPI.Store(expr_0A, 2, minValue);
			SZXCArimAPI.Store(expr_0A, 3, maxValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attrib);
			SZXCArimAPI.UnpinTuple(minValue);
			SZXCArimAPI.UnpinTuple(maxValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DThresholded);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDispObjectModel3dInfo(HTuple windowHandle, HTuple row, HTuple column, HTuple information, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1087);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, information);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(information);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RenderObjectModel3d(out HObject image, HTuple objectModel3D, HTuple camParam, HTuple pose, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1088);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, camParam);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DispObjectModel3d(HTuple windowHandle, HTuple objectModel3D, HTuple camParam, HTuple pose, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1089);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, camParam);
			SZXCArimAPI.Store(expr_0A, 3, pose);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CopyObjectModel3d(HTuple objectModel3D, HTuple attributes, out HTuple copiedObjectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1090);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attributes);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attributes);
			num = HTuple.LoadNew(expr_0A, 0, num, out copiedObjectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PrepareObjectModel3d(HTuple objectModel3D, HTuple purpose, HTuple overwriteData, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1091);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, purpose);
			SZXCArimAPI.Store(expr_0A, 2, overwriteData);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(purpose);
			SZXCArimAPI.UnpinTuple(overwriteData);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ObjectModel3dToXyz(out HObject x, out HObject y, out HObject z, HTuple objectModel3D, HTuple type, HTuple camParam, HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1092);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, type);
			SZXCArimAPI.Store(expr_0A, 2, camParam);
			SZXCArimAPI.Store(expr_0A, 3, pose);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			num = HObject.LoadNew(expr_0A, 1, num, out x);
			num = HObject.LoadNew(expr_0A, 2, num, out y);
			num = HObject.LoadNew(expr_0A, 3, num, out z);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void XyzToObjectModel3d(HObject x, HObject y, HObject z, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1093);
			SZXCArimAPI.Store(expr_0A, 1, x);
			SZXCArimAPI.Store(expr_0A, 2, y);
			SZXCArimAPI.Store(expr_0A, 3, z);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(x);
			GC.KeepAlive(y);
			GC.KeepAlive(z);
		}

		public static void GetObjectModel3dParams(HTuple objectModel3D, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1094);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectObjectModel3d(out HObject modelContours, HTuple objectModel3D, HTuple camParam, HTuple pose, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1095);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, camParam);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(camParam);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out modelContours);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RigidTransObjectModel3d(HTuple objectModel3D, HTuple pose, out HTuple objectModel3DRigidTrans)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1096);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DRigidTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectiveTransObjectModel3d(HTuple objectModel3D, HTuple homMat3D, out HTuple objectModel3DProjectiveTrans)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1097);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DProjectiveTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AffineTransObjectModel3d(HTuple objectModel3D, HTuple homMat3D, out HTuple objectModel3DAffineTrans)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1098);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DAffineTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllObjectModel3d()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1099);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearObjectModel3d(HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1100);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SerializeObjectModel3d(HTuple objectModel3D, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1101);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeObjectModel3d(HTuple serializedItemHandle, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1102);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteObjectModel3d(HTuple objectModel3D, HTuple fileType, HTuple fileName, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1103);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, fileType);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(fileType);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadObjectModel3d(HTuple fileName, HTuple scale, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3D, out HTuple status)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1104);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, scale);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			num = HTuple.LoadNew(expr_0A, 1, num, out status);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadKalman(HTuple fileName, out HTuple dimension, out HTuple model, out HTuple measurement, out HTuple prediction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1105);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out dimension);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out model);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out measurement);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out prediction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void UpdateKalman(HTuple fileName, HTuple dimensionIn, HTuple modelIn, HTuple measurementIn, out HTuple dimensionOut, out HTuple modelOut, out HTuple measurementOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1106);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, dimensionIn);
			SZXCArimAPI.Store(expr_0A, 2, modelIn);
			SZXCArimAPI.Store(expr_0A, 3, measurementIn);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(dimensionIn);
			SZXCArimAPI.UnpinTuple(modelIn);
			SZXCArimAPI.UnpinTuple(measurementIn);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out dimensionOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out modelOut);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out measurementOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FilterKalman(HTuple dimension, HTuple model, HTuple measurement, HTuple predictionIn, out HTuple predictionOut, out HTuple estimate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1107);
			SZXCArimAPI.Store(expr_0A, 0, dimension);
			SZXCArimAPI.Store(expr_0A, 1, model);
			SZXCArimAPI.Store(expr_0A, 2, measurement);
			SZXCArimAPI.Store(expr_0A, 3, predictionIn);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dimension);
			SZXCArimAPI.UnpinTuple(model);
			SZXCArimAPI.UnpinTuple(measurement);
			SZXCArimAPI.UnpinTuple(predictionIn);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out predictionOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out estimate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryOperatorInfo(out HTuple slots)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1108);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out slots);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryParamInfo(out HTuple slots)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1109);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out slots);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetOperatorName(HTuple pattern, out HTuple operatorNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1110);
			SZXCArimAPI.Store(expr_0A, 0, pattern);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pattern);
			num = HTuple.LoadNew(expr_0A, 0, num, out operatorNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamTypes(HTuple operatorName, out HTuple inpCtrlParType, out HTuple outpCtrlParType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1111);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			num = HTuple.LoadNew(expr_0A, 0, num, out inpCtrlParType);
			num = HTuple.LoadNew(expr_0A, 1, num, out outpCtrlParType);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamNum(HTuple operatorName, out HTuple CName, out HTuple inpObjPar, out HTuple outpObjPar, out HTuple inpCtrlPar, out HTuple outpCtrlPar, out HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1112);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			num = HTuple.LoadNew(expr_0A, 0, num, out CName);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out inpObjPar);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out outpObjPar);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out inpCtrlPar);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out outpCtrlPar);
			num = HTuple.LoadNew(expr_0A, 5, num, out type);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamNames(HTuple operatorName, out HTuple inpObjPar, out HTuple outpObjPar, out HTuple inpCtrlPar, out HTuple outpCtrlPar)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1113);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			num = HTuple.LoadNew(expr_0A, 0, num, out inpObjPar);
			num = HTuple.LoadNew(expr_0A, 1, num, out outpObjPar);
			num = HTuple.LoadNew(expr_0A, 2, num, out inpCtrlPar);
			num = HTuple.LoadNew(expr_0A, 3, num, out outpCtrlPar);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetOperatorInfo(HTuple operatorName, HTuple slot, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1114);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, slot);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(slot);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamInfo(HTuple operatorName, HTuple paramName, HTuple slot, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1115);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, paramName);
			SZXCArimAPI.Store(expr_0A, 2, slot);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(paramName);
			SZXCArimAPI.UnpinTuple(slot);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SearchOperator(HTuple keyword, out HTuple operatorNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1116);
			SZXCArimAPI.Store(expr_0A, 0, keyword);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(keyword);
			num = HTuple.LoadNew(expr_0A, 0, num, out operatorNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetKeywords(HTuple operatorName, out HTuple keywords)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1117);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			num = HTuple.LoadNew(expr_0A, 0, num, out keywords);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetChapterInfo(HTuple chapter, out HTuple info)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1118);
			SZXCArimAPI.Store(expr_0A, 0, chapter);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(chapter);
			num = HTuple.LoadNew(expr_0A, 0, num, out info);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ChannelsToImage(HObject images, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1119);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void ImageToChannels(HObject multiChannelImage, out HObject images)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1120);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out images);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Compose7(HObject image1, HObject image2, HObject image3, HObject image4, HObject image5, HObject image6, HObject image7, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1121);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.Store(expr_0A, 4, image4);
			SZXCArimAPI.Store(expr_0A, 5, image5);
			SZXCArimAPI.Store(expr_0A, 6, image6);
			SZXCArimAPI.Store(expr_0A, 7, image7);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
			GC.KeepAlive(image4);
			GC.KeepAlive(image5);
			GC.KeepAlive(image6);
			GC.KeepAlive(image7);
		}

		public static void Compose6(HObject image1, HObject image2, HObject image3, HObject image4, HObject image5, HObject image6, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1122);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.Store(expr_0A, 4, image4);
			SZXCArimAPI.Store(expr_0A, 5, image5);
			SZXCArimAPI.Store(expr_0A, 6, image6);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
			GC.KeepAlive(image4);
			GC.KeepAlive(image5);
			GC.KeepAlive(image6);
		}

		public static void Compose5(HObject image1, HObject image2, HObject image3, HObject image4, HObject image5, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1123);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.Store(expr_0A, 4, image4);
			SZXCArimAPI.Store(expr_0A, 5, image5);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
			GC.KeepAlive(image4);
			GC.KeepAlive(image5);
		}

		public static void Compose4(HObject image1, HObject image2, HObject image3, HObject image4, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1124);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.Store(expr_0A, 4, image4);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
			GC.KeepAlive(image4);
		}

		public static void Compose3(HObject image1, HObject image2, HObject image3, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1125);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
		}

		public static void Compose2(HObject image1, HObject image2, out HObject multiChannelImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1126);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out multiChannelImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void Decompose7(HObject multiChannelImage, out HObject image1, out HObject image2, out HObject image3, out HObject image4, out HObject image5, out HObject image6, out HObject image7)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1127);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			num = HObject.LoadNew(expr_0A, 3, num, out image3);
			num = HObject.LoadNew(expr_0A, 4, num, out image4);
			num = HObject.LoadNew(expr_0A, 5, num, out image5);
			num = HObject.LoadNew(expr_0A, 6, num, out image6);
			num = HObject.LoadNew(expr_0A, 7, num, out image7);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Decompose6(HObject multiChannelImage, out HObject image1, out HObject image2, out HObject image3, out HObject image4, out HObject image5, out HObject image6)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1128);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			num = HObject.LoadNew(expr_0A, 3, num, out image3);
			num = HObject.LoadNew(expr_0A, 4, num, out image4);
			num = HObject.LoadNew(expr_0A, 5, num, out image5);
			num = HObject.LoadNew(expr_0A, 6, num, out image6);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Decompose5(HObject multiChannelImage, out HObject image1, out HObject image2, out HObject image3, out HObject image4, out HObject image5)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1129);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			num = HObject.LoadNew(expr_0A, 3, num, out image3);
			num = HObject.LoadNew(expr_0A, 4, num, out image4);
			num = HObject.LoadNew(expr_0A, 5, num, out image5);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Decompose4(HObject multiChannelImage, out HObject image1, out HObject image2, out HObject image3, out HObject image4)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1130);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			num = HObject.LoadNew(expr_0A, 3, num, out image3);
			num = HObject.LoadNew(expr_0A, 4, num, out image4);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Decompose3(HObject multiChannelImage, out HObject image1, out HObject image2, out HObject image3)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1131);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			num = HObject.LoadNew(expr_0A, 3, num, out image3);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void Decompose2(HObject multiChannelImage, out HObject image1, out HObject image2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1132);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out image1);
			num = HObject.LoadNew(expr_0A, 2, num, out image2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void CountChannels(HObject multiChannelImage, out HTuple channels)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1133);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out channels);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void AppendChannel(HObject multiChannelImage, HObject image, out HObject imageExtended)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1134);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageExtended);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
			GC.KeepAlive(image);
		}

		public static void AccessChannel(HObject multiChannelImage, out HObject image, HTuple channel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1135);
			SZXCArimAPI.Store(expr_0A, 1, multiChannelImage);
			SZXCArimAPI.Store(expr_0A, 0, channel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(channel);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiChannelImage);
		}

		public static void TileImagesOffset(HObject images, out HObject tiledImage, HTuple offsetRow, HTuple offsetCol, HTuple row1, HTuple col1, HTuple row2, HTuple col2, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1136);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, offsetRow);
			SZXCArimAPI.Store(expr_0A, 1, offsetCol);
			SZXCArimAPI.Store(expr_0A, 2, row1);
			SZXCArimAPI.Store(expr_0A, 3, col1);
			SZXCArimAPI.Store(expr_0A, 4, row2);
			SZXCArimAPI.Store(expr_0A, 5, col2);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(offsetRow);
			SZXCArimAPI.UnpinTuple(offsetCol);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(col1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(col2);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out tiledImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void TileImages(HObject images, out HObject tiledImage, HTuple numColumns, HTuple tileOrder)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1137);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, numColumns);
			SZXCArimAPI.Store(expr_0A, 1, tileOrder);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numColumns);
			SZXCArimAPI.UnpinTuple(tileOrder);
			num = HObject.LoadNew(expr_0A, 1, num, out tiledImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void TileChannels(HObject image, out HObject tiledImage, HTuple numColumns, HTuple tileOrder)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1138);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, numColumns);
			SZXCArimAPI.Store(expr_0A, 1, tileOrder);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numColumns);
			SZXCArimAPI.UnpinTuple(tileOrder);
			num = HObject.LoadNew(expr_0A, 1, num, out tiledImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CropDomain(HObject image, out HObject imagePart)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1139);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePart);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CropRectangle1(HObject image, out HObject imagePart, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1140);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePart);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CropPart(HObject image, out HObject imagePart, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1141);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePart);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ChangeFormat(HObject image, out HObject imagePart, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1142);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePart);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ChangeDomain(HObject image, HObject newDomain, out HObject imageNew)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1143);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, newDomain);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageNew);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(newDomain);
		}

		public static void AddChannels(HObject regions, HObject image, out HObject grayRegions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1144);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out grayRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void Rectangle1Domain(HObject image, out HObject imageReduced, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1145);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HObject.LoadNew(expr_0A, 1, num, out imageReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ReduceDomain(HObject image, HObject region, out HObject imageReduced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1146);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void FullDomain(HObject image, out HObject imageFull)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1147);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFull);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetDomain(HObject image, out HObject domain)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1148);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out domain);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void HoughCircles(HObject regionIn, out HObject regionOut, HTuple radius, HTuple percent, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1149);
			SZXCArimAPI.Store(expr_0A, 1, regionIn);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.Store(expr_0A, 1, percent);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(percent);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out regionOut);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regionIn);
		}

		public static void HoughCircleTrans(HObject region, out HObject houghImage, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1150);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out houghImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void HoughLinesDir(HObject imageDir, out HObject houghImage, out HObject lines, HTuple directionUncertainty, HTuple angleResolution, HTuple smoothing, HTuple filterSize, HTuple threshold, HTuple angleGap, HTuple distGap, HTuple genLines, out HTuple angle, out HTuple dist)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1151);
			SZXCArimAPI.Store(expr_0A, 1, imageDir);
			SZXCArimAPI.Store(expr_0A, 0, directionUncertainty);
			SZXCArimAPI.Store(expr_0A, 1, angleResolution);
			SZXCArimAPI.Store(expr_0A, 2, smoothing);
			SZXCArimAPI.Store(expr_0A, 3, filterSize);
			SZXCArimAPI.Store(expr_0A, 4, threshold);
			SZXCArimAPI.Store(expr_0A, 5, angleGap);
			SZXCArimAPI.Store(expr_0A, 6, distGap);
			SZXCArimAPI.Store(expr_0A, 7, genLines);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(directionUncertainty);
			SZXCArimAPI.UnpinTuple(angleResolution);
			SZXCArimAPI.UnpinTuple(smoothing);
			SZXCArimAPI.UnpinTuple(filterSize);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(angleGap);
			SZXCArimAPI.UnpinTuple(distGap);
			SZXCArimAPI.UnpinTuple(genLines);
			num = HObject.LoadNew(expr_0A, 1, num, out houghImage);
			num = HObject.LoadNew(expr_0A, 2, num, out lines);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out dist);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageDir);
		}

		public static void HoughLineTransDir(HObject imageDir, out HObject houghImage, HTuple directionUncertainty, HTuple angleResolution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1152);
			SZXCArimAPI.Store(expr_0A, 1, imageDir);
			SZXCArimAPI.Store(expr_0A, 0, directionUncertainty);
			SZXCArimAPI.Store(expr_0A, 1, angleResolution);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(directionUncertainty);
			SZXCArimAPI.UnpinTuple(angleResolution);
			num = HObject.LoadNew(expr_0A, 1, num, out houghImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageDir);
		}

		public static void HoughLines(HObject regionIn, HTuple angleResolution, HTuple threshold, HTuple angleGap, HTuple distGap, out HTuple angle, out HTuple dist)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1153);
			SZXCArimAPI.Store(expr_0A, 1, regionIn);
			SZXCArimAPI.Store(expr_0A, 0, angleResolution);
			SZXCArimAPI.Store(expr_0A, 1, threshold);
			SZXCArimAPI.Store(expr_0A, 2, angleGap);
			SZXCArimAPI.Store(expr_0A, 3, distGap);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(angleResolution);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(angleGap);
			SZXCArimAPI.UnpinTuple(distGap);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out dist);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regionIn);
		}

		public static void HoughLineTrans(HObject region, out HObject houghImage, HTuple angleResolution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1154);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, angleResolution);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(angleResolution);
			num = HObject.LoadNew(expr_0A, 1, num, out houghImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void SelectMatchingLines(HObject regionIn, out HObject regionLines, HTuple angleIn, HTuple distIn, HTuple lineWidth, HTuple thresh, out HTuple angleOut, out HTuple distOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1155);
			SZXCArimAPI.Store(expr_0A, 1, regionIn);
			SZXCArimAPI.Store(expr_0A, 0, angleIn);
			SZXCArimAPI.Store(expr_0A, 1, distIn);
			SZXCArimAPI.Store(expr_0A, 2, lineWidth);
			SZXCArimAPI.Store(expr_0A, 3, thresh);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(angleIn);
			SZXCArimAPI.UnpinTuple(distIn);
			SZXCArimAPI.UnpinTuple(lineWidth);
			SZXCArimAPI.UnpinTuple(thresh);
			num = HObject.LoadNew(expr_0A, 1, num, out regionLines);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out angleOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distOut);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regionIn);
		}

		public static void FindRectificationGrid(HObject image, out HObject gridRegion, HTuple minContrast, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1156);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, minContrast);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minContrast);
			SZXCArimAPI.UnpinTuple(radius);
			num = HObject.LoadNew(expr_0A, 1, num, out gridRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CreateRectificationGrid(HTuple width, HTuple numSquares, HTuple gridFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1157);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, numSquares);
			SZXCArimAPI.Store(expr_0A, 2, gridFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(numSquares);
			SZXCArimAPI.UnpinTuple(gridFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ConnectGridPoints(HObject image, out HObject connectingLines, HTuple row, HTuple column, HTuple sigma, HTuple maxDist)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1158);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, sigma);
			SZXCArimAPI.Store(expr_0A, 3, maxDist);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(maxDist);
			num = HObject.LoadNew(expr_0A, 1, num, out connectingLines);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GenGridRectificationMap(HObject image, HObject connectingLines, out HObject map, out HObject meshes, HTuple gridSpacing, HTuple rotation, HTuple row, HTuple column, HTuple mapType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1159);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, connectingLines);
			SZXCArimAPI.Store(expr_0A, 0, gridSpacing);
			SZXCArimAPI.Store(expr_0A, 1, rotation);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.Store(expr_0A, 4, mapType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gridSpacing);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(mapType);
			num = HObject.LoadNew(expr_0A, 1, num, out map);
			num = HObject.LoadNew(expr_0A, 2, num, out meshes);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(connectingLines);
		}

		public static void GenArbitraryDistortionMap(out HObject map, HTuple gridSpacing, HTuple row, HTuple column, HTuple gridWidth, HTuple imageWidth, HTuple imageHeight, HTuple mapType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1160);
			SZXCArimAPI.Store(expr_0A, 0, gridSpacing);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, gridWidth);
			SZXCArimAPI.Store(expr_0A, 4, imageWidth);
			SZXCArimAPI.Store(expr_0A, 5, imageHeight);
			SZXCArimAPI.Store(expr_0A, 6, mapType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gridSpacing);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(gridWidth);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(mapType);
			num = HObject.LoadNew(expr_0A, 1, num, out map);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetWindowBackgroundImage(out HObject backgroundImage, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1161);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out backgroundImage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDrawingObjectCallback(HTuple drawHandle, HTuple drawObjectEvent, HTuple callbackFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1162);
			SZXCArimAPI.Store(expr_0A, 0, drawHandle);
			SZXCArimAPI.Store(expr_0A, 1, drawObjectEvent);
			SZXCArimAPI.Store(expr_0A, 2, callbackFunction);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawHandle);
			SZXCArimAPI.UnpinTuple(drawObjectEvent);
			SZXCArimAPI.UnpinTuple(callbackFunction);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DetachBackgroundFromWindow(HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1163);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AttachBackgroundToWindow(HObject image, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1164);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void DetachDrawingObjectFromWindow(HTuple windowHandle, HTuple drawHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1165);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, drawHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(drawHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AttachDrawingObjectToWindow(HTuple windowHandle, HTuple drawHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1166);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, drawHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(drawHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void UpdateWindowPose(HTuple windowHandle, HTuple lastRow, HTuple lastCol, HTuple currentRow, HTuple currentCol, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1167);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, lastRow);
			SZXCArimAPI.Store(expr_0A, 2, lastCol);
			SZXCArimAPI.Store(expr_0A, 3, currentRow);
			SZXCArimAPI.Store(expr_0A, 4, currentCol);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(lastRow);
			SZXCArimAPI.UnpinTuple(lastCol);
			SZXCArimAPI.UnpinTuple(currentRow);
			SZXCArimAPI.UnpinTuple(currentCol);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void UnprojectCoordinates(HObject image, HTuple windowHandle, HTuple row, HTuple column, out HTuple imageRow, out HTuple imageColumn, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1168);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out imageRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out imageColumn);
			num = HTuple.LoadNew(expr_0A, 2, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GetOsWindowHandle(HTuple windowHandle, out HTuple OSWindowHandle, out HTuple OSDisplayHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1169);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out OSWindowHandle);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out OSDisplayHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetWindowDc(HTuple windowHandle, HTuple WINHDC)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1170);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, WINHDC);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(WINHDC);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void NewExternWindow(HTuple WINHWnd, HTuple row, HTuple column, HTuple width, HTuple height, out HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1171);
			SZXCArimAPI.Store(expr_0A, 0, WINHWnd);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(WINHWnd);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HTuple.LoadNew(expr_0A, 0, num, out windowHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SlideImage(HTuple windowHandleSource1, HTuple windowHandleSource2, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1172);
			SZXCArimAPI.Store(expr_0A, 0, windowHandleSource1);
			SZXCArimAPI.Store(expr_0A, 1, windowHandleSource2);
			SZXCArimAPI.Store(expr_0A, 2, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandleSource1);
			SZXCArimAPI.UnpinTuple(windowHandleSource2);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetWindowType(HTuple windowType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1173);
			SZXCArimAPI.Store(expr_0A, 0, windowType);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowType);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetWindowExtents(HTuple windowHandle, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1174);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetWindowAttr(HTuple attributeName, out HTuple attributeValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1175);
			SZXCArimAPI.Store(expr_0A, 0, attributeName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attributeName);
			num = HTuple.LoadNew(expr_0A, 0, num, out attributeValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetWindowAttr(HTuple attributeName, HTuple attributeValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1176);
			SZXCArimAPI.Store(expr_0A, 0, attributeName);
			SZXCArimAPI.Store(expr_0A, 1, attributeValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(attributeName);
			SZXCArimAPI.UnpinTuple(attributeValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void QueryWindowType(out HTuple windowTypes)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1177);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out windowTypes);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OpenWindow(HTuple row, HTuple column, HTuple width, HTuple height, HTuple fatherWindow, HTuple mode, HTuple machine, out HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1178);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.Store(expr_0A, 4, fatherWindow);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			SZXCArimAPI.Store(expr_0A, 6, machine);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(fatherWindow);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(machine);
			num = HTuple.LoadNew(expr_0A, 0, num, out windowHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OpenTextwindow(HTuple row, HTuple column, HTuple width, HTuple height, HTuple borderWidth, HTuple borderColor, HTuple backgroundColor, HTuple fatherWindow, HTuple mode, HTuple machine, out HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1179);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.Store(expr_0A, 4, borderWidth);
			SZXCArimAPI.Store(expr_0A, 5, borderColor);
			SZXCArimAPI.Store(expr_0A, 6, backgroundColor);
			SZXCArimAPI.Store(expr_0A, 7, fatherWindow);
			SZXCArimAPI.Store(expr_0A, 8, mode);
			SZXCArimAPI.Store(expr_0A, 9, machine);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(borderWidth);
			SZXCArimAPI.UnpinTuple(borderColor);
			SZXCArimAPI.UnpinTuple(backgroundColor);
			SZXCArimAPI.UnpinTuple(fatherWindow);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(machine);
			num = HTuple.LoadNew(expr_0A, 0, num, out windowHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MoveRectangle(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2, HTuple destRow, HTuple destColumn)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1180);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			SZXCArimAPI.Store(expr_0A, 5, destRow);
			SZXCArimAPI.Store(expr_0A, 6, destColumn);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.UnpinTuple(destRow);
			SZXCArimAPI.UnpinTuple(destColumn);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetWindowType(HTuple windowHandle, out HTuple windowType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1181);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out windowType);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetWindowPointer3(HTuple windowHandle, out HTuple imageRed, out HTuple imageGreen, out HTuple imageBlue, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1182);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out imageRed);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out imageGreen);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out imageBlue);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetWindowExtents(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1183);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DumpWindowImage(out HObject image, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1184);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DumpWindow(HTuple windowHandle, HTuple device, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1185);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, device);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(device);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CopyRectangle(HTuple windowHandleSource, HTuple windowHandleDestination, HTuple row1, HTuple column1, HTuple row2, HTuple column2, HTuple destRow, HTuple destColumn)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1186);
			SZXCArimAPI.Store(expr_0A, 0, windowHandleSource);
			SZXCArimAPI.Store(expr_0A, 1, windowHandleDestination);
			SZXCArimAPI.Store(expr_0A, 2, row1);
			SZXCArimAPI.Store(expr_0A, 3, column1);
			SZXCArimAPI.Store(expr_0A, 4, row2);
			SZXCArimAPI.Store(expr_0A, 5, column2);
			SZXCArimAPI.Store(expr_0A, 6, destRow);
			SZXCArimAPI.Store(expr_0A, 7, destColumn);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandleSource);
			SZXCArimAPI.UnpinTuple(windowHandleDestination);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.UnpinTuple(destRow);
			SZXCArimAPI.UnpinTuple(destColumn);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseWindow(HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1187);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearWindow(HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1188);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearRectangle(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1189);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteString(HTuple windowHandle, HTuple stringVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1190);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, stringVal);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetTshape(HTuple windowHandle, HTuple textCursor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1191);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, textCursor);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(textCursor);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetTposition(HTuple windowHandle, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1192);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadString(HTuple windowHandle, HTuple inString, HTuple length, out HTuple outString)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1193);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, inString);
			SZXCArimAPI.Store(expr_0A, 2, length);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(inString);
			SZXCArimAPI.UnpinTuple(length);
			num = HTuple.LoadNew(expr_0A, 0, num, out outString);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadChar(HTuple windowHandle, out HTuple charVal, out HTuple code)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1194);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out charVal);
			num = HTuple.LoadNew(expr_0A, 1, num, out code);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void NewLine(HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1195);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetTshape(HTuple windowHandle, out HTuple textCursor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1196);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out textCursor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTposition(HTuple windowHandle, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1197);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetFontExtents(HTuple windowHandle, out HTuple maxAscent, out HTuple maxDescent, out HTuple maxWidth, out HTuple maxHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1198);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out maxAscent);
			num = HTuple.LoadNew(expr_0A, 1, num, out maxDescent);
			num = HTuple.LoadNew(expr_0A, 2, num, out maxWidth);
			num = HTuple.LoadNew(expr_0A, 3, num, out maxHeight);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetStringExtents(HTuple windowHandle, HTuple values, out HTuple ascent, out HTuple descent, out HTuple width, out HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1199);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, values);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(values);
			num = HTuple.LoadNew(expr_0A, 0, num, out ascent);
			num = HTuple.LoadNew(expr_0A, 1, num, out descent);
			num = HTuple.LoadNew(expr_0A, 2, num, out width);
			num = HTuple.LoadNew(expr_0A, 3, num, out height);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryFont(HTuple windowHandle, out HTuple font)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1200);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out font);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryTshape(HTuple windowHandle, out HTuple textCursor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1201);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out textCursor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFont(HTuple windowHandle, HTuple font)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1202);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, font);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(font);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFont(HTuple windowHandle, out HTuple font)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1203);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out font);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDisplayScene3dInfo(HTuple windowHandle, HTuple scene3D, HTuple row, HTuple column, HTuple information, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1204);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, scene3D);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.Store(expr_0A, 4, information);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(information);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetScene3dToWorldPose(HTuple scene3D, HTuple toWorldPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1205);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, toWorldPose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(toWorldPose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dParam(HTuple scene3D, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1206);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dLightParam(HTuple scene3D, HTuple lightIndex, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1207);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, lightIndex);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(lightIndex);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dInstancePose(HTuple scene3D, HTuple instanceIndex, HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1208);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, instanceIndex);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(instanceIndex);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dInstanceParam(HTuple scene3D, HTuple instanceIndex, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1209);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, instanceIndex);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(instanceIndex);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dCameraPose(HTuple scene3D, HTuple cameraIndex, HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1210);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, cameraIndex);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(cameraIndex);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RenderScene3d(out HObject image, HTuple scene3D, HTuple cameraIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1211);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, cameraIndex);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(cameraIndex);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveScene3dLight(HTuple scene3D, HTuple lightIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1212);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, lightIndex);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(lightIndex);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RemoveScene3dInstance(HTuple scene3D, HTuple instanceIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1213);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, instanceIndex);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(instanceIndex);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RemoveScene3dCamera(HTuple scene3D, HTuple cameraIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1214);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, cameraIndex);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(cameraIndex);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DisplayScene3d(HTuple windowHandle, HTuple scene3D, HTuple cameraIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1215);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, scene3D);
			SZXCArimAPI.Store(expr_0A, 2, cameraIndex);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(cameraIndex);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddScene3dLight(HTuple scene3D, HTuple lightPosition, HTuple lightKind, out HTuple lightIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1216);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, lightPosition);
			SZXCArimAPI.Store(expr_0A, 2, lightKind);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(lightPosition);
			SZXCArimAPI.UnpinTuple(lightKind);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out lightIndex);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddScene3dInstance(HTuple scene3D, HTuple objectModel3D, HTuple pose, out HTuple instanceIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1217);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out instanceIndex);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddScene3dCamera(HTuple scene3D, HTuple cameraParam, out HTuple cameraIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1218);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, cameraParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(cameraParam);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out cameraIndex);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearScene3d(HTuple scene3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1219);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateScene3d(out HTuple scene3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1220);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out scene3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetWindowParam(HTuple windowHandle, HTuple param, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1221);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, param);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(param);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetWindowParam(HTuple windowHandle, HTuple param, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1222);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, param);
			SZXCArimAPI.Store(expr_0A, 2, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(param);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetShape(HTuple windowHandle, HTuple shape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1223);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, shape);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(shape);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetRgb(HTuple windowHandle, HTuple red, HTuple green, HTuple blue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1224);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, red);
			SZXCArimAPI.Store(expr_0A, 2, green);
			SZXCArimAPI.Store(expr_0A, 3, blue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(red);
			SZXCArimAPI.UnpinTuple(green);
			SZXCArimAPI.UnpinTuple(blue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetPixel(HTuple windowHandle, HTuple pixel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1225);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, pixel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(pixel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetPartStyle(HTuple windowHandle, HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1226);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, style);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(style);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetPart(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1227);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetPaint(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1228);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetLineWidth(HTuple windowHandle, HTuple width)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1229);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, width);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetLineStyle(HTuple windowHandle, HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1230);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, style);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(style);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetLineApprox(HTuple windowHandle, HTuple approximation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1231);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, approximation);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(approximation);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetInsert(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1232);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetHsi(HTuple windowHandle, HTuple hue, HTuple saturation, HTuple intensity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1233);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, hue);
			SZXCArimAPI.Store(expr_0A, 2, saturation);
			SZXCArimAPI.Store(expr_0A, 3, intensity);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(hue);
			SZXCArimAPI.UnpinTuple(saturation);
			SZXCArimAPI.UnpinTuple(intensity);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetGray(HTuple windowHandle, HTuple grayValues)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1234);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, grayValues);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(grayValues);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetDraw(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1235);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetComprise(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1236);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetColored(HTuple windowHandle, HTuple numberOfColors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1237);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, numberOfColors);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(numberOfColors);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetColor(HTuple windowHandle, HTuple color)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1238);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, color);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(color);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetShape(HTuple windowHandle, out HTuple displayShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1239);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out displayShape);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetRgb(HTuple windowHandle, out HTuple red, out HTuple green, out HTuple blue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1240);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out red);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out green);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out blue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPixel(HTuple windowHandle, out HTuple pixel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1241);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out pixel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPartStyle(HTuple windowHandle, out HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1242);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out style);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPart(HTuple windowHandle, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1243);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPaint(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1244);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetLineWidth(HTuple windowHandle, out HTuple width)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1245);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out width);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetLineStyle(HTuple windowHandle, out HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1246);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out style);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetLineApprox(HTuple windowHandle, out HTuple approximation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1247);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out approximation);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetInsert(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1248);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetHsi(HTuple windowHandle, out HTuple hue, out HTuple saturation, out HTuple intensity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1249);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out hue);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out saturation);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out intensity);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDraw(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1250);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetComprise(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1251);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryShape(out HTuple displayShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1252);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out displayShape);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryPaint(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1253);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryLineWidth(out HTuple min, out HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1254);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out min);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out max);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryInsert(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1255);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryGray(HTuple windowHandle, out HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1256);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out grayval);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryColored(out HTuple possibleNumberOfColors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1257);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out possibleNumberOfColors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryAllColors(HTuple windowHandle, out HTuple colors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1258);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out colors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryColor(HTuple windowHandle, out HTuple colors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1259);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out colors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetIcon(out HObject icon, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1260);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out icon);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetIcon(HObject icon, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1261);
			SZXCArimAPI.Store(expr_0A, 1, icon);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(icon);
		}

		public static void DispRegion(HObject dispRegions, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1262);
			SZXCArimAPI.Store(expr_0A, 1, dispRegions);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(dispRegions);
		}

		public static void DispRectangle2(HTuple windowHandle, HTuple centerRow, HTuple centerCol, HTuple phi, HTuple length1, HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1263);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, centerRow);
			SZXCArimAPI.Store(expr_0A, 2, centerCol);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, length1);
			SZXCArimAPI.Store(expr_0A, 5, length2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispRectangle1(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1264);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispPolygon(HTuple windowHandle, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1265);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispLine(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1266);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispCross(HTuple windowHandle, HTuple row, HTuple column, HTuple size, HTuple angle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1267);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, size);
			SZXCArimAPI.Store(expr_0A, 4, angle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(size);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispImage(HObject image, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1268);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void DispChannel(HObject multichannelImage, HTuple windowHandle, HTuple channel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1269);
			SZXCArimAPI.Store(expr_0A, 1, multichannelImage);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, channel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(channel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(multichannelImage);
		}

		public static void DispColor(HObject colorImage, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1270);
			SZXCArimAPI.Store(expr_0A, 1, colorImage);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(colorImage);
		}

		public static void DispEllipse(HTuple windowHandle, HTuple centerRow, HTuple centerCol, HTuple phi, HTuple radius1, HTuple radius2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1271);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, centerRow);
			SZXCArimAPI.Store(expr_0A, 2, centerCol);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, radius1);
			SZXCArimAPI.Store(expr_0A, 5, radius2);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispDistribution(HTuple windowHandle, HTuple distribution, HTuple row, HTuple column, HTuple scale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1272);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, distribution);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.Store(expr_0A, 4, scale);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(distribution);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispCircle(HTuple windowHandle, HTuple row, HTuple column, HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1273);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, radius);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispArrow(HTuple windowHandle, HTuple row1, HTuple column1, HTuple row2, HTuple column2, HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1274);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1);
			SZXCArimAPI.Store(expr_0A, 2, column1);
			SZXCArimAPI.Store(expr_0A, 3, row2);
			SZXCArimAPI.Store(expr_0A, 4, column2);
			SZXCArimAPI.Store(expr_0A, 5, size);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			SZXCArimAPI.UnpinTuple(size);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispArc(HTuple windowHandle, HTuple centerRow, HTuple centerCol, HTuple angle, HTuple beginRow, HTuple beginCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1275);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, centerRow);
			SZXCArimAPI.Store(expr_0A, 2, centerCol);
			SZXCArimAPI.Store(expr_0A, 3, angle);
			SZXCArimAPI.Store(expr_0A, 4, beginRow);
			SZXCArimAPI.Store(expr_0A, 5, beginCol);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.UnpinTuple(beginRow);
			SZXCArimAPI.UnpinTuple(beginCol);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispObj(HObject objectVal, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1276);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(objectVal);
		}

		public static void SetMshape(HTuple windowHandle, HTuple cursor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1277);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, cursor);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(cursor);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetMshape(HTuple windowHandle, out HTuple cursor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1278);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out cursor);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryMshape(HTuple windowHandle, out HTuple shapeNames)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1279);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out shapeNames);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMpositionSubPix(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple button)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1280);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out button);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMposition(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple button)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1281);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out button);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMbuttonSubPix(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple button)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1282);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out button);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetMbutton(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple button)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1283);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out button);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteLut(HTuple windowHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1284);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DispLut(HTuple windowHandle, HTuple row, HTuple column, HTuple scale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1285);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void QueryLut(HTuple windowHandle, out HTuple lookUpTable)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1286);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out lookUpTable);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetLutStyle(HTuple windowHandle, out HTuple hue, out HTuple saturation, out HTuple intensity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1287);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out hue);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out saturation);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out intensity);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetLutStyle(HTuple windowHandle, HTuple hue, HTuple saturation, HTuple intensity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1288);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, hue);
			SZXCArimAPI.Store(expr_0A, 2, saturation);
			SZXCArimAPI.Store(expr_0A, 3, intensity);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(hue);
			SZXCArimAPI.UnpinTuple(saturation);
			SZXCArimAPI.UnpinTuple(intensity);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetLut(HTuple windowHandle, out HTuple lookUpTable)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1289);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out lookUpTable);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetLut(HTuple windowHandle, HTuple lookUpTable)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1290);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, lookUpTable);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(lookUpTable);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFix(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1291);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFix(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1292);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFixedLut(HTuple windowHandle, out HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1293);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out mode);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFixedLut(HTuple windowHandle, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1294);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GnuplotPlotFunct1d(HTuple gnuplotFileID, HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1295);
			SZXCArimAPI.Store(expr_0A, 0, gnuplotFileID);
			SZXCArimAPI.Store(expr_0A, 1, function);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gnuplotFileID);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GnuplotPlotCtrl(HTuple gnuplotFileID, HTuple values)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1296);
			SZXCArimAPI.Store(expr_0A, 0, gnuplotFileID);
			SZXCArimAPI.Store(expr_0A, 1, values);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gnuplotFileID);
			SZXCArimAPI.UnpinTuple(values);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GnuplotPlotImage(HObject image, HTuple gnuplotFileID, HTuple samplesX, HTuple samplesY, HTuple viewRotX, HTuple viewRotZ, HTuple hidden3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1297);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, gnuplotFileID);
			SZXCArimAPI.Store(expr_0A, 1, samplesX);
			SZXCArimAPI.Store(expr_0A, 2, samplesY);
			SZXCArimAPI.Store(expr_0A, 3, viewRotX);
			SZXCArimAPI.Store(expr_0A, 4, viewRotZ);
			SZXCArimAPI.Store(expr_0A, 5, hidden3D);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gnuplotFileID);
			SZXCArimAPI.UnpinTuple(samplesX);
			SZXCArimAPI.UnpinTuple(samplesY);
			SZXCArimAPI.UnpinTuple(viewRotX);
			SZXCArimAPI.UnpinTuple(viewRotZ);
			SZXCArimAPI.UnpinTuple(hidden3D);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void GnuplotClose(HTuple gnuplotFileID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1298);
			SZXCArimAPI.Store(expr_0A, 0, gnuplotFileID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gnuplotFileID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GnuplotOpenFile(HTuple fileName, out HTuple gnuplotFileID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1299);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out gnuplotFileID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GnuplotOpenPipe(out HTuple gnuplotFileID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1300);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out gnuplotFileID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectText(HTuple row, HTuple column, HTuple stringVal, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1301);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, stringVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(stringVal);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDrawingObjectIconic(out HObject objectVal, HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1302);
			SZXCArimAPI.Store(expr_0A, 0, drawID);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawID);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearDrawingObject(HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1303);
			SZXCArimAPI.Store(expr_0A, 0, drawID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetDrawingObjectParams(HTuple drawID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1304);
			SZXCArimAPI.Store(expr_0A, 0, drawID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDrawingObjectParams(HTuple drawID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1305);
			SZXCArimAPI.Store(expr_0A, 0, drawID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDrawingObjectXld(HObject contour, HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1306);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, drawID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(drawID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(contour);
		}

		public static void CreateDrawingObjectXld(HTuple row, HTuple column, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1307);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectCircleSector(HTuple row, HTuple column, HTuple radius, HTuple startAngle, HTuple endAngle, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1308);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.Store(expr_0A, 3, startAngle);
			SZXCArimAPI.Store(expr_0A, 4, endAngle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(startAngle);
			SZXCArimAPI.UnpinTuple(endAngle);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectEllipseSector(HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, HTuple startAngle, HTuple endAngle, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1309);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, radius1);
			SZXCArimAPI.Store(expr_0A, 4, radius2);
			SZXCArimAPI.Store(expr_0A, 5, startAngle);
			SZXCArimAPI.Store(expr_0A, 6, endAngle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			SZXCArimAPI.UnpinTuple(startAngle);
			SZXCArimAPI.UnpinTuple(endAngle);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectLine(HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1310);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectCircle(HTuple row, HTuple column, HTuple radius, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1311);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, radius);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(radius);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectEllipse(HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1312);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, radius1);
			SZXCArimAPI.Store(expr_0A, 4, radius2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectRectangle2(HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1313);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, length1);
			SZXCArimAPI.Store(expr_0A, 4, length2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDrawingObjectRectangle1(HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple drawID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1314);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, num, out drawID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DragRegion3(HObject sourceRegion, HObject maskRegion, out HObject destinationRegion, HTuple windowHandle, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1315);
			SZXCArimAPI.Store(expr_0A, 1, sourceRegion);
			SZXCArimAPI.Store(expr_0A, 2, maskRegion);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out destinationRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(sourceRegion);
			GC.KeepAlive(maskRegion);
		}

		public static void DragRegion2(HObject sourceRegion, out HObject destinationRegion, HTuple windowHandle, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1316);
			SZXCArimAPI.Store(expr_0A, 1, sourceRegion);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out destinationRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(sourceRegion);
		}

		public static void DragRegion1(HObject sourceRegion, out HObject destinationRegion, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1317);
			SZXCArimAPI.Store(expr_0A, 1, sourceRegion);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out destinationRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(sourceRegion);
		}

		public static void DrawNurbsInterpMod(out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio, HTuple edit, HTuple degree, HTuple rowsIn, HTuple colsIn, HTuple tangentsIn, out HTuple controlRows, out HTuple controlCols, out HTuple knots, out HTuple rows, out HTuple cols, out HTuple tangents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1318);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.Store(expr_0A, 5, edit);
			SZXCArimAPI.Store(expr_0A, 6, degree);
			SZXCArimAPI.Store(expr_0A, 7, rowsIn);
			SZXCArimAPI.Store(expr_0A, 8, colsIn);
			SZXCArimAPI.Store(expr_0A, 9, tangentsIn);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			SZXCArimAPI.UnpinTuple(edit);
			SZXCArimAPI.UnpinTuple(degree);
			SZXCArimAPI.UnpinTuple(rowsIn);
			SZXCArimAPI.UnpinTuple(colsIn);
			SZXCArimAPI.UnpinTuple(tangentsIn);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out controlRows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out controlCols);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out knots);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rows);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out cols);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out tangents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawNurbsInterp(out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio, HTuple degree, out HTuple controlRows, out HTuple controlCols, out HTuple knots, out HTuple rows, out HTuple cols, out HTuple tangents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1319);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.Store(expr_0A, 5, degree);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			SZXCArimAPI.UnpinTuple(degree);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out controlRows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out controlCols);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out knots);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out rows);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out cols);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out tangents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawNurbsMod(out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio, HTuple edit, HTuple degree, HTuple rowsIn, HTuple colsIn, HTuple weightsIn, out HTuple rows, out HTuple cols, out HTuple weights)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1320);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.Store(expr_0A, 5, edit);
			SZXCArimAPI.Store(expr_0A, 6, degree);
			SZXCArimAPI.Store(expr_0A, 7, rowsIn);
			SZXCArimAPI.Store(expr_0A, 8, colsIn);
			SZXCArimAPI.Store(expr_0A, 9, weightsIn);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			SZXCArimAPI.UnpinTuple(edit);
			SZXCArimAPI.UnpinTuple(degree);
			SZXCArimAPI.UnpinTuple(rowsIn);
			SZXCArimAPI.UnpinTuple(colsIn);
			SZXCArimAPI.UnpinTuple(weightsIn);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cols);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out weights);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawNurbs(out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio, HTuple degree, out HTuple rows, out HTuple cols, out HTuple weights)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1321);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.Store(expr_0A, 5, degree);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			SZXCArimAPI.UnpinTuple(degree);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rows);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cols);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out weights);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawXldMod(HObject contIn, out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio, HTuple edit)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1322);
			SZXCArimAPI.Store(expr_0A, 1, contIn);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.Store(expr_0A, 5, edit);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			SZXCArimAPI.UnpinTuple(edit);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contIn);
		}

		public static void DrawXld(out HObject contOut, HTuple windowHandle, HTuple rotate, HTuple move, HTuple scale, HTuple keepRatio)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1323);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rotate);
			SZXCArimAPI.Store(expr_0A, 2, move);
			SZXCArimAPI.Store(expr_0A, 3, scale);
			SZXCArimAPI.Store(expr_0A, 4, keepRatio);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rotate);
			SZXCArimAPI.UnpinTuple(move);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(keepRatio);
			num = HObject.LoadNew(expr_0A, 1, num, out contOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawRectangle2Mod(HTuple windowHandle, HTuple rowIn, HTuple columnIn, HTuple phiIn, HTuple length1In, HTuple length2In, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1324);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowIn);
			SZXCArimAPI.Store(expr_0A, 2, columnIn);
			SZXCArimAPI.Store(expr_0A, 3, phiIn);
			SZXCArimAPI.Store(expr_0A, 4, length1In);
			SZXCArimAPI.Store(expr_0A, 5, length2In);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowIn);
			SZXCArimAPI.UnpinTuple(columnIn);
			SZXCArimAPI.UnpinTuple(phiIn);
			SZXCArimAPI.UnpinTuple(length1In);
			SZXCArimAPI.UnpinTuple(length2In);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out length2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawRectangle2(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1325);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out length2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawRectangle1Mod(HTuple windowHandle, HTuple row1In, HTuple column1In, HTuple row2In, HTuple column2In, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1326);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1In);
			SZXCArimAPI.Store(expr_0A, 2, column1In);
			SZXCArimAPI.Store(expr_0A, 3, row2In);
			SZXCArimAPI.Store(expr_0A, 4, column2In);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1In);
			SZXCArimAPI.UnpinTuple(column1In);
			SZXCArimAPI.UnpinTuple(row2In);
			SZXCArimAPI.UnpinTuple(column2In);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawRectangle1(HTuple windowHandle, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1327);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawPointMod(HTuple windowHandle, HTuple rowIn, HTuple columnIn, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1328);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowIn);
			SZXCArimAPI.Store(expr_0A, 2, columnIn);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowIn);
			SZXCArimAPI.UnpinTuple(columnIn);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawPoint(HTuple windowHandle, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1329);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawLineMod(HTuple windowHandle, HTuple row1In, HTuple column1In, HTuple row2In, HTuple column2In, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1330);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row1In);
			SZXCArimAPI.Store(expr_0A, 2, column1In);
			SZXCArimAPI.Store(expr_0A, 3, row2In);
			SZXCArimAPI.Store(expr_0A, 4, column2In);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row1In);
			SZXCArimAPI.UnpinTuple(column1In);
			SZXCArimAPI.UnpinTuple(row2In);
			SZXCArimAPI.UnpinTuple(column2In);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawLine(HTuple windowHandle, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1331);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawEllipseMod(HTuple windowHandle, HTuple rowIn, HTuple columnIn, HTuple phiIn, HTuple radius1In, HTuple radius2In, out HTuple row, out HTuple column, out HTuple phi, out HTuple radius1, out HTuple radius2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1332);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowIn);
			SZXCArimAPI.Store(expr_0A, 2, columnIn);
			SZXCArimAPI.Store(expr_0A, 3, phiIn);
			SZXCArimAPI.Store(expr_0A, 4, radius1In);
			SZXCArimAPI.Store(expr_0A, 5, radius2In);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowIn);
			SZXCArimAPI.UnpinTuple(columnIn);
			SZXCArimAPI.UnpinTuple(phiIn);
			SZXCArimAPI.UnpinTuple(radius1In);
			SZXCArimAPI.UnpinTuple(radius2In);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out radius1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out radius2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawEllipse(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple phi, out HTuple radius1, out HTuple radius2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1333);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out radius1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out radius2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawCircleMod(HTuple windowHandle, HTuple rowIn, HTuple columnIn, HTuple radiusIn, out HTuple row, out HTuple column, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1334);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowIn);
			SZXCArimAPI.Store(expr_0A, 2, columnIn);
			SZXCArimAPI.Store(expr_0A, 3, radiusIn);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowIn);
			SZXCArimAPI.UnpinTuple(columnIn);
			SZXCArimAPI.UnpinTuple(radiusIn);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawCircle(HTuple windowHandle, out HTuple row, out HTuple column, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1335);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawRegion(out HObject region, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1336);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DrawPolygon(out HObject polygonRegion, HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1337);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out polygonRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectionPl(HTuple row, HTuple column, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple rowProj, out HTuple colProj)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1338);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, row1);
			SZXCArimAPI.Store(expr_0A, 3, column1);
			SZXCArimAPI.Store(expr_0A, 4, row2);
			SZXCArimAPI.Store(expr_0A, 5, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowProj);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colProj);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPointsEllipse(HTuple angle, HTuple row, HTuple column, HTuple phi, HTuple radius1, HTuple radius2, out HTuple rowPoint, out HTuple colPoint)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1339);
			SZXCArimAPI.Store(expr_0A, 0, angle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, radius1);
			SZXCArimAPI.Store(expr_0A, 5, radius2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(radius1);
			SZXCArimAPI.UnpinTuple(radius2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowPoint);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colPoint);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionLl(HTuple rowA1, HTuple columnA1, HTuple rowA2, HTuple columnA2, HTuple rowB1, HTuple columnB1, HTuple rowB2, HTuple columnB2, out HTuple row, out HTuple column, out HTuple isParallel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1340);
			SZXCArimAPI.Store(expr_0A, 0, rowA1);
			SZXCArimAPI.Store(expr_0A, 1, columnA1);
			SZXCArimAPI.Store(expr_0A, 2, rowA2);
			SZXCArimAPI.Store(expr_0A, 3, columnA2);
			SZXCArimAPI.Store(expr_0A, 4, rowB1);
			SZXCArimAPI.Store(expr_0A, 5, columnB1);
			SZXCArimAPI.Store(expr_0A, 6, rowB2);
			SZXCArimAPI.Store(expr_0A, 7, columnB2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowA1);
			SZXCArimAPI.UnpinTuple(columnA1);
			SZXCArimAPI.UnpinTuple(rowA2);
			SZXCArimAPI.UnpinTuple(columnA2);
			SZXCArimAPI.UnpinTuple(rowB1);
			SZXCArimAPI.UnpinTuple(columnB1);
			SZXCArimAPI.UnpinTuple(rowB2);
			SZXCArimAPI.UnpinTuple(columnB2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isParallel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionContoursXld(HObject contour1, HObject contour2, HTuple intersectionType, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1341);
			SZXCArimAPI.Store(expr_0A, 1, contour1);
			SZXCArimAPI.Store(expr_0A, 2, contour2);
			SZXCArimAPI.Store(expr_0A, 0, intersectionType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(intersectionType);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour1);
			GC.KeepAlive(contour2);
		}

		public static void IntersectionCircleContourXld(HObject contour, HTuple circleRow, HTuple circleColumn, HTuple circleRadius, HTuple circleStartPhi, HTuple circleEndPhi, HTuple circlePointOrder, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1342);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, circleRow);
			SZXCArimAPI.Store(expr_0A, 1, circleColumn);
			SZXCArimAPI.Store(expr_0A, 2, circleRadius);
			SZXCArimAPI.Store(expr_0A, 3, circleStartPhi);
			SZXCArimAPI.Store(expr_0A, 4, circleEndPhi);
			SZXCArimAPI.Store(expr_0A, 5, circlePointOrder);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(circleRow);
			SZXCArimAPI.UnpinTuple(circleColumn);
			SZXCArimAPI.UnpinTuple(circleRadius);
			SZXCArimAPI.UnpinTuple(circleStartPhi);
			SZXCArimAPI.UnpinTuple(circleEndPhi);
			SZXCArimAPI.UnpinTuple(circlePointOrder);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void IntersectionCircles(HTuple circle1Row, HTuple circle1Column, HTuple circle1Radius, HTuple circle1StartPhi, HTuple circle1EndPhi, HTuple circle1PointOrder, HTuple circle2Row, HTuple circle2Column, HTuple circle2Radius, HTuple circle2StartPhi, HTuple circle2EndPhi, HTuple circle2PointOrder, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1343);
			SZXCArimAPI.Store(expr_0A, 0, circle1Row);
			SZXCArimAPI.Store(expr_0A, 1, circle1Column);
			SZXCArimAPI.Store(expr_0A, 2, circle1Radius);
			SZXCArimAPI.Store(expr_0A, 3, circle1StartPhi);
			SZXCArimAPI.Store(expr_0A, 4, circle1EndPhi);
			SZXCArimAPI.Store(expr_0A, 5, circle1PointOrder);
			SZXCArimAPI.Store(expr_0A, 6, circle2Row);
			SZXCArimAPI.Store(expr_0A, 7, circle2Column);
			SZXCArimAPI.Store(expr_0A, 8, circle2Radius);
			SZXCArimAPI.Store(expr_0A, 9, circle2StartPhi);
			SZXCArimAPI.Store(expr_0A, 10, circle2EndPhi);
			SZXCArimAPI.Store(expr_0A, 11, circle2PointOrder);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(circle1Row);
			SZXCArimAPI.UnpinTuple(circle1Column);
			SZXCArimAPI.UnpinTuple(circle1Radius);
			SZXCArimAPI.UnpinTuple(circle1StartPhi);
			SZXCArimAPI.UnpinTuple(circle1EndPhi);
			SZXCArimAPI.UnpinTuple(circle1PointOrder);
			SZXCArimAPI.UnpinTuple(circle2Row);
			SZXCArimAPI.UnpinTuple(circle2Column);
			SZXCArimAPI.UnpinTuple(circle2Radius);
			SZXCArimAPI.UnpinTuple(circle2StartPhi);
			SZXCArimAPI.UnpinTuple(circle2EndPhi);
			SZXCArimAPI.UnpinTuple(circle2PointOrder);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionLineContourXld(HObject contour, HTuple lineRow1, HTuple lineColumn1, HTuple lineRow2, HTuple lineColumn2, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1344);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, lineRow1);
			SZXCArimAPI.Store(expr_0A, 1, lineColumn1);
			SZXCArimAPI.Store(expr_0A, 2, lineRow2);
			SZXCArimAPI.Store(expr_0A, 3, lineColumn2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lineRow1);
			SZXCArimAPI.UnpinTuple(lineColumn1);
			SZXCArimAPI.UnpinTuple(lineRow2);
			SZXCArimAPI.UnpinTuple(lineColumn2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void IntersectionLineCircle(HTuple lineRow1, HTuple lineColumn1, HTuple lineRow2, HTuple lineColumn2, HTuple circleRow, HTuple circleColumn, HTuple circleRadius, HTuple circleStartPhi, HTuple circleEndPhi, HTuple circlePointOrder, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1345);
			SZXCArimAPI.Store(expr_0A, 0, lineRow1);
			SZXCArimAPI.Store(expr_0A, 1, lineColumn1);
			SZXCArimAPI.Store(expr_0A, 2, lineRow2);
			SZXCArimAPI.Store(expr_0A, 3, lineColumn2);
			SZXCArimAPI.Store(expr_0A, 4, circleRow);
			SZXCArimAPI.Store(expr_0A, 5, circleColumn);
			SZXCArimAPI.Store(expr_0A, 6, circleRadius);
			SZXCArimAPI.Store(expr_0A, 7, circleStartPhi);
			SZXCArimAPI.Store(expr_0A, 8, circleEndPhi);
			SZXCArimAPI.Store(expr_0A, 9, circlePointOrder);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lineRow1);
			SZXCArimAPI.UnpinTuple(lineColumn1);
			SZXCArimAPI.UnpinTuple(lineRow2);
			SZXCArimAPI.UnpinTuple(lineColumn2);
			SZXCArimAPI.UnpinTuple(circleRow);
			SZXCArimAPI.UnpinTuple(circleColumn);
			SZXCArimAPI.UnpinTuple(circleRadius);
			SZXCArimAPI.UnpinTuple(circleStartPhi);
			SZXCArimAPI.UnpinTuple(circleEndPhi);
			SZXCArimAPI.UnpinTuple(circlePointOrder);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionLines(HTuple line1Row1, HTuple line1Column1, HTuple line1Row2, HTuple line1Column2, HTuple line2Row1, HTuple line2Column1, HTuple line2Row2, HTuple line2Column2, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1346);
			SZXCArimAPI.Store(expr_0A, 0, line1Row1);
			SZXCArimAPI.Store(expr_0A, 1, line1Column1);
			SZXCArimAPI.Store(expr_0A, 2, line1Row2);
			SZXCArimAPI.Store(expr_0A, 3, line1Column2);
			SZXCArimAPI.Store(expr_0A, 4, line2Row1);
			SZXCArimAPI.Store(expr_0A, 5, line2Column1);
			SZXCArimAPI.Store(expr_0A, 6, line2Row2);
			SZXCArimAPI.Store(expr_0A, 7, line2Column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(line1Row1);
			SZXCArimAPI.UnpinTuple(line1Column1);
			SZXCArimAPI.UnpinTuple(line1Row2);
			SZXCArimAPI.UnpinTuple(line1Column2);
			SZXCArimAPI.UnpinTuple(line2Row1);
			SZXCArimAPI.UnpinTuple(line2Column1);
			SZXCArimAPI.UnpinTuple(line2Row2);
			SZXCArimAPI.UnpinTuple(line2Column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionSegmentContourXld(HObject contour, HTuple segmentRow1, HTuple segmentColumn1, HTuple segmentRow2, HTuple segmentColumn2, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1347);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, segmentRow1);
			SZXCArimAPI.Store(expr_0A, 1, segmentColumn1);
			SZXCArimAPI.Store(expr_0A, 2, segmentRow2);
			SZXCArimAPI.Store(expr_0A, 3, segmentColumn2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(segmentRow1);
			SZXCArimAPI.UnpinTuple(segmentColumn1);
			SZXCArimAPI.UnpinTuple(segmentRow2);
			SZXCArimAPI.UnpinTuple(segmentColumn2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void IntersectionSegmentCircle(HTuple segmentRow1, HTuple segmentColumn1, HTuple segmentRow2, HTuple segmentColumn2, HTuple circleRow, HTuple circleColumn, HTuple circleRadius, HTuple circleStartPhi, HTuple circleEndPhi, HTuple circlePointOrder, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1348);
			SZXCArimAPI.Store(expr_0A, 0, segmentRow1);
			SZXCArimAPI.Store(expr_0A, 1, segmentColumn1);
			SZXCArimAPI.Store(expr_0A, 2, segmentRow2);
			SZXCArimAPI.Store(expr_0A, 3, segmentColumn2);
			SZXCArimAPI.Store(expr_0A, 4, circleRow);
			SZXCArimAPI.Store(expr_0A, 5, circleColumn);
			SZXCArimAPI.Store(expr_0A, 6, circleRadius);
			SZXCArimAPI.Store(expr_0A, 7, circleStartPhi);
			SZXCArimAPI.Store(expr_0A, 8, circleEndPhi);
			SZXCArimAPI.Store(expr_0A, 9, circlePointOrder);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(segmentRow1);
			SZXCArimAPI.UnpinTuple(segmentColumn1);
			SZXCArimAPI.UnpinTuple(segmentRow2);
			SZXCArimAPI.UnpinTuple(segmentColumn2);
			SZXCArimAPI.UnpinTuple(circleRow);
			SZXCArimAPI.UnpinTuple(circleColumn);
			SZXCArimAPI.UnpinTuple(circleRadius);
			SZXCArimAPI.UnpinTuple(circleStartPhi);
			SZXCArimAPI.UnpinTuple(circleEndPhi);
			SZXCArimAPI.UnpinTuple(circlePointOrder);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionSegmentLine(HTuple segmentRow1, HTuple segmentColumn1, HTuple segmentRow2, HTuple segmentColumn2, HTuple lineRow1, HTuple lineColumn1, HTuple lineRow2, HTuple lineColumn2, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1349);
			SZXCArimAPI.Store(expr_0A, 0, segmentRow1);
			SZXCArimAPI.Store(expr_0A, 1, segmentColumn1);
			SZXCArimAPI.Store(expr_0A, 2, segmentRow2);
			SZXCArimAPI.Store(expr_0A, 3, segmentColumn2);
			SZXCArimAPI.Store(expr_0A, 4, lineRow1);
			SZXCArimAPI.Store(expr_0A, 5, lineColumn1);
			SZXCArimAPI.Store(expr_0A, 6, lineRow2);
			SZXCArimAPI.Store(expr_0A, 7, lineColumn2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(segmentRow1);
			SZXCArimAPI.UnpinTuple(segmentColumn1);
			SZXCArimAPI.UnpinTuple(segmentRow2);
			SZXCArimAPI.UnpinTuple(segmentColumn2);
			SZXCArimAPI.UnpinTuple(lineRow1);
			SZXCArimAPI.UnpinTuple(lineColumn1);
			SZXCArimAPI.UnpinTuple(lineRow2);
			SZXCArimAPI.UnpinTuple(lineColumn2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntersectionSegments(HTuple segment1Row1, HTuple segment1Column1, HTuple segment1Row2, HTuple segment1Column2, HTuple segment2Row1, HTuple segment2Column1, HTuple segment2Row2, HTuple segment2Column2, out HTuple row, out HTuple column, out HTuple isOverlapping)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1350);
			SZXCArimAPI.Store(expr_0A, 0, segment1Row1);
			SZXCArimAPI.Store(expr_0A, 1, segment1Column1);
			SZXCArimAPI.Store(expr_0A, 2, segment1Row2);
			SZXCArimAPI.Store(expr_0A, 3, segment1Column2);
			SZXCArimAPI.Store(expr_0A, 4, segment2Row1);
			SZXCArimAPI.Store(expr_0A, 5, segment2Column1);
			SZXCArimAPI.Store(expr_0A, 6, segment2Row2);
			SZXCArimAPI.Store(expr_0A, 7, segment2Column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(segment1Row1);
			SZXCArimAPI.UnpinTuple(segment1Column1);
			SZXCArimAPI.UnpinTuple(segment1Row2);
			SZXCArimAPI.UnpinTuple(segment1Column2);
			SZXCArimAPI.UnpinTuple(segment2Row1);
			SZXCArimAPI.UnpinTuple(segment2Column1);
			SZXCArimAPI.UnpinTuple(segment2Row2);
			SZXCArimAPI.UnpinTuple(segment2Column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out isOverlapping);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearDistanceTransformXld(HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1351);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ApplyDistanceTransformXld(HObject contour, out HObject contourOut, HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1352);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			num = HObject.LoadNew(expr_0A, 1, num, out contourOut);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void ReadDistanceTransformXld(HTuple fileName, out HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1353);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out distanceTransformID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeDistanceTransformXld(HTuple serializedItemHandle, out HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1354);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out distanceTransformID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDistanceTransformXld(HTuple distanceTransformID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1355);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDistanceTransformXld(HTuple distanceTransformID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1356);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetDistanceTransformXldParam(HTuple distanceTransformID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1357);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDistanceTransformXldParam(HTuple distanceTransformID, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1358);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDistanceTransformXldContour(out HObject contour, HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1359);
			SZXCArimAPI.Store(expr_0A, 0, distanceTransformID);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distanceTransformID);
			num = HObject.LoadNew(expr_0A, 1, num, out contour);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDistanceTransformXld(HObject contour, HTuple mode, HTuple maxDistance, out HTuple distanceTransformID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1360);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, maxDistance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(maxDistance);
			num = HTuple.LoadNew(expr_0A, 0, num, out distanceTransformID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void DistanceContoursXld(HObject contourFrom, HObject contourTo, out HObject contourOut, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1361);
			SZXCArimAPI.Store(expr_0A, 1, contourFrom);
			SZXCArimAPI.Store(expr_0A, 2, contourTo);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out contourOut);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contourFrom);
			GC.KeepAlive(contourTo);
		}

		public static void DistanceCcMin(HObject contour1, HObject contour2, HTuple mode, out HTuple distanceMin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1362);
			SZXCArimAPI.Store(expr_0A, 1, contour1);
			SZXCArimAPI.Store(expr_0A, 2, contour2);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour1);
			GC.KeepAlive(contour2);
		}

		public static void DistanceCc(HObject contour1, HObject contour2, HTuple mode, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1363);
			SZXCArimAPI.Store(expr_0A, 1, contour1);
			SZXCArimAPI.Store(expr_0A, 2, contour2);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour1);
			GC.KeepAlive(contour2);
		}

		public static void DistanceSc(HObject contour, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1364);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void DistanceLc(HObject contour, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1365);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void DistancePc(HObject contour, HTuple row, HTuple column, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1366);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void DistanceSr(HObject region, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1367);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DistanceLr(HObject region, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1368);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void DistancePr(HObject region, HTuple row, HTuple column, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1369);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void AngleLx(HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple angle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1370);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out angle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AngleLl(HTuple rowA1, HTuple columnA1, HTuple rowA2, HTuple columnA2, HTuple rowB1, HTuple columnB1, HTuple rowB2, HTuple columnB2, out HTuple angle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1371);
			SZXCArimAPI.Store(expr_0A, 0, rowA1);
			SZXCArimAPI.Store(expr_0A, 1, columnA1);
			SZXCArimAPI.Store(expr_0A, 2, rowA2);
			SZXCArimAPI.Store(expr_0A, 3, columnA2);
			SZXCArimAPI.Store(expr_0A, 4, rowB1);
			SZXCArimAPI.Store(expr_0A, 5, columnB1);
			SZXCArimAPI.Store(expr_0A, 6, rowB2);
			SZXCArimAPI.Store(expr_0A, 7, columnB2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowA1);
			SZXCArimAPI.UnpinTuple(columnA1);
			SZXCArimAPI.UnpinTuple(rowA2);
			SZXCArimAPI.UnpinTuple(columnA2);
			SZXCArimAPI.UnpinTuple(rowB1);
			SZXCArimAPI.UnpinTuple(columnB1);
			SZXCArimAPI.UnpinTuple(rowB2);
			SZXCArimAPI.UnpinTuple(columnB2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out angle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceSl(HTuple rowA1, HTuple columnA1, HTuple rowA2, HTuple columnA2, HTuple rowB1, HTuple columnB1, HTuple rowB2, HTuple columnB2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1372);
			SZXCArimAPI.Store(expr_0A, 0, rowA1);
			SZXCArimAPI.Store(expr_0A, 1, columnA1);
			SZXCArimAPI.Store(expr_0A, 2, rowA2);
			SZXCArimAPI.Store(expr_0A, 3, columnA2);
			SZXCArimAPI.Store(expr_0A, 4, rowB1);
			SZXCArimAPI.Store(expr_0A, 5, columnB1);
			SZXCArimAPI.Store(expr_0A, 6, rowB2);
			SZXCArimAPI.Store(expr_0A, 7, columnB2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowA1);
			SZXCArimAPI.UnpinTuple(columnA1);
			SZXCArimAPI.UnpinTuple(rowA2);
			SZXCArimAPI.UnpinTuple(columnA2);
			SZXCArimAPI.UnpinTuple(rowB1);
			SZXCArimAPI.UnpinTuple(columnB1);
			SZXCArimAPI.UnpinTuple(rowB2);
			SZXCArimAPI.UnpinTuple(columnB2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceSs(HTuple rowA1, HTuple columnA1, HTuple rowA2, HTuple columnA2, HTuple rowB1, HTuple columnB1, HTuple rowB2, HTuple columnB2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1373);
			SZXCArimAPI.Store(expr_0A, 0, rowA1);
			SZXCArimAPI.Store(expr_0A, 1, columnA1);
			SZXCArimAPI.Store(expr_0A, 2, rowA2);
			SZXCArimAPI.Store(expr_0A, 3, columnA2);
			SZXCArimAPI.Store(expr_0A, 4, rowB1);
			SZXCArimAPI.Store(expr_0A, 5, columnB1);
			SZXCArimAPI.Store(expr_0A, 6, rowB2);
			SZXCArimAPI.Store(expr_0A, 7, columnB2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowA1);
			SZXCArimAPI.UnpinTuple(columnA1);
			SZXCArimAPI.UnpinTuple(rowA2);
			SZXCArimAPI.UnpinTuple(columnA2);
			SZXCArimAPI.UnpinTuple(rowB1);
			SZXCArimAPI.UnpinTuple(columnB1);
			SZXCArimAPI.UnpinTuple(rowB2);
			SZXCArimAPI.UnpinTuple(columnB2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistancePs(HTuple row, HTuple column, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distanceMin, out HTuple distanceMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1374);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, row1);
			SZXCArimAPI.Store(expr_0A, 3, column1);
			SZXCArimAPI.Store(expr_0A, 4, row2);
			SZXCArimAPI.Store(expr_0A, 5, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out distanceMax);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistancePl(HTuple row, HTuple column, HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1375);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, row1);
			SZXCArimAPI.Store(expr_0A, 3, column1);
			SZXCArimAPI.Store(expr_0A, 4, row2);
			SZXCArimAPI.Store(expr_0A, 5, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistancePp(HTuple row1, HTuple column1, HTuple row2, HTuple column2, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1376);
			SZXCArimAPI.Store(expr_0A, 0, row1);
			SZXCArimAPI.Store(expr_0A, 1, column1);
			SZXCArimAPI.Store(expr_0A, 2, row2);
			SZXCArimAPI.Store(expr_0A, 3, column2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row1);
			SZXCArimAPI.UnpinTuple(column1);
			SZXCArimAPI.UnpinTuple(row2);
			SZXCArimAPI.UnpinTuple(column2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ComposeFunct1d(HTuple function1, HTuple function2, HTuple border, out HTuple composedFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1377);
			SZXCArimAPI.Store(expr_0A, 0, function1);
			SZXCArimAPI.Store(expr_0A, 1, function2);
			SZXCArimAPI.Store(expr_0A, 2, border);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function1);
			SZXCArimAPI.UnpinTuple(function2);
			SZXCArimAPI.UnpinTuple(border);
			num = HTuple.LoadNew(expr_0A, 0, num, out composedFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InvertFunct1d(HTuple function, out HTuple inverseFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1378);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, num, out inverseFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DerivateFunct1d(HTuple function, HTuple mode, out HTuple derivative)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1379);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_0A, 0, num, out derivative);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void LocalMinMaxFunct1d(HTuple function, HTuple mode, HTuple interpolation, out HTuple min, out HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1380);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out min);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out max);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ZeroCrossingsFunct1d(HTuple function, out HTuple zeroCrossings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1381);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out zeroCrossings);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ScaleYFunct1d(HTuple function, HTuple mult, HTuple add, out HTuple functionScaled)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1382);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, mult);
			SZXCArimAPI.Store(expr_0A, 2, add);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HTuple.LoadNew(expr_0A, 0, num, out functionScaled);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void NegateFunct1d(HTuple function, out HTuple functionInverted)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1383);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, num, out functionInverted);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AbsFunct1d(HTuple function, out HTuple functionAbsolute)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1384);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, num, out functionAbsolute);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetYValueFunct1d(HTuple function, HTuple x, HTuple border, out HTuple y)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1385);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, x);
			SZXCArimAPI.Store(expr_0A, 2, border);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(border);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out y);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPairFunct1d(HTuple function, HTuple index, out HTuple x, out HTuple y)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1386);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(index);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void NumPointsFunct1d(HTuple function, out HTuple length)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1387);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out length);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void YRangeFunct1d(HTuple function, out HTuple YMin, out HTuple YMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1388);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out YMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out YMax);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void XRangeFunct1d(HTuple function, out HTuple XMin, out HTuple XMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1389);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out XMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out XMax);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void Funct1dToPairs(HTuple function, out HTuple XValues, out HTuple YValues)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1390);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, num, out XValues);
			num = HTuple.LoadNew(expr_0A, 1, num, out YValues);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SampleFunct1d(HTuple function, HTuple XMin, HTuple XMax, HTuple XDist, HTuple border, out HTuple sampledFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1391);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, XMin);
			SZXCArimAPI.Store(expr_0A, 2, XMax);
			SZXCArimAPI.Store(expr_0A, 3, XDist);
			SZXCArimAPI.Store(expr_0A, 4, border);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(XMin);
			SZXCArimAPI.UnpinTuple(XMax);
			SZXCArimAPI.UnpinTuple(XDist);
			SZXCArimAPI.UnpinTuple(border);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampledFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TransformFunct1d(HTuple function, HTuple paramsVal, out HTuple transformedFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1392);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, paramsVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(paramsVal);
			num = HTuple.LoadNew(expr_0A, 0, num, out transformedFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void MatchFunct1dTrans(HTuple function1, HTuple function2, HTuple border, HTuple paramsConst, HTuple useParams, out HTuple paramsVal, out HTuple chiSquare, out HTuple covar)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1393);
			SZXCArimAPI.Store(expr_0A, 0, function1);
			SZXCArimAPI.Store(expr_0A, 1, function2);
			SZXCArimAPI.Store(expr_0A, 2, border);
			SZXCArimAPI.Store(expr_0A, 3, paramsConst);
			SZXCArimAPI.Store(expr_0A, 4, useParams);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function1);
			SZXCArimAPI.UnpinTuple(function2);
			SZXCArimAPI.UnpinTuple(border);
			SZXCArimAPI.UnpinTuple(paramsConst);
			SZXCArimAPI.UnpinTuple(useParams);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out paramsVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out chiSquare);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out covar);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceFunct1d(HTuple function1, HTuple function2, HTuple mode, HTuple sigma, out HTuple distance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1394);
			SZXCArimAPI.Store(expr_0A, 0, function1);
			SZXCArimAPI.Store(expr_0A, 1, function2);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function1);
			SZXCArimAPI.UnpinTuple(function2);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HTuple.LoadNew(expr_0A, 0, num, out distance);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SmoothFunct1dGauss(HTuple function, HTuple sigma, out HTuple smoothedFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1395);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HTuple.LoadNew(expr_0A, 0, num, out smoothedFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntegrateFunct1d(HTuple function, out HTuple positive, out HTuple negative)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1396);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out positive);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out negative);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadFunct1d(HTuple fileName, out HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1397);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out function);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteFunct1d(HTuple function, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1398);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateFunct1dArray(HTuple YValues, out HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1399);
			SZXCArimAPI.Store(expr_0A, 0, YValues);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(YValues);
			num = HTuple.LoadNew(expr_0A, 0, num, out function);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateFunct1dPairs(HTuple XValues, HTuple YValues, out HTuple function)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1400);
			SZXCArimAPI.Store(expr_0A, 0, XValues);
			SZXCArimAPI.Store(expr_0A, 1, YValues);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(XValues);
			SZXCArimAPI.UnpinTuple(YValues);
			num = HTuple.LoadNew(expr_0A, 0, num, out function);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SmoothFunct1dMean(HTuple function, HTuple smoothSize, HTuple iterations, out HTuple smoothedFunction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1401);
			SZXCArimAPI.Store(expr_0A, 0, function);
			SZXCArimAPI.Store(expr_0A, 1, smoothSize);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(function);
			SZXCArimAPI.UnpinTuple(smoothSize);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HTuple.LoadNew(expr_0A, 0, num, out smoothedFunction);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TextureLaws(HObject image, out HObject imageTexture, HTuple filterTypes, HTuple shift, HTuple filterSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1402);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterTypes);
			SZXCArimAPI.Store(expr_0A, 1, shift);
			SZXCArimAPI.Store(expr_0A, 2, filterSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterTypes);
			SZXCArimAPI.UnpinTuple(shift);
			SZXCArimAPI.UnpinTuple(filterSize);
			num = HObject.LoadNew(expr_0A, 1, num, out imageTexture);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DeviationImage(HObject image, out HObject imageDeviation, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1403);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageDeviation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EntropyImage(HObject image, out HObject imageEntropy, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1404);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEntropy);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void IsotropicDiffusion(HObject image, out HObject smoothedImage, HTuple sigma, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1405);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out smoothedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AnisotropicDiffusion(HObject image, out HObject imageAniso, HTuple mode, HTuple contrast, HTuple theta, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1406);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, contrast);
			SZXCArimAPI.Store(expr_0A, 2, theta);
			SZXCArimAPI.Store(expr_0A, 3, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAniso);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SmoothImage(HObject image, out HObject imageSmooth, HTuple filter, HTuple alpha)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1407);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSmooth);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SigmaImage(HObject image, out HObject imageSigma, HTuple maskHeight, HTuple maskWidth, HTuple sigma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1408);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSigma);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MidrangeImage(HObject image, HObject mask, out HObject imageMidrange, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1409);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, mask);
			SZXCArimAPI.Store(expr_0A, 0, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMidrange);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(mask);
		}

		public static void TrimmedMean(HObject image, HObject mask, out HObject imageTMean, HTuple number, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1410);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, mask);
			SZXCArimAPI.Store(expr_0A, 0, number);
			SZXCArimAPI.Store(expr_0A, 1, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(number);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageTMean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(mask);
		}

		public static void MedianSeparate(HObject image, out HObject imageSMedian, HTuple maskWidth, HTuple maskHeight, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1411);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSMedian);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MedianRect(HObject image, out HObject imageMedian, HTuple maskWidth, HTuple maskHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1412);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMedian);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MedianImage(HObject image, out HObject imageMedian, HTuple maskType, HTuple radius, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1413);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskType);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.Store(expr_0A, 2, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskType);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMedian);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MedianWeighted(HObject image, out HObject imageWMedian, HTuple maskType, HTuple maskSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1414);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskType);
			SZXCArimAPI.Store(expr_0A, 1, maskSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskType);
			SZXCArimAPI.UnpinTuple(maskSize);
			num = HObject.LoadNew(expr_0A, 1, num, out imageWMedian);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RankRect(HObject image, out HObject imageRank, HTuple maskWidth, HTuple maskHeight, HTuple rank)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1415);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, rank);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(rank);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRank);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RankImage(HObject image, HObject mask, out HObject imageRank, HTuple rank, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1416);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, mask);
			SZXCArimAPI.Store(expr_0A, 0, rank);
			SZXCArimAPI.Store(expr_0A, 1, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rank);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRank);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(mask);
		}

		public static void DualRank(HObject image, out HObject imageRank, HTuple maskType, HTuple radius, HTuple modePercent, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1417);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskType);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.Store(expr_0A, 2, modePercent);
			SZXCArimAPI.Store(expr_0A, 3, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskType);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(modePercent);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRank);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeanImage(HObject image, out HObject imageMean, HTuple maskWidth, HTuple maskHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1418);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void InfoSmooth(HTuple filter, HTuple alpha, out HTuple size, out HTuple coeffs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1419);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out size);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out coeffs);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void BinomialFilter(HObject image, out HObject imageBinomial, HTuple maskWidth, HTuple maskHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1420);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			num = HObject.LoadNew(expr_0A, 1, num, out imageBinomial);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GaussImage(HObject image, out HObject imageGauss, HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1421);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, size);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(size);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGauss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GaussFilter(HObject image, out HObject imageGauss, HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1422);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, size);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(size);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGauss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EliminateMinMax(HObject image, out HObject filteredImage, HTuple maskWidth, HTuple maskHeight, HTuple gap, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1423);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, gap);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(gap);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out filteredImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FillInterlace(HObject imageCamera, out HObject imageFilled, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1424);
			SZXCArimAPI.Store(expr_0A, 1, imageCamera);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilled);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageCamera);
		}

		public static void RankN(HObject image, out HObject rankImage, HTuple rankIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1425);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, rankIndex);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rankIndex);
			num = HObject.LoadNew(expr_0A, 1, num, out rankImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeanN(HObject image, out HObject imageMean)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1426);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EliminateSp(HObject image, out HObject imageFillSP, HTuple maskWidth, HTuple maskHeight, HTuple minThresh, HTuple maxThresh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1427);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, minThresh);
			SZXCArimAPI.Store(expr_0A, 3, maxThresh);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(minThresh);
			SZXCArimAPI.UnpinTuple(maxThresh);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFillSP);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeanSp(HObject image, out HObject imageSPMean, HTuple maskWidth, HTuple maskHeight, HTuple minThresh, HTuple maxThresh)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1428);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, minThresh);
			SZXCArimAPI.Store(expr_0A, 3, maxThresh);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(minThresh);
			SZXCArimAPI.UnpinTuple(maxThresh);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSPMean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PointsSojka(HObject image, HTuple maskSize, HTuple sigmaW, HTuple sigmaD, HTuple minGrad, HTuple minApparentness, HTuple minAngle, HTuple subpix, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1429);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskSize);
			SZXCArimAPI.Store(expr_0A, 1, sigmaW);
			SZXCArimAPI.Store(expr_0A, 2, sigmaD);
			SZXCArimAPI.Store(expr_0A, 3, minGrad);
			SZXCArimAPI.Store(expr_0A, 4, minApparentness);
			SZXCArimAPI.Store(expr_0A, 5, minAngle);
			SZXCArimAPI.Store(expr_0A, 6, subpix);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(sigmaW);
			SZXCArimAPI.UnpinTuple(sigmaD);
			SZXCArimAPI.UnpinTuple(minGrad);
			SZXCArimAPI.UnpinTuple(minApparentness);
			SZXCArimAPI.UnpinTuple(minAngle);
			SZXCArimAPI.UnpinTuple(subpix);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DotsImage(HObject image, out HObject dotImage, HTuple diameter, HTuple filterType, HTuple pixelShift)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1430);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, diameter);
			SZXCArimAPI.Store(expr_0A, 1, filterType);
			SZXCArimAPI.Store(expr_0A, 2, pixelShift);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(diameter);
			SZXCArimAPI.UnpinTuple(filterType);
			SZXCArimAPI.UnpinTuple(pixelShift);
			num = HObject.LoadNew(expr_0A, 1, num, out dotImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LocalMinSubPix(HObject image, HTuple filter, HTuple sigma, HTuple threshold, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1431);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LocalMaxSubPix(HObject image, HTuple filter, HTuple sigma, HTuple threshold, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1432);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SaddlePointsSubPix(HObject image, HTuple filter, HTuple sigma, HTuple threshold, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1433);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CriticalPointsSubPix(HObject image, HTuple filter, HTuple sigma, HTuple threshold, out HTuple rowMin, out HTuple columnMin, out HTuple rowMax, out HTuple columnMax, out HTuple rowSaddle, out HTuple columnSaddle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1434);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnMin);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out rowMax);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out columnMax);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out rowSaddle);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out columnSaddle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PointsHarris(HObject image, HTuple sigmaGrad, HTuple sigmaSmooth, HTuple alpha, HTuple threshold, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1435);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigmaGrad);
			SZXCArimAPI.Store(expr_0A, 1, sigmaSmooth);
			SZXCArimAPI.Store(expr_0A, 2, alpha);
			SZXCArimAPI.Store(expr_0A, 3, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigmaGrad);
			SZXCArimAPI.UnpinTuple(sigmaSmooth);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PointsHarrisBinomial(HObject image, HTuple maskSizeGrad, HTuple maskSizeSmooth, HTuple alpha, HTuple threshold, HTuple subpix, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1436);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskSizeGrad);
			SZXCArimAPI.Store(expr_0A, 1, maskSizeSmooth);
			SZXCArimAPI.Store(expr_0A, 2, alpha);
			SZXCArimAPI.Store(expr_0A, 3, threshold);
			SZXCArimAPI.Store(expr_0A, 4, subpix);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskSizeGrad);
			SZXCArimAPI.UnpinTuple(maskSizeSmooth);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(subpix);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PointsLepetit(HObject image, HTuple radius, HTuple checkNeighbor, HTuple minCheckNeighborDiff, HTuple minScore, HTuple subpix, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1437);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.Store(expr_0A, 1, checkNeighbor);
			SZXCArimAPI.Store(expr_0A, 2, minCheckNeighborDiff);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, subpix);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(checkNeighbor);
			SZXCArimAPI.UnpinTuple(minCheckNeighborDiff);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(subpix);
			num = HTuple.LoadNew(expr_0A, 0, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PointsFoerstner(HObject image, HTuple sigmaGrad, HTuple sigmaInt, HTuple sigmaPoints, HTuple threshInhom, HTuple threshShape, HTuple smoothing, HTuple eliminateDoublets, out HTuple rowJunctions, out HTuple columnJunctions, out HTuple coRRJunctions, out HTuple coRCJunctions, out HTuple coCCJunctions, out HTuple rowArea, out HTuple columnArea, out HTuple coRRArea, out HTuple coRCArea, out HTuple coCCArea)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1438);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigmaGrad);
			SZXCArimAPI.Store(expr_0A, 1, sigmaInt);
			SZXCArimAPI.Store(expr_0A, 2, sigmaPoints);
			SZXCArimAPI.Store(expr_0A, 3, threshInhom);
			SZXCArimAPI.Store(expr_0A, 4, threshShape);
			SZXCArimAPI.Store(expr_0A, 5, smoothing);
			SZXCArimAPI.Store(expr_0A, 6, eliminateDoublets);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigmaGrad);
			SZXCArimAPI.UnpinTuple(sigmaInt);
			SZXCArimAPI.UnpinTuple(sigmaPoints);
			SZXCArimAPI.UnpinTuple(threshInhom);
			SZXCArimAPI.UnpinTuple(threshShape);
			SZXCArimAPI.UnpinTuple(smoothing);
			SZXCArimAPI.UnpinTuple(eliminateDoublets);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowJunctions);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnJunctions);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out coRRJunctions);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out coRCJunctions);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out coCCJunctions);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out rowArea);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out columnArea);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out coRRArea);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.DOUBLE, num, out coRCArea);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.DOUBLE, num, out coCCArea);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EstimateNoise(HObject image, HTuple method, HTuple percent, out HTuple sigma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1439);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, method);
			SZXCArimAPI.Store(expr_0A, 1, percent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(percent);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out sigma);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void NoiseDistributionMean(HObject constRegion, HObject image, HTuple filterSize, out HTuple distribution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1440);
			SZXCArimAPI.Store(expr_0A, 1, constRegion);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, filterSize);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterSize);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distribution);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(constRegion);
			GC.KeepAlive(image);
		}

		public static void AddNoiseWhite(HObject image, out HObject imageNoise, HTuple amp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1441);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, amp);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(amp);
			num = HObject.LoadNew(expr_0A, 1, num, out imageNoise);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AddNoiseDistribution(HObject image, out HObject imageNoise, HTuple distribution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1442);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, distribution);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(distribution);
			num = HObject.LoadNew(expr_0A, 1, num, out imageNoise);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GaussDistribution(HTuple sigma, out HTuple distribution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1443);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distribution);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SpDistribution(HTuple percentSalt, HTuple percentPepper, out HTuple distribution)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1444);
			SZXCArimAPI.Store(expr_0A, 0, percentSalt);
			SZXCArimAPI.Store(expr_0A, 1, percentPepper);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(percentSalt);
			SZXCArimAPI.UnpinTuple(percentPepper);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distribution);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeviationN(HObject image, out HObject imageDeviation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1445);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageDeviation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void InpaintingTexture(HObject image, HObject region, out HObject inpaintedImage, HTuple maskSize, HTuple searchSize, HTuple anisotropy, HTuple postIteration, HTuple smoothness)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1446);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, maskSize);
			SZXCArimAPI.Store(expr_0A, 1, searchSize);
			SZXCArimAPI.Store(expr_0A, 2, anisotropy);
			SZXCArimAPI.Store(expr_0A, 3, postIteration);
			SZXCArimAPI.Store(expr_0A, 4, smoothness);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(searchSize);
			SZXCArimAPI.UnpinTuple(anisotropy);
			SZXCArimAPI.UnpinTuple(postIteration);
			SZXCArimAPI.UnpinTuple(smoothness);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void InpaintingCt(HObject image, HObject region, out HObject inpaintedImage, HTuple epsilon, HTuple kappa, HTuple sigma, HTuple rho, HTuple channelCoefficients)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1447);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, epsilon);
			SZXCArimAPI.Store(expr_0A, 1, kappa);
			SZXCArimAPI.Store(expr_0A, 2, sigma);
			SZXCArimAPI.Store(expr_0A, 3, rho);
			SZXCArimAPI.Store(expr_0A, 4, channelCoefficients);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(kappa);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(rho);
			SZXCArimAPI.UnpinTuple(channelCoefficients);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void InpaintingMcf(HObject image, HObject region, out HObject inpaintedImage, HTuple sigma, HTuple theta, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1448);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, theta);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void InpaintingCed(HObject image, HObject region, out HObject inpaintedImage, HTuple sigma, HTuple rho, HTuple theta, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1449);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, rho);
			SZXCArimAPI.Store(expr_0A, 2, theta);
			SZXCArimAPI.Store(expr_0A, 3, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(rho);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void InpaintingAniso(HObject image, HObject region, out HObject inpaintedImage, HTuple mode, HTuple contrast, HTuple theta, HTuple iterations, HTuple rho)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1450);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, contrast);
			SZXCArimAPI.Store(expr_0A, 2, theta);
			SZXCArimAPI.Store(expr_0A, 3, iterations);
			SZXCArimAPI.Store(expr_0A, 4, rho);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(contrast);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(rho);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void HarmonicInterpolation(HObject image, HObject region, out HObject inpaintedImage, HTuple precision)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1451);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, precision);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(precision);
			num = HObject.LoadNew(expr_0A, 1, num, out inpaintedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void ExpandDomainGray(HObject inputImage, out HObject expandedImage, HTuple expansionRange)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1452);
			SZXCArimAPI.Store(expr_0A, 1, inputImage);
			SZXCArimAPI.Store(expr_0A, 0, expansionRange);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(expansionRange);
			num = HObject.LoadNew(expr_0A, 1, num, out expandedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(inputImage);
		}

		public static void TopographicSketch(HObject image, out HObject sketch)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1453);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out sketch);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LinearTransColor(HObject image, out HObject imageTrans, HTuple transMat)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1454);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, transMat);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(transMat);
			num = HObject.LoadNew(expr_0A, 1, num, out imageTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GenPrincipalCompTrans(HObject multichannelImage, out HTuple trans, out HTuple transInv, out HTuple mean, out HTuple cov, out HTuple infoPerComp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1455);
			SZXCArimAPI.Store(expr_0A, 1, multichannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out trans);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out transInv);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out mean);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out cov);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out infoPerComp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multichannelImage);
		}

		public static void PrincipalComp(HObject multichannelImage, out HObject PCAImage, out HTuple infoPerComp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1456);
			SZXCArimAPI.Store(expr_0A, 1, multichannelImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out PCAImage);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out infoPerComp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multichannelImage);
		}

		public static void FuzzyEntropy(HObject regions, HObject image, HTuple apar, HTuple cpar, out HTuple entropy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1457);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, apar);
			SZXCArimAPI.Store(expr_0A, 1, cpar);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(apar);
			SZXCArimAPI.UnpinTuple(cpar);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out entropy);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void FuzzyPerimeter(HObject regions, HObject image, HTuple apar, HTuple cpar, out HTuple perimeter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1458);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, apar);
			SZXCArimAPI.Store(expr_0A, 1, cpar);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(apar);
			SZXCArimAPI.UnpinTuple(cpar);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out perimeter);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GrayClosingShape(HObject image, out HObject imageClosing, HTuple maskHeight, HTuple maskWidth, HTuple maskShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1459);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, maskShape);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskShape);
			num = HObject.LoadNew(expr_0A, 1, num, out imageClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayOpeningShape(HObject image, out HObject imageOpening, HTuple maskHeight, HTuple maskWidth, HTuple maskShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1460);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, maskShape);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskShape);
			num = HObject.LoadNew(expr_0A, 1, num, out imageOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayErosionShape(HObject image, out HObject imageMin, HTuple maskHeight, HTuple maskWidth, HTuple maskShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1461);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, maskShape);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskShape);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayDilationShape(HObject image, out HObject imageMax, HTuple maskHeight, HTuple maskWidth, HTuple maskShape)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1462);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.Store(expr_0A, 2, maskShape);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskShape);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayRangeRect(HObject image, out HObject imageResult, HTuple maskHeight, HTuple maskWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1463);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayClosingRect(HObject image, out HObject imageClosing, HTuple maskHeight, HTuple maskWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1464);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out imageClosing);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayOpeningRect(HObject image, out HObject imageOpening, HTuple maskHeight, HTuple maskWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1465);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out imageOpening);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayErosionRect(HObject image, out HObject imageMin, HTuple maskHeight, HTuple maskWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1466);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GrayDilationRect(HObject image, out HObject imageMax, HTuple maskHeight, HTuple maskWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1467);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskHeight);
			SZXCArimAPI.Store(expr_0A, 1, maskWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(maskWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GraySkeleton(HObject image, out HObject graySkeleton)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1468);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out graySkeleton);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LutTrans(HObject image, out HObject imageResult, HTuple lut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1469);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, lut);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(lut);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ConvolImage(HObject image, out HObject imageResult, HTuple filterMask, HTuple margin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1470);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterMask);
			SZXCArimAPI.Store(expr_0A, 1, margin);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterMask);
			SZXCArimAPI.UnpinTuple(margin);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ConvertImageType(HObject image, out HObject imageConverted, HTuple newType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1471);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, newType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(newType);
			num = HObject.LoadNew(expr_0A, 1, num, out imageConverted);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RealToVectorField(HObject row, HObject col, out HObject vectorField, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1472);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, col);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_0A, 1, num, out vectorField);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(row);
			GC.KeepAlive(col);
		}

		public static void VectorFieldToReal(HObject vectorField, out HObject row, out HObject col)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1473);
			SZXCArimAPI.Store(expr_0A, 1, vectorField);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out row);
			num = HObject.LoadNew(expr_0A, 2, num, out col);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(vectorField);
		}

		public static void RealToComplex(HObject imageReal, HObject imageImaginary, out HObject imageComplex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1474);
			SZXCArimAPI.Store(expr_0A, 1, imageReal);
			SZXCArimAPI.Store(expr_0A, 2, imageImaginary);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageComplex);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageReal);
			GC.KeepAlive(imageImaginary);
		}

		public static void ComplexToReal(HObject imageComplex, out HObject imageReal, out HObject imageImaginary)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1475);
			SZXCArimAPI.Store(expr_0A, 1, imageComplex);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageReal);
			num = HObject.LoadNew(expr_0A, 2, num, out imageImaginary);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageComplex);
		}

		public static void RegionToMean(HObject regions, HObject image, out HObject imageMean)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1476);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GrayInside(HObject image, out HObject imageDist)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1477);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageDist);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Symmetry(HObject image, out HObject imageSymmetry, HTuple maskSize, HTuple direction, HTuple exponent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1478);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskSize);
			SZXCArimAPI.Store(expr_0A, 1, direction);
			SZXCArimAPI.Store(expr_0A, 2, exponent);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(direction);
			SZXCArimAPI.UnpinTuple(exponent);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSymmetry);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SelectGrayvaluesFromChannels(HObject multichannelImage, HObject indexImage, out HObject selected)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1479);
			SZXCArimAPI.Store(expr_0A, 1, multichannelImage);
			SZXCArimAPI.Store(expr_0A, 2, indexImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out selected);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multichannelImage);
			GC.KeepAlive(indexImage);
		}

		public static void DepthFromFocus(HObject multiFocusImage, out HObject depth, out HObject confidence, HTuple filter, HTuple selection)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1480);
			SZXCArimAPI.Store(expr_0A, 1, multiFocusImage);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, selection);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(selection);
			num = HObject.LoadNew(expr_0A, 1, num, out depth);
			num = HObject.LoadNew(expr_0A, 2, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multiFocusImage);
		}

		public static void SceneFlowCalib(HObject imageRect1T1, HObject imageRect2T1, HObject imageRect1T2, HObject imageRect2T2, HObject disparity, HTuple smoothingFlow, HTuple smoothingDisparity, HTuple genParamName, HTuple genParamValue, HTuple camParamRect1, HTuple camParamRect2, HTuple relPoseRect, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1481);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1T1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2T1);
			SZXCArimAPI.Store(expr_0A, 3, imageRect1T2);
			SZXCArimAPI.Store(expr_0A, 4, imageRect2T2);
			SZXCArimAPI.Store(expr_0A, 5, disparity);
			SZXCArimAPI.Store(expr_0A, 0, smoothingFlow);
			SZXCArimAPI.Store(expr_0A, 1, smoothingDisparity);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.Store(expr_0A, 4, camParamRect1);
			SZXCArimAPI.Store(expr_0A, 5, camParamRect2);
			SZXCArimAPI.Store(expr_0A, 6, relPoseRect);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(smoothingFlow);
			SZXCArimAPI.UnpinTuple(smoothingDisparity);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.UnpinTuple(camParamRect1);
			SZXCArimAPI.UnpinTuple(camParamRect2);
			SZXCArimAPI.UnpinTuple(relPoseRect);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1T1);
			GC.KeepAlive(imageRect2T1);
			GC.KeepAlive(imageRect1T2);
			GC.KeepAlive(imageRect2T2);
			GC.KeepAlive(disparity);
		}

		public static void SceneFlowUncalib(HObject imageRect1T1, HObject imageRect2T1, HObject imageRect1T2, HObject imageRect2T2, HObject disparity, out HObject opticalFlow, out HObject disparityChange, HTuple smoothingFlow, HTuple smoothingDisparity, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1482);
			SZXCArimAPI.Store(expr_0A, 1, imageRect1T1);
			SZXCArimAPI.Store(expr_0A, 2, imageRect2T1);
			SZXCArimAPI.Store(expr_0A, 3, imageRect1T2);
			SZXCArimAPI.Store(expr_0A, 4, imageRect2T2);
			SZXCArimAPI.Store(expr_0A, 5, disparity);
			SZXCArimAPI.Store(expr_0A, 0, smoothingFlow);
			SZXCArimAPI.Store(expr_0A, 1, smoothingDisparity);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(smoothingFlow);
			SZXCArimAPI.UnpinTuple(smoothingDisparity);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out opticalFlow);
			num = HObject.LoadNew(expr_0A, 2, num, out disparityChange);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRect1T1);
			GC.KeepAlive(imageRect2T1);
			GC.KeepAlive(imageRect1T2);
			GC.KeepAlive(imageRect2T2);
			GC.KeepAlive(disparity);
		}

		public static void UnwarpImageVectorField(HObject image, HObject vectorField, out HObject imageUnwarped)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1483);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, vectorField);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageUnwarped);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(vectorField);
		}

		public static void DerivateVectorField(HObject vectorField, out HObject result, HTuple sigma, HTuple component)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1484);
			SZXCArimAPI.Store(expr_0A, 1, vectorField);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, component);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(component);
			num = HObject.LoadNew(expr_0A, 1, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(vectorField);
		}

		public static void VectorFieldLength(HObject vectorField, out HObject length, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1485);
			SZXCArimAPI.Store(expr_0A, 1, vectorField);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out length);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(vectorField);
		}

		public static void OpticalFlowMg(HObject imageT1, HObject imageT2, out HObject vectorField, HTuple algorithm, HTuple smoothingSigma, HTuple integrationSigma, HTuple flowSmoothness, HTuple gradientConstancy, HTuple MGParamName, HTuple MGParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1486);
			SZXCArimAPI.Store(expr_0A, 1, imageT1);
			SZXCArimAPI.Store(expr_0A, 2, imageT2);
			SZXCArimAPI.Store(expr_0A, 0, algorithm);
			SZXCArimAPI.Store(expr_0A, 1, smoothingSigma);
			SZXCArimAPI.Store(expr_0A, 2, integrationSigma);
			SZXCArimAPI.Store(expr_0A, 3, flowSmoothness);
			SZXCArimAPI.Store(expr_0A, 4, gradientConstancy);
			SZXCArimAPI.Store(expr_0A, 5, MGParamName);
			SZXCArimAPI.Store(expr_0A, 6, MGParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(smoothingSigma);
			SZXCArimAPI.UnpinTuple(integrationSigma);
			SZXCArimAPI.UnpinTuple(flowSmoothness);
			SZXCArimAPI.UnpinTuple(gradientConstancy);
			SZXCArimAPI.UnpinTuple(MGParamName);
			SZXCArimAPI.UnpinTuple(MGParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out vectorField);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageT1);
			GC.KeepAlive(imageT2);
		}

		public static void ExhaustiveMatchMg(HObject image, HObject imageTemplate, out HObject imageMatch, HTuple mode, HTuple level, HTuple threshold)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1487);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, imageTemplate);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, level);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(level);
			SZXCArimAPI.UnpinTuple(threshold);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMatch);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(imageTemplate);
		}

		public static void CreateTemplateRot(HObject template, HTuple numLevel, HTuple angleStart, HTuple angleExtend, HTuple angleStep, HTuple optimize, HTuple grayValues, out HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1488);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, numLevel);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtend);
			SZXCArimAPI.Store(expr_0A, 3, angleStep);
			SZXCArimAPI.Store(expr_0A, 4, optimize);
			SZXCArimAPI.Store(expr_0A, 5, grayValues);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numLevel);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtend);
			SZXCArimAPI.UnpinTuple(angleStep);
			SZXCArimAPI.UnpinTuple(optimize);
			SZXCArimAPI.UnpinTuple(grayValues);
			num = HTuple.LoadNew(expr_0A, 0, num, out templateID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void CreateTemplate(HObject template, HTuple firstError, HTuple numLevel, HTuple optimize, HTuple grayValues, out HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1489);
			SZXCArimAPI.Store(expr_0A, 1, template);
			SZXCArimAPI.Store(expr_0A, 0, firstError);
			SZXCArimAPI.Store(expr_0A, 1, numLevel);
			SZXCArimAPI.Store(expr_0A, 2, optimize);
			SZXCArimAPI.Store(expr_0A, 3, grayValues);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(firstError);
			SZXCArimAPI.UnpinTuple(numLevel);
			SZXCArimAPI.UnpinTuple(optimize);
			SZXCArimAPI.UnpinTuple(grayValues);
			num = HTuple.LoadNew(expr_0A, 0, num, out templateID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(template);
		}

		public static void SerializeTemplate(HTuple templateID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1490);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeTemplate(HTuple serializedItemHandle, out HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1491);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out templateID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteTemplate(HTuple templateID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1492);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadTemplate(HTuple fileName, out HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1493);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out templateID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllTemplates()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1494);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTemplate(HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1495);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetOffsetTemplate(HTuple templateID, HTuple grayOffset)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1496);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, grayOffset);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(grayOffset);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetReferenceTemplate(HTuple templateID, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1497);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AdaptTemplate(HObject image, HTuple templateID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1498);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void FastMatchMg(HObject image, out HObject matches, HTuple templateID, HTuple maxError, HTuple numLevel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1499);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, maxError);
			SZXCArimAPI.Store(expr_0A, 2, numLevel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(numLevel);
			num = HObject.LoadNew(expr_0A, 1, num, out matches);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BestMatchPreMg(HObject imagePyramid, HTuple templateID, HTuple maxError, HTuple subPixel, HTuple numLevels, HTuple whichLevels, out HTuple row, out HTuple column, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1500);
			SZXCArimAPI.Store(expr_0A, 1, imagePyramid);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, maxError);
			SZXCArimAPI.Store(expr_0A, 2, subPixel);
			SZXCArimAPI.Store(expr_0A, 3, numLevels);
			SZXCArimAPI.Store(expr_0A, 4, whichLevels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(whichLevels);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imagePyramid);
		}

		public static void BestMatchMg(HObject image, HTuple templateID, HTuple maxError, HTuple subPixel, HTuple numLevels, HTuple whichLevels, out HTuple row, out HTuple column, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1501);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, maxError);
			SZXCArimAPI.Store(expr_0A, 2, subPixel);
			SZXCArimAPI.Store(expr_0A, 3, numLevels);
			SZXCArimAPI.Store(expr_0A, 4, whichLevels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			SZXCArimAPI.UnpinTuple(whichLevels);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FastMatch(HObject image, out HObject matches, HTuple templateID, HTuple maxError)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1502);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, maxError);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(maxError);
			num = HObject.LoadNew(expr_0A, 1, num, out matches);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BestMatchRotMg(HObject image, HTuple templateID, HTuple angleStart, HTuple angleExtend, HTuple maxError, HTuple subPixel, HTuple numLevels, out HTuple row, out HTuple column, out HTuple angle, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1503);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtend);
			SZXCArimAPI.Store(expr_0A, 3, maxError);
			SZXCArimAPI.Store(expr_0A, 4, subPixel);
			SZXCArimAPI.Store(expr_0A, 5, numLevels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtend);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BestMatchRot(HObject image, HTuple templateID, HTuple angleStart, HTuple angleExtend, HTuple maxError, HTuple subPixel, out HTuple row, out HTuple column, out HTuple angle, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1504);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtend);
			SZXCArimAPI.Store(expr_0A, 3, maxError);
			SZXCArimAPI.Store(expr_0A, 4, subPixel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtend);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(subPixel);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BestMatch(HObject image, HTuple templateID, HTuple maxError, HTuple subPixel, out HTuple row, out HTuple column, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1505);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, templateID);
			SZXCArimAPI.Store(expr_0A, 1, maxError);
			SZXCArimAPI.Store(expr_0A, 2, subPixel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(templateID);
			SZXCArimAPI.UnpinTuple(maxError);
			SZXCArimAPI.UnpinTuple(subPixel);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ExhaustiveMatch(HObject image, HObject regionOfInterest, HObject imageTemplate, out HObject imageMatch, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1506);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, regionOfInterest);
			SZXCArimAPI.Store(expr_0A, 3, imageTemplate);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMatch);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(regionOfInterest);
			GC.KeepAlive(imageTemplate);
		}

		public static void CornerResponse(HObject image, out HObject imageCorner, HTuple size, HTuple weight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1507);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, size);
			SZXCArimAPI.Store(expr_0A, 1, weight);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(size);
			SZXCArimAPI.UnpinTuple(weight);
			num = HObject.LoadNew(expr_0A, 1, num, out imageCorner);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GenGaussPyramid(HObject image, out HObject imagePyramid, HTuple mode, HTuple scale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1508);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, scale);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(scale);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePyramid);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Monotony(HObject image, out HObject imageMonotony)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1509);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMonotony);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BandpassImage(HObject image, out HObject imageBandpass, HTuple filterType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1510);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterType);
			num = HObject.LoadNew(expr_0A, 1, num, out imageBandpass);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LinesColor(HObject image, out HObject lines, HTuple sigma, HTuple low, HTuple high, HTuple extractWidth, HTuple completeJunctions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1511);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, low);
			SZXCArimAPI.Store(expr_0A, 2, high);
			SZXCArimAPI.Store(expr_0A, 3, extractWidth);
			SZXCArimAPI.Store(expr_0A, 4, completeJunctions);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			SZXCArimAPI.UnpinTuple(extractWidth);
			SZXCArimAPI.UnpinTuple(completeJunctions);
			num = HObject.LoadNew(expr_0A, 1, num, out lines);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LinesGauss(HObject image, out HObject lines, HTuple sigma, HTuple low, HTuple high, HTuple lightDark, HTuple extractWidth, HTuple lineModel, HTuple completeJunctions)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1512);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, low);
			SZXCArimAPI.Store(expr_0A, 2, high);
			SZXCArimAPI.Store(expr_0A, 3, lightDark);
			SZXCArimAPI.Store(expr_0A, 4, extractWidth);
			SZXCArimAPI.Store(expr_0A, 5, lineModel);
			SZXCArimAPI.Store(expr_0A, 6, completeJunctions);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			SZXCArimAPI.UnpinTuple(lightDark);
			SZXCArimAPI.UnpinTuple(extractWidth);
			SZXCArimAPI.UnpinTuple(lineModel);
			SZXCArimAPI.UnpinTuple(completeJunctions);
			num = HObject.LoadNew(expr_0A, 1, num, out lines);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LinesFacet(HObject image, out HObject lines, HTuple maskSize, HTuple low, HTuple high, HTuple lightDark)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1513);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskSize);
			SZXCArimAPI.Store(expr_0A, 1, low);
			SZXCArimAPI.Store(expr_0A, 2, high);
			SZXCArimAPI.Store(expr_0A, 3, lightDark);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			SZXCArimAPI.UnpinTuple(lightDark);
			num = HObject.LoadNew(expr_0A, 1, num, out lines);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void GenFilterMask(out HObject imageFilter, HTuple filterMask, HTuple scale, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1514);
			SZXCArimAPI.Store(expr_0A, 0, filterMask);
			SZXCArimAPI.Store(expr_0A, 1, scale);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterMask);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenMeanFilter(out HObject imageMean, HTuple maskShape, HTuple diameter1, HTuple diameter2, HTuple phi, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1515);
			SZXCArimAPI.Store(expr_0A, 0, maskShape);
			SZXCArimAPI.Store(expr_0A, 1, diameter1);
			SZXCArimAPI.Store(expr_0A, 2, diameter2);
			SZXCArimAPI.Store(expr_0A, 3, phi);
			SZXCArimAPI.Store(expr_0A, 4, norm);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskShape);
			SZXCArimAPI.UnpinTuple(diameter1);
			SZXCArimAPI.UnpinTuple(diameter2);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMean);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenGaussFilter(out HObject imageGauss, HTuple sigma1, HTuple sigma2, HTuple phi, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1516);
			SZXCArimAPI.Store(expr_0A, 0, sigma1);
			SZXCArimAPI.Store(expr_0A, 1, sigma2);
			SZXCArimAPI.Store(expr_0A, 2, phi);
			SZXCArimAPI.Store(expr_0A, 3, norm);
			SZXCArimAPI.Store(expr_0A, 4, mode);
			SZXCArimAPI.Store(expr_0A, 5, width);
			SZXCArimAPI.Store(expr_0A, 6, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma1);
			SZXCArimAPI.UnpinTuple(sigma2);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGauss);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenDerivativeFilter(out HObject imageDerivative, HTuple derivative, HTuple exponent, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1517);
			SZXCArimAPI.Store(expr_0A, 0, derivative);
			SZXCArimAPI.Store(expr_0A, 1, exponent);
			SZXCArimAPI.Store(expr_0A, 2, norm);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(derivative);
			SZXCArimAPI.UnpinTuple(exponent);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageDerivative);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenStdBandpass(out HObject imageFilter, HTuple frequency, HTuple sigma, HTuple type, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1518);
			SZXCArimAPI.Store(expr_0A, 0, frequency);
			SZXCArimAPI.Store(expr_0A, 1, sigma);
			SZXCArimAPI.Store(expr_0A, 2, type);
			SZXCArimAPI.Store(expr_0A, 3, norm);
			SZXCArimAPI.Store(expr_0A, 4, mode);
			SZXCArimAPI.Store(expr_0A, 5, width);
			SZXCArimAPI.Store(expr_0A, 6, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(frequency);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenSinBandpass(out HObject imageFilter, HTuple frequency, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1519);
			SZXCArimAPI.Store(expr_0A, 0, frequency);
			SZXCArimAPI.Store(expr_0A, 1, norm);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(frequency);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenBandfilter(out HObject imageFilter, HTuple minFrequency, HTuple maxFrequency, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1520);
			SZXCArimAPI.Store(expr_0A, 0, minFrequency);
			SZXCArimAPI.Store(expr_0A, 1, maxFrequency);
			SZXCArimAPI.Store(expr_0A, 2, norm);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minFrequency);
			SZXCArimAPI.UnpinTuple(maxFrequency);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenBandpass(out HObject imageBandpass, HTuple minFrequency, HTuple maxFrequency, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1521);
			SZXCArimAPI.Store(expr_0A, 0, minFrequency);
			SZXCArimAPI.Store(expr_0A, 1, maxFrequency);
			SZXCArimAPI.Store(expr_0A, 2, norm);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.Store(expr_0A, 4, width);
			SZXCArimAPI.Store(expr_0A, 5, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minFrequency);
			SZXCArimAPI.UnpinTuple(maxFrequency);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageBandpass);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenLowpass(out HObject imageLowpass, HTuple frequency, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1522);
			SZXCArimAPI.Store(expr_0A, 0, frequency);
			SZXCArimAPI.Store(expr_0A, 1, norm);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(frequency);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageLowpass);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenHighpass(out HObject imageHighpass, HTuple frequency, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1523);
			SZXCArimAPI.Store(expr_0A, 0, frequency);
			SZXCArimAPI.Store(expr_0A, 1, norm);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.Store(expr_0A, 4, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(frequency);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageHighpass);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PowerLn(HObject image, out HObject imageResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1524);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PowerReal(HObject image, out HObject imageResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1525);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PowerByte(HObject image, out HObject powerByte)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1526);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out powerByte);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PhaseDeg(HObject imageComplex, out HObject imagePhase)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1527);
			SZXCArimAPI.Store(expr_0A, 1, imageComplex);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePhase);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageComplex);
		}

		public static void PhaseRad(HObject imageComplex, out HObject imagePhase)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1528);
			SZXCArimAPI.Store(expr_0A, 1, imageComplex);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePhase);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageComplex);
		}

		public static void EnergyGabor(HObject imageGabor, HObject imageHilbert, out HObject energy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1529);
			SZXCArimAPI.Store(expr_0A, 1, imageGabor);
			SZXCArimAPI.Store(expr_0A, 2, imageHilbert);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out energy);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageGabor);
			GC.KeepAlive(imageHilbert);
		}

		public static void ConvolGabor(HObject imageFFT, HObject gaborFilter, out HObject imageResultGabor, out HObject imageResultHilbert)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1530);
			SZXCArimAPI.Store(expr_0A, 1, imageFFT);
			SZXCArimAPI.Store(expr_0A, 2, gaborFilter);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResultGabor);
			num = HObject.LoadNew(expr_0A, 2, num, out imageResultHilbert);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageFFT);
			GC.KeepAlive(gaborFilter);
		}

		public static void GenGabor(out HObject imageFilter, HTuple angle, HTuple frequency, HTuple bandwidth, HTuple orientation, HTuple norm, HTuple mode, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1531);
			SZXCArimAPI.Store(expr_0A, 0, angle);
			SZXCArimAPI.Store(expr_0A, 1, frequency);
			SZXCArimAPI.Store(expr_0A, 2, bandwidth);
			SZXCArimAPI.Store(expr_0A, 3, orientation);
			SZXCArimAPI.Store(expr_0A, 4, norm);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(angle);
			SZXCArimAPI.UnpinTuple(frequency);
			SZXCArimAPI.UnpinTuple(bandwidth);
			SZXCArimAPI.UnpinTuple(orientation);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFilter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PhaseCorrelationFft(HObject imageFFT1, HObject imageFFT2, out HObject imagePhaseCorrelation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1532);
			SZXCArimAPI.Store(expr_0A, 1, imageFFT1);
			SZXCArimAPI.Store(expr_0A, 2, imageFFT2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePhaseCorrelation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageFFT1);
			GC.KeepAlive(imageFFT2);
		}

		public static void CorrelationFft(HObject imageFFT1, HObject imageFFT2, out HObject imageCorrelation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1533);
			SZXCArimAPI.Store(expr_0A, 1, imageFFT1);
			SZXCArimAPI.Store(expr_0A, 2, imageFFT2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageCorrelation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageFFT1);
			GC.KeepAlive(imageFFT2);
		}

		public static void ConvolFft(HObject imageFFT, HObject imageFilter, out HObject imageConvol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1534);
			SZXCArimAPI.Store(expr_0A, 1, imageFFT);
			SZXCArimAPI.Store(expr_0A, 2, imageFilter);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageConvol);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageFFT);
			GC.KeepAlive(imageFilter);
		}

		public static void DeserializeFftOptimizationData(HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1535);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SerializeFftOptimizationData(out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1536);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadFftOptimizationData(HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1537);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteFftOptimizationData(HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1538);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OptimizeRftSpeed(HTuple width, HTuple height, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1539);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OptimizeFftSpeed(HTuple width, HTuple height, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1540);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void RftGeneric(HObject image, out HObject imageFFT, HTuple direction, HTuple norm, HTuple resultType, HTuple width)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1541);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, direction);
			SZXCArimAPI.Store(expr_0A, 1, norm);
			SZXCArimAPI.Store(expr_0A, 2, resultType);
			SZXCArimAPI.Store(expr_0A, 3, width);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(direction);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(resultType);
			SZXCArimAPI.UnpinTuple(width);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFFT);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FftImageInv(HObject image, out HObject imageFFTInv)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1542);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFFTInv);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FftImage(HObject image, out HObject imageFFT)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1543);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFFT);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FftGeneric(HObject image, out HObject imageFFT, HTuple direction, HTuple exponent, HTuple norm, HTuple mode, HTuple resultType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1544);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, direction);
			SZXCArimAPI.Store(expr_0A, 1, exponent);
			SZXCArimAPI.Store(expr_0A, 2, norm);
			SZXCArimAPI.Store(expr_0A, 3, mode);
			SZXCArimAPI.Store(expr_0A, 4, resultType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(direction);
			SZXCArimAPI.UnpinTuple(exponent);
			SZXCArimAPI.UnpinTuple(norm);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(resultType);
			num = HObject.LoadNew(expr_0A, 1, num, out imageFFT);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ShockFilter(HObject image, out HObject sharpenedImage, HTuple theta, HTuple iterations, HTuple mode, HTuple sigma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1545);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, theta);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			SZXCArimAPI.Store(expr_0A, 3, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HObject.LoadNew(expr_0A, 1, num, out sharpenedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MeanCurvatureFlow(HObject image, out HObject imageMCF, HTuple sigma, HTuple theta, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1546);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, theta);
			SZXCArimAPI.Store(expr_0A, 2, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMCF);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CoherenceEnhancingDiff(HObject image, out HObject imageCED, HTuple sigma, HTuple rho, HTuple theta, HTuple iterations)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1547);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, rho);
			SZXCArimAPI.Store(expr_0A, 2, theta);
			SZXCArimAPI.Store(expr_0A, 3, iterations);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(rho);
			SZXCArimAPI.UnpinTuple(theta);
			SZXCArimAPI.UnpinTuple(iterations);
			num = HObject.LoadNew(expr_0A, 1, num, out imageCED);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EquHistoImage(HObject image, out HObject imageEquHisto)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1548);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEquHisto);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Illuminate(HObject image, out HObject imageIlluminate, HTuple maskWidth, HTuple maskHeight, HTuple factor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1549);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, factor);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(factor);
			num = HObject.LoadNew(expr_0A, 1, num, out imageIlluminate);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Emphasize(HObject image, out HObject imageEmphasize, HTuple maskWidth, HTuple maskHeight, HTuple factor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1550);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, maskWidth);
			SZXCArimAPI.Store(expr_0A, 1, maskHeight);
			SZXCArimAPI.Store(expr_0A, 2, factor);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maskWidth);
			SZXCArimAPI.UnpinTuple(maskHeight);
			SZXCArimAPI.UnpinTuple(factor);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEmphasize);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ScaleImageMax(HObject image, out HObject imageScaleMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1551);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageScaleMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RobinsonDir(HObject image, out HObject imageEdgeAmp, out HObject imageEdgeDir)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1552);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imageEdgeDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RobinsonAmp(HObject image, out HObject imageEdgeAmp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1553);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void KirschDir(HObject image, out HObject imageEdgeAmp, out HObject imageEdgeDir)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1554);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imageEdgeDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void KirschAmp(HObject image, out HObject imageEdgeAmp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1555);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FreiDir(HObject image, out HObject imageEdgeAmp, out HObject imageEdgeDir)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1556);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imageEdgeDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FreiAmp(HObject image, out HObject imageEdgeAmp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1557);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PrewittDir(HObject image, out HObject imageEdgeAmp, out HObject imageEdgeDir)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1558);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imageEdgeDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PrewittAmp(HObject image, out HObject imageEdgeAmp)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1559);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageEdgeAmp);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SobelAmp(HObject image, out HObject edgeAmplitude, HTuple filterType, HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1560);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterType);
			SZXCArimAPI.Store(expr_0A, 1, size);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterType);
			SZXCArimAPI.UnpinTuple(size);
			num = HObject.LoadNew(expr_0A, 1, num, out edgeAmplitude);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SobelDir(HObject image, out HObject edgeAmplitude, out HObject edgeDirection, HTuple filterType, HTuple size)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1561);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterType);
			SZXCArimAPI.Store(expr_0A, 1, size);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterType);
			SZXCArimAPI.UnpinTuple(size);
			num = HObject.LoadNew(expr_0A, 1, num, out edgeAmplitude);
			num = HObject.LoadNew(expr_0A, 2, num, out edgeDirection);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Roberts(HObject image, out HObject imageRoberts, HTuple filterType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1562);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filterType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filterType);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRoberts);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Laplace(HObject image, out HObject imageLaplace, HTuple resultType, HTuple maskSize, HTuple filterMask)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1563);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, resultType);
			SZXCArimAPI.Store(expr_0A, 1, maskSize);
			SZXCArimAPI.Store(expr_0A, 2, filterMask);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(resultType);
			SZXCArimAPI.UnpinTuple(maskSize);
			SZXCArimAPI.UnpinTuple(filterMask);
			num = HObject.LoadNew(expr_0A, 1, num, out imageLaplace);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void HighpassImage(HObject image, out HObject highpass, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1564);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out highpass);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void InfoEdges(HTuple filter, HTuple mode, HTuple alpha, out HTuple size, out HTuple coeffs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1565);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			SZXCArimAPI.Store(expr_0A, 2, alpha);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(alpha);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out size);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out coeffs);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EdgesColorSubPix(HObject image, out HObject edges, HTuple filter, HTuple alpha, HTuple low, HTuple high)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1566);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, low);
			SZXCArimAPI.Store(expr_0A, 3, high);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			num = HObject.LoadNew(expr_0A, 1, num, out edges);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EdgesColor(HObject image, out HObject imaAmp, out HObject imaDir, HTuple filter, HTuple alpha, HTuple NMS, HTuple low, HTuple high)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1567);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, NMS);
			SZXCArimAPI.Store(expr_0A, 3, low);
			SZXCArimAPI.Store(expr_0A, 4, high);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(NMS);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			num = HObject.LoadNew(expr_0A, 1, num, out imaAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imaDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EdgesSubPix(HObject image, out HObject edges, HTuple filter, HTuple alpha, HTuple low, HTuple high)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1568);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, low);
			SZXCArimAPI.Store(expr_0A, 3, high);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			num = HObject.LoadNew(expr_0A, 1, num, out edges);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void EdgesImage(HObject image, out HObject imaAmp, out HObject imaDir, HTuple filter, HTuple alpha, HTuple NMS, HTuple low, HTuple high)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1569);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, filter);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, NMS);
			SZXCArimAPI.Store(expr_0A, 3, low);
			SZXCArimAPI.Store(expr_0A, 4, high);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(filter);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(NMS);
			SZXCArimAPI.UnpinTuple(low);
			SZXCArimAPI.UnpinTuple(high);
			num = HObject.LoadNew(expr_0A, 1, num, out imaAmp);
			num = HObject.LoadNew(expr_0A, 2, num, out imaDir);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DerivateGauss(HObject image, out HObject derivGauss, HTuple sigma, HTuple component)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1570);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, component);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(component);
			num = HObject.LoadNew(expr_0A, 1, num, out derivGauss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LaplaceOfGauss(HObject image, out HObject imageLaplace, HTuple sigma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1571);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			num = HObject.LoadNew(expr_0A, 1, num, out imageLaplace);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DiffOfGauss(HObject image, out HObject diffOfGauss, HTuple sigma, HTuple sigFactor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1572);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sigma);
			SZXCArimAPI.Store(expr_0A, 1, sigFactor);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigma);
			SZXCArimAPI.UnpinTuple(sigFactor);
			num = HObject.LoadNew(expr_0A, 1, num, out diffOfGauss);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CloseEdgesLength(HObject edges, HObject gradient, out HObject closedEdges, HTuple minAmplitude, HTuple maxGapLength)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1573);
			SZXCArimAPI.Store(expr_0A, 1, edges);
			SZXCArimAPI.Store(expr_0A, 2, gradient);
			SZXCArimAPI.Store(expr_0A, 0, minAmplitude);
			SZXCArimAPI.Store(expr_0A, 1, maxGapLength);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minAmplitude);
			SZXCArimAPI.UnpinTuple(maxGapLength);
			num = HObject.LoadNew(expr_0A, 1, num, out closedEdges);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(edges);
			GC.KeepAlive(gradient);
		}

		public static void CloseEdges(HObject edges, HObject edgeImage, out HObject regionResult, HTuple minAmplitude)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1574);
			SZXCArimAPI.Store(expr_0A, 1, edges);
			SZXCArimAPI.Store(expr_0A, 2, edgeImage);
			SZXCArimAPI.Store(expr_0A, 0, minAmplitude);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(minAmplitude);
			num = HObject.LoadNew(expr_0A, 1, num, out regionResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(edges);
			GC.KeepAlive(edgeImage);
		}

		public static void DetectEdgeSegments(HObject image, HTuple sobelSize, HTuple minAmplitude, HTuple maxDistance, HTuple minLength, out HTuple beginRow, out HTuple beginCol, out HTuple endRow, out HTuple endCol)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1575);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, sobelSize);
			SZXCArimAPI.Store(expr_0A, 1, minAmplitude);
			SZXCArimAPI.Store(expr_0A, 2, maxDistance);
			SZXCArimAPI.Store(expr_0A, 3, minLength);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sobelSize);
			SZXCArimAPI.UnpinTuple(minAmplitude);
			SZXCArimAPI.UnpinTuple(maxDistance);
			SZXCArimAPI.UnpinTuple(minLength);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out beginRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out beginCol);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out endRow);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out endCol);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClearAllColorTransLuts()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1576);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearColorTransLut(HTuple colorTransLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1577);
			SZXCArimAPI.Store(expr_0A, 0, colorTransLUTHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(colorTransLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ApplyColorTransLut(HObject image1, HObject image2, HObject image3, out HObject imageResult1, out HObject imageResult2, out HObject imageResult3, HTuple colorTransLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1578);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 3, image3);
			SZXCArimAPI.Store(expr_0A, 0, colorTransLUTHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(colorTransLUTHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult1);
			num = HObject.LoadNew(expr_0A, 2, num, out imageResult2);
			num = HObject.LoadNew(expr_0A, 3, num, out imageResult3);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
			GC.KeepAlive(image3);
		}

		public static void CreateColorTransLut(HTuple colorSpace, HTuple transDirection, HTuple numBits, out HTuple colorTransLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1579);
			SZXCArimAPI.Store(expr_0A, 0, colorSpace);
			SZXCArimAPI.Store(expr_0A, 1, transDirection);
			SZXCArimAPI.Store(expr_0A, 2, numBits);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(colorSpace);
			SZXCArimAPI.UnpinTuple(transDirection);
			SZXCArimAPI.UnpinTuple(numBits);
			num = HTuple.LoadNew(expr_0A, 0, num, out colorTransLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CfaToRgb(HObject CFAImage, out HObject RGBImage, HTuple CFAType, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1580);
			SZXCArimAPI.Store(expr_0A, 1, CFAImage);
			SZXCArimAPI.Store(expr_0A, 0, CFAType);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(CFAType);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out RGBImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(CFAImage);
		}

		public static void Rgb1ToGray(HObject RGBImage, out HObject grayImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1581);
			SZXCArimAPI.Store(expr_0A, 1, RGBImage);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out grayImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(RGBImage);
		}

		public static void Rgb3ToGray(HObject imageRed, HObject imageGreen, HObject imageBlue, out HObject imageGray)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1582);
			SZXCArimAPI.Store(expr_0A, 1, imageRed);
			SZXCArimAPI.Store(expr_0A, 2, imageGreen);
			SZXCArimAPI.Store(expr_0A, 3, imageBlue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGray);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRed);
			GC.KeepAlive(imageGreen);
			GC.KeepAlive(imageBlue);
		}

		public static void TransFromRgb(HObject imageRed, HObject imageGreen, HObject imageBlue, out HObject imageResult1, out HObject imageResult2, out HObject imageResult3, HTuple colorSpace)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1583);
			SZXCArimAPI.Store(expr_0A, 1, imageRed);
			SZXCArimAPI.Store(expr_0A, 2, imageGreen);
			SZXCArimAPI.Store(expr_0A, 3, imageBlue);
			SZXCArimAPI.Store(expr_0A, 0, colorSpace);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(colorSpace);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult1);
			num = HObject.LoadNew(expr_0A, 2, num, out imageResult2);
			num = HObject.LoadNew(expr_0A, 3, num, out imageResult3);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageRed);
			GC.KeepAlive(imageGreen);
			GC.KeepAlive(imageBlue);
		}

		public static void TransToRgb(HObject imageInput1, HObject imageInput2, HObject imageInput3, out HObject imageRed, out HObject imageGreen, out HObject imageBlue, HTuple colorSpace)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1584);
			SZXCArimAPI.Store(expr_0A, 1, imageInput1);
			SZXCArimAPI.Store(expr_0A, 2, imageInput2);
			SZXCArimAPI.Store(expr_0A, 3, imageInput3);
			SZXCArimAPI.Store(expr_0A, 0, colorSpace);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(colorSpace);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRed);
			num = HObject.LoadNew(expr_0A, 2, num, out imageGreen);
			num = HObject.LoadNew(expr_0A, 3, num, out imageBlue);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageInput1);
			GC.KeepAlive(imageInput2);
			GC.KeepAlive(imageInput3);
		}

		public static void BitMask(HObject image, out HObject imageMask, HTuple bitMask)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1585);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, bitMask);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bitMask);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMask);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BitSlice(HObject image, out HObject imageSlice, HTuple bit)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1586);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, bit);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bit);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSlice);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BitRshift(HObject image, out HObject imageRShift, HTuple shift)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1587);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, shift);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shift);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRShift);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BitLshift(HObject image, out HObject imageLShift, HTuple shift)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1588);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, shift);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shift);
			num = HObject.LoadNew(expr_0A, 1, num, out imageLShift);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BitNot(HObject image, out HObject imageNot)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1589);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageNot);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BitXor(HObject image1, HObject image2, out HObject imageXor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1590);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageXor);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void BitOr(HObject image1, HObject image2, out HObject imageOr)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1591);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageOr);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void BitAnd(HObject image1, HObject image2, out HObject imageAnd)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1592);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAnd);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void GammaImage(HObject image, out HObject gammaImage, HTuple gamma, HTuple offset, HTuple threshold, HTuple maxGray, HTuple encode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1593);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, gamma);
			SZXCArimAPI.Store(expr_0A, 1, offset);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.Store(expr_0A, 3, maxGray);
			SZXCArimAPI.Store(expr_0A, 4, encode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(gamma);
			SZXCArimAPI.UnpinTuple(offset);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(maxGray);
			SZXCArimAPI.UnpinTuple(encode);
			num = HObject.LoadNew(expr_0A, 1, num, out gammaImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PowImage(HObject image, out HObject powImage, HTuple exponent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1594);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, exponent);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(exponent);
			num = HObject.LoadNew(expr_0A, 1, num, out powImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ExpImage(HObject image, out HObject expImage, HTuple baseVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1595);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, baseVal);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(baseVal);
			num = HObject.LoadNew(expr_0A, 1, num, out expImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void LogImage(HObject image, out HObject logImage, HTuple baseVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1596);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, baseVal);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(baseVal);
			num = HObject.LoadNew(expr_0A, 1, num, out logImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void Atan2Image(HObject imageY, HObject imageX, out HObject arctanImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1597);
			SZXCArimAPI.Store(expr_0A, 1, imageY);
			SZXCArimAPI.Store(expr_0A, 2, imageX);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out arctanImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageY);
			GC.KeepAlive(imageX);
		}

		public static void AtanImage(HObject image, out HObject arctanImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1598);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out arctanImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AcosImage(HObject image, out HObject arccosImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1599);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out arccosImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AsinImage(HObject image, out HObject arcsinImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1600);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out arcsinImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void TanImage(HObject image, out HObject tanImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1601);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out tanImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void CosImage(HObject image, out HObject cosImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1602);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out cosImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SinImage(HObject image, out HObject sinImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1603);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out sinImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AbsDiffImage(HObject image1, HObject image2, out HObject imageAbsDiff, HTuple mult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1604);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAbsDiff);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void SqrtImage(HObject image, out HObject sqrtImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1605);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out sqrtImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SubImage(HObject imageMinuend, HObject imageSubtrahend, out HObject imageSub, HTuple mult, HTuple add)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1606);
			SZXCArimAPI.Store(expr_0A, 1, imageMinuend);
			SZXCArimAPI.Store(expr_0A, 2, imageSubtrahend);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.Store(expr_0A, 1, add);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSub);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageMinuend);
			GC.KeepAlive(imageSubtrahend);
		}

		public static void ScaleImage(HObject image, out HObject imageScaled, HTuple mult, HTuple add)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1607);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.Store(expr_0A, 1, add);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HObject.LoadNew(expr_0A, 1, num, out imageScaled);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DivImage(HObject image1, HObject image2, out HObject imageResult, HTuple mult, HTuple add)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1608);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.Store(expr_0A, 1, add);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void MultImage(HObject image1, HObject image2, out HObject imageResult, HTuple mult, HTuple add)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1609);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.Store(expr_0A, 1, add);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void AddImage(HObject image1, HObject image2, out HObject imageResult, HTuple mult, HTuple add)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1610);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.Store(expr_0A, 0, mult);
			SZXCArimAPI.Store(expr_0A, 1, add);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mult);
			SZXCArimAPI.UnpinTuple(add);
			num = HObject.LoadNew(expr_0A, 1, num, out imageResult);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void AbsImage(HObject image, out HObject imageAbs)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1611);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAbs);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MinImage(HObject image1, HObject image2, out HObject imageMin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1612);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMin);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void MaxImage(HObject image1, HObject image2, out HObject imageMax)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1613);
			SZXCArimAPI.Store(expr_0A, 1, image1);
			SZXCArimAPI.Store(expr_0A, 2, image2);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMax);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image1);
			GC.KeepAlive(image2);
		}

		public static void InvertImage(HObject image, out HObject imageInvert)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1614);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageInvert);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AdjustMosaicImages(HObject images, out HObject correctedImages, HTuple from, HTuple to, HTuple referenceImage, HTuple homMatrices2D, HTuple estimationMethod, HTuple estimateParameters, HTuple OECFModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1615);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, from);
			SZXCArimAPI.Store(expr_0A, 1, to);
			SZXCArimAPI.Store(expr_0A, 2, referenceImage);
			SZXCArimAPI.Store(expr_0A, 3, homMatrices2D);
			SZXCArimAPI.Store(expr_0A, 4, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 5, estimateParameters);
			SZXCArimAPI.Store(expr_0A, 6, OECFModel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(from);
			SZXCArimAPI.UnpinTuple(to);
			SZXCArimAPI.UnpinTuple(referenceImage);
			SZXCArimAPI.UnpinTuple(homMatrices2D);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(estimateParameters);
			SZXCArimAPI.UnpinTuple(OECFModel);
			num = HObject.LoadNew(expr_0A, 1, num, out correctedImages);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void GenCubeMapMosaic(HObject images, out HObject front, out HObject rear, out HObject left, out HObject right, out HObject top, out HObject bottom, HTuple cameraMatrices, HTuple rotationMatrices, HTuple cubeMapDimension, HTuple stackingOrder, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1616);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, cameraMatrices);
			SZXCArimAPI.Store(expr_0A, 1, rotationMatrices);
			SZXCArimAPI.Store(expr_0A, 2, cubeMapDimension);
			SZXCArimAPI.Store(expr_0A, 3, stackingOrder);
			SZXCArimAPI.Store(expr_0A, 4, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraMatrices);
			SZXCArimAPI.UnpinTuple(rotationMatrices);
			SZXCArimAPI.UnpinTuple(cubeMapDimension);
			SZXCArimAPI.UnpinTuple(stackingOrder);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out front);
			num = HObject.LoadNew(expr_0A, 2, num, out rear);
			num = HObject.LoadNew(expr_0A, 3, num, out left);
			num = HObject.LoadNew(expr_0A, 4, num, out right);
			num = HObject.LoadNew(expr_0A, 5, num, out top);
			num = HObject.LoadNew(expr_0A, 6, num, out bottom);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void GenSphericalMosaic(HObject images, out HObject mosaicImage, HTuple cameraMatrices, HTuple rotationMatrices, HTuple latMin, HTuple latMax, HTuple longMin, HTuple longMax, HTuple latLongStep, HTuple stackingOrder, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1617);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, cameraMatrices);
			SZXCArimAPI.Store(expr_0A, 1, rotationMatrices);
			SZXCArimAPI.Store(expr_0A, 2, latMin);
			SZXCArimAPI.Store(expr_0A, 3, latMax);
			SZXCArimAPI.Store(expr_0A, 4, longMin);
			SZXCArimAPI.Store(expr_0A, 5, longMax);
			SZXCArimAPI.Store(expr_0A, 6, latLongStep);
			SZXCArimAPI.Store(expr_0A, 7, stackingOrder);
			SZXCArimAPI.Store(expr_0A, 8, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraMatrices);
			SZXCArimAPI.UnpinTuple(rotationMatrices);
			SZXCArimAPI.UnpinTuple(latMin);
			SZXCArimAPI.UnpinTuple(latMax);
			SZXCArimAPI.UnpinTuple(longMin);
			SZXCArimAPI.UnpinTuple(longMax);
			SZXCArimAPI.UnpinTuple(latLongStep);
			SZXCArimAPI.UnpinTuple(stackingOrder);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out mosaicImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void GenBundleAdjustedMosaic(HObject images, out HObject mosaicImage, HTuple homMatrices2D, HTuple stackingOrder, HTuple transformDomain, out HTuple transMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1618);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, homMatrices2D);
			SZXCArimAPI.Store(expr_0A, 1, stackingOrder);
			SZXCArimAPI.Store(expr_0A, 2, transformDomain);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMatrices2D);
			SZXCArimAPI.UnpinTuple(stackingOrder);
			SZXCArimAPI.UnpinTuple(transformDomain);
			num = HObject.LoadNew(expr_0A, 1, num, out mosaicImage);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out transMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void GenProjectiveMosaic(HObject images, out HObject mosaicImage, HTuple startImage, HTuple mappingSource, HTuple mappingDest, HTuple homMatrices2D, HTuple stackingOrder, HTuple transformDomain, out HTuple mosaicMatrices2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1619);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, startImage);
			SZXCArimAPI.Store(expr_0A, 1, mappingSource);
			SZXCArimAPI.Store(expr_0A, 2, mappingDest);
			SZXCArimAPI.Store(expr_0A, 3, homMatrices2D);
			SZXCArimAPI.Store(expr_0A, 4, stackingOrder);
			SZXCArimAPI.Store(expr_0A, 5, transformDomain);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(startImage);
			SZXCArimAPI.UnpinTuple(mappingSource);
			SZXCArimAPI.UnpinTuple(mappingDest);
			SZXCArimAPI.UnpinTuple(homMatrices2D);
			SZXCArimAPI.UnpinTuple(stackingOrder);
			SZXCArimAPI.UnpinTuple(transformDomain);
			num = HObject.LoadNew(expr_0A, 1, num, out mosaicImage);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out mosaicMatrices2D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void ProjectiveTransImageSize(HObject image, out HObject transImage, HTuple homMat2D, HTuple interpolation, HTuple width, HTuple height, HTuple transformDomain)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1620);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.Store(expr_0A, 4, transformDomain);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(transformDomain);
			num = HObject.LoadNew(expr_0A, 1, num, out transImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ProjectiveTransImage(HObject image, out HObject transImage, HTuple homMat2D, HTuple interpolation, HTuple adaptImageSize, HTuple transformDomain)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1621);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.Store(expr_0A, 2, adaptImageSize);
			SZXCArimAPI.Store(expr_0A, 3, transformDomain);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(adaptImageSize);
			SZXCArimAPI.UnpinTuple(transformDomain);
			num = HObject.LoadNew(expr_0A, 1, num, out transImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AffineTransImageSize(HObject image, out HObject imageAffineTrans, HTuple homMat2D, HTuple interpolation, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1622);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAffineTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void AffineTransImage(HObject image, out HObject imageAffineTrans, HTuple homMat2D, HTuple interpolation, HTuple adaptImageSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1623);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, homMat2D);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.Store(expr_0A, 2, adaptImageSize);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(interpolation);
			SZXCArimAPI.UnpinTuple(adaptImageSize);
			num = HObject.LoadNew(expr_0A, 1, num, out imageAffineTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ZoomImageFactor(HObject image, out HObject imageZoomed, HTuple scaleWidth, HTuple scaleHeight, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1624);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, scaleWidth);
			SZXCArimAPI.Store(expr_0A, 1, scaleHeight);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scaleWidth);
			SZXCArimAPI.UnpinTuple(scaleHeight);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out imageZoomed);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ZoomImageSize(HObject image, out HObject imageZoom, HTuple width, HTuple height, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1625);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out imageZoom);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void MirrorImage(HObject image, out HObject imageMirror, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1626);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMirror);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RotateImage(HObject image, out HObject imageRotate, HTuple phi, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1627);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, phi);
			SZXCArimAPI.Store(expr_0A, 1, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRotate);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PolarTransImageInv(HObject polarImage, out HObject XYTransImage, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple width, HTuple height, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1628);
			SZXCArimAPI.Store(expr_0A, 1, polarImage);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, angleStart);
			SZXCArimAPI.Store(expr_0A, 3, angleEnd);
			SZXCArimAPI.Store(expr_0A, 4, radiusStart);
			SZXCArimAPI.Store(expr_0A, 5, radiusEnd);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.Store(expr_0A, 8, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out XYTransImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(polarImage);
		}

		public static void PolarTransImageExt(HObject image, out HObject polarTransImage, HTuple row, HTuple column, HTuple angleStart, HTuple angleEnd, HTuple radiusStart, HTuple radiusEnd, HTuple width, HTuple height, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1629);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, angleStart);
			SZXCArimAPI.Store(expr_0A, 3, angleEnd);
			SZXCArimAPI.Store(expr_0A, 4, radiusStart);
			SZXCArimAPI.Store(expr_0A, 5, radiusEnd);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.Store(expr_0A, 8, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleEnd);
			SZXCArimAPI.UnpinTuple(radiusStart);
			SZXCArimAPI.UnpinTuple(radiusEnd);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out polarTransImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void PolarTransImage(HObject imageXY, out HObject imagePolar, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1630);
			SZXCArimAPI.Store(expr_0A, 1, imageXY);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imagePolar);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(imageXY);
		}

		public static void VectorFieldToHomMat2d(HObject vectorField, out HTuple homMat2D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1631);
			SZXCArimAPI.Store(expr_0A, 1, vectorField);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat2D);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(vectorField);
		}

		public static void DeserializeXld(out HObject XLD, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1632);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out XLD);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeXld(HObject XLD, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1633);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void ReadPolygonXldDxf(out HObject polygons, HTuple fileName, HTuple genParamName, HTuple genParamValue, out HTuple dxfStatus)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1634);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out polygons);
			num = HTuple.LoadNew(expr_0A, 0, num, out dxfStatus);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WritePolygonXldDxf(HObject polygons, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1635);
			SZXCArimAPI.Store(expr_0A, 1, polygons);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(polygons);
		}

		public static void ReadContourXldDxf(out HObject contours, HTuple fileName, HTuple genParamName, HTuple genParamValue, out HTuple dxfStatus)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1636);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out contours);
			num = HTuple.LoadNew(expr_0A, 0, num, out dxfStatus);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteContourXldDxf(HObject contours, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1637);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(contours);
		}

		public static void CopyFile(HTuple sourceFile, HTuple destinationFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1638);
			SZXCArimAPI.Store(expr_0A, 0, sourceFile);
			SZXCArimAPI.Store(expr_0A, 1, destinationFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sourceFile);
			SZXCArimAPI.UnpinTuple(destinationFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetCurrentDir(HTuple dirName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1639);
			SZXCArimAPI.Store(expr_0A, 0, dirName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dirName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetCurrentDir(out HTuple dirName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1640);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out dirName);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveDir(HTuple dirName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1641);
			SZXCArimAPI.Store(expr_0A, 0, dirName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dirName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void MakeDir(HTuple dirName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1642);
			SZXCArimAPI.Store(expr_0A, 0, dirName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dirName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ListFiles(HTuple directory, HTuple options, out HTuple files)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1643);
			SZXCArimAPI.Store(expr_0A, 0, directory);
			SZXCArimAPI.Store(expr_0A, 1, options);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(directory);
			SZXCArimAPI.UnpinTuple(options);
			num = HTuple.LoadNew(expr_0A, 0, num, out files);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeleteFile(HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1644);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FileExists(HTuple fileName, out HTuple fileExists)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1645);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out fileExists);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadObject(out HObject objectVal, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1646);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteObject(HObject objectVal, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1647);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(objectVal);
		}

		public static void DeserializeObject(out HObject objectVal, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1648);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeObject(HObject objectVal, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1649);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objectVal);
		}

		public static void DeserializeImage(out HObject image, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1650);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeImage(HObject image, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1651);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void DeserializeRegion(out HObject region, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1652);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeRegion(HObject region, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1653);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void WriteRegion(HObject region, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1654);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(region);
		}

		public static void WriteImage(HObject image, HTuple format, HTuple fillColor, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1655);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, format);
			SZXCArimAPI.Store(expr_0A, 1, fillColor);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(format);
			SZXCArimAPI.UnpinTuple(fillColor);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void ReadSequence(out HObject image, HTuple headerSize, HTuple sourceWidth, HTuple sourceHeight, HTuple startRow, HTuple startColumn, HTuple destWidth, HTuple destHeight, HTuple pixelType, HTuple bitOrder, HTuple byteOrder, HTuple pad, HTuple index, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1656);
			SZXCArimAPI.Store(expr_0A, 0, headerSize);
			SZXCArimAPI.Store(expr_0A, 1, sourceWidth);
			SZXCArimAPI.Store(expr_0A, 2, sourceHeight);
			SZXCArimAPI.Store(expr_0A, 3, startRow);
			SZXCArimAPI.Store(expr_0A, 4, startColumn);
			SZXCArimAPI.Store(expr_0A, 5, destWidth);
			SZXCArimAPI.Store(expr_0A, 6, destHeight);
			SZXCArimAPI.Store(expr_0A, 7, pixelType);
			SZXCArimAPI.Store(expr_0A, 8, bitOrder);
			SZXCArimAPI.Store(expr_0A, 9, byteOrder);
			SZXCArimAPI.Store(expr_0A, 10, pad);
			SZXCArimAPI.Store(expr_0A, 11, index);
			SZXCArimAPI.Store(expr_0A, 12, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(headerSize);
			SZXCArimAPI.UnpinTuple(sourceWidth);
			SZXCArimAPI.UnpinTuple(sourceHeight);
			SZXCArimAPI.UnpinTuple(startRow);
			SZXCArimAPI.UnpinTuple(startColumn);
			SZXCArimAPI.UnpinTuple(destWidth);
			SZXCArimAPI.UnpinTuple(destHeight);
			SZXCArimAPI.UnpinTuple(pixelType);
			SZXCArimAPI.UnpinTuple(bitOrder);
			SZXCArimAPI.UnpinTuple(byteOrder);
			SZXCArimAPI.UnpinTuple(pad);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadRegion(out HObject region, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1657);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_0A, 1, num, out region);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadImage(out HObject image, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1658);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void OpenFile(HTuple fileName, HTuple fileType, out HTuple fileHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1659);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, fileType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(fileType);
			num = HTuple.LoadNew(expr_0A, 0, num, out fileHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FwriteString(HTuple fileHandle, HTuple stringVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1660);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.Store(expr_0A, 1, stringVal);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FreadLine(HTuple fileHandle, out HTuple outLine, out HTuple isEOF)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1661);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out outLine);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out isEOF);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FreadString(HTuple fileHandle, out HTuple outString, out HTuple isEOF)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1662);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out outString);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out isEOF);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FreadChar(HTuple fileHandle, out HTuple charVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1663);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out charVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FnewLine(HTuple fileHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1664);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseFile(HTuple fileHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1665);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseAllFiles()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1666);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TestClosedXld(HObject XLD, out HTuple isClosed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1667);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isClosed);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void GetGrayvalContourXld(HObject image, HObject contour, HTuple interpolation, out HTuple grayval)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1668);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, contour);
			SZXCArimAPI.Store(expr_0A, 0, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HTuple.LoadNew(expr_0A, 0, num, out grayval);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(contour);
		}

		public static void MomentsAnyPointsXld(HObject XLD, HTuple mode, HTuple area, HTuple centerRow, HTuple centerCol, HTuple p, HTuple q, out HTuple m)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1669);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, area);
			SZXCArimAPI.Store(expr_0A, 2, centerRow);
			SZXCArimAPI.Store(expr_0A, 3, centerCol);
			SZXCArimAPI.Store(expr_0A, 4, p);
			SZXCArimAPI.Store(expr_0A, 5, q);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(area);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(p);
			SZXCArimAPI.UnpinTuple(q);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void EccentricityPointsXld(HObject XLD, out HTuple anisometry)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1670);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out anisometry);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void EllipticAxisPointsXld(HObject XLD, out HTuple ra, out HTuple rb, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1671);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ra);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rb);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void OrientationPointsXld(HObject XLD, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1672);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void MomentsPointsXld(HObject XLD, out HTuple m11, out HTuple m20, out HTuple m02)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1673);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m11);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m20);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m02);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void AreaCenterPointsXld(HObject XLD, out HTuple area, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1674);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out area);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void TestSelfIntersectionXld(HObject XLD, HTuple closeXLD, out HTuple doesIntersect)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1675);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, closeXLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(closeXLD);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out doesIntersect);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void SelectXldPoint(HObject XLDs, out HObject destXLDs, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1676);
			SZXCArimAPI.Store(expr_0A, 1, XLDs);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out destXLDs);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLDs);
		}

		public static void TestXldPoint(HObject XLD, HTuple row, HTuple column, out HTuple isInside)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1677);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isInside);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void SelectShapeXld(HObject XLD, out HObject selectedXLD, HTuple features, HTuple operation, HTuple min, HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1678);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, features);
			SZXCArimAPI.Store(expr_0A, 1, operation);
			SZXCArimAPI.Store(expr_0A, 2, min);
			SZXCArimAPI.Store(expr_0A, 3, max);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedXLD);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void OrientationXld(HObject XLD, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1679);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void EccentricityXld(HObject XLD, out HTuple anisometry, out HTuple bulkiness, out HTuple structureFactor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1680);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out anisometry);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out bulkiness);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out structureFactor);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void CompactnessXld(HObject XLD, out HTuple compactness)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1681);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out compactness);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void DiameterXld(HObject XLD, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2, out HTuple diameter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1682);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out diameter);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void ConvexityXld(HObject XLD, out HTuple convexity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1683);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out convexity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void CircularityXld(HObject XLD, out HTuple circularity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1684);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out circularity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void EllipticAxisXld(HObject XLD, out HTuple ra, out HTuple rb, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1685);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ra);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rb);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void SmallestRectangle2Xld(HObject XLD, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1686);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out length2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void SmallestRectangle1Xld(HObject XLD, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1687);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void SmallestCircleXld(HObject XLD, out HTuple row, out HTuple column, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1688);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void ShapeTransXld(HObject XLD, out HObject XLDTrans, HTuple type)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1689);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			num = HObject.LoadNew(expr_0A, 1, num, out XLDTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void LengthXld(HObject XLD, out HTuple length)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1690);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out length);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void MomentsAnyXld(HObject XLD, HTuple mode, HTuple pointOrder, HTuple area, HTuple centerRow, HTuple centerCol, HTuple p, HTuple q, out HTuple m)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1691);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, pointOrder);
			SZXCArimAPI.Store(expr_0A, 2, area);
			SZXCArimAPI.Store(expr_0A, 3, centerRow);
			SZXCArimAPI.Store(expr_0A, 4, centerCol);
			SZXCArimAPI.Store(expr_0A, 5, p);
			SZXCArimAPI.Store(expr_0A, 6, q);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(pointOrder);
			SZXCArimAPI.UnpinTuple(area);
			SZXCArimAPI.UnpinTuple(centerRow);
			SZXCArimAPI.UnpinTuple(centerCol);
			SZXCArimAPI.UnpinTuple(p);
			SZXCArimAPI.UnpinTuple(q);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void MomentsXld(HObject XLD, out HTuple m11, out HTuple m20, out HTuple m02)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1692);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m11);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m20);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m02);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void AreaCenterXld(HObject XLD, out HTuple area, out HTuple row, out HTuple column, out HTuple pointOrder)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1693);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out area);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 3, num, out pointOrder);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void MomentsRegionCentralInvar(HObject regions, out HTuple PSI1, out HTuple PSI2, out HTuple PSI3, out HTuple PSI4)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1694);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out PSI1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out PSI2);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out PSI3);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out PSI4);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void MomentsRegionCentral(HObject regions, out HTuple i1, out HTuple i2, out HTuple i3, out HTuple i4)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1695);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out i1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out i2);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out i3);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out i4);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void MomentsRegion3rdInvar(HObject regions, out HTuple m21, out HTuple m12, out HTuple m03, out HTuple m30)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1696);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m21);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m12);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m03);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out m30);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void MomentsRegion3rd(HObject regions, out HTuple m21, out HTuple m12, out HTuple m03, out HTuple m30)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1697);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m21);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m12);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m03);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out m30);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SmallestRectangle2(HObject regions, out HTuple row, out HTuple column, out HTuple phi, out HTuple length1, out HTuple length2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1698);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out length1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out length2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SmallestRectangle1(HObject regions, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1699);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SmallestCircle(HObject regions, out HTuple row, out HTuple column, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1700);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectShapeProto(HObject regions, HObject pattern, out HObject selectedRegions, HTuple feature, HTuple min, HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1701);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, pattern);
			SZXCArimAPI.Store(expr_0A, 0, feature);
			SZXCArimAPI.Store(expr_0A, 1, min);
			SZXCArimAPI.Store(expr_0A, 2, max);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(pattern);
		}

		public static void RegionFeatures(HObject regions, HTuple features, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1702);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectShape(HObject regions, out HObject selectedRegions, HTuple features, HTuple operation, HTuple min, HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1703);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, features);
			SZXCArimAPI.Store(expr_0A, 1, operation);
			SZXCArimAPI.Store(expr_0A, 2, min);
			SZXCArimAPI.Store(expr_0A, 3, max);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void RunlengthFeatures(HObject regions, out HTuple numRuns, out HTuple KFactor, out HTuple LFactor, out HTuple meanLength, out HTuple bytes)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1704);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numRuns);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out KFactor);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out LFactor);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out meanLength);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out bytes);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void FindNeighbors(HObject regions1, HObject regions2, HTuple maxDistance, out HTuple regionIndex1, out HTuple regionIndex2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1705);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.Store(expr_0A, 0, maxDistance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(maxDistance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out regionIndex1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out regionIndex2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void MomentsRegion2ndRelInvar(HObject regions, out HTuple PHI1, out HTuple PHI2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1706);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out PHI1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out PHI2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void MomentsRegion2ndInvar(HObject regions, out HTuple m11, out HTuple m20, out HTuple m02)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1707);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m11);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m20);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m02);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void MomentsRegion2nd(HObject regions, out HTuple m11, out HTuple m20, out HTuple m02, out HTuple ia, out HTuple ib)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1708);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out m11);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out m20);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out m02);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out ia);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out ib);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void DistanceRrMin(HObject regions1, HObject regions2, out HTuple minDistance, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1709);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out minDistance);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out row1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out column1);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out row2);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void DistanceRrMinDil(HObject regions1, HObject regions2, out HTuple minDistance)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1710);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out minDistance);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void DiameterRegion(HObject regions, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2, out HTuple diameter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1711);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out column2);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out diameter);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void TestRegionPoint(HObject regions, HTuple row, HTuple column, out HTuple isInside)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1712);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isInside);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void GetRegionIndex(HObject regions, HTuple row, HTuple column, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1713);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectRegionPoint(HObject regions, out HObject destRegions, HTuple row, HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1714);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HObject.LoadNew(expr_0A, 1, num, out destRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectShapeStd(HObject regions, out HObject selectedRegions, HTuple shape, HTuple percent)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1715);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 0, shape);
			SZXCArimAPI.Store(expr_0A, 1, percent);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(shape);
			SZXCArimAPI.UnpinTuple(percent);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void HammingDistanceNorm(HObject regions1, HObject regions2, HTuple norm, out HTuple distance, out HTuple similarity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1716);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.Store(expr_0A, 0, norm);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(norm);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out distance);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out similarity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void HammingDistance(HObject regions1, HObject regions2, out HTuple distance, out HTuple similarity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1717);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out distance);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out similarity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void Eccentricity(HObject regions, out HTuple anisometry, out HTuple bulkiness, out HTuple structureFactor)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1718);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out anisometry);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out bulkiness);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out structureFactor);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void EulerNumber(HObject regions, out HTuple eulerNumber)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1719);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out eulerNumber);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void OrientationRegion(HObject regions, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1720);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void EllipticAxis(HObject regions, out HTuple ra, out HTuple rb, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1721);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ra);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rb);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectRegionSpatial(HObject regions1, HObject regions2, HTuple direction, out HTuple regionIndex1, out HTuple regionIndex2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1722);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.Store(expr_0A, 0, direction);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(direction);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out regionIndex1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out regionIndex2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void SpatialRelation(HObject regions1, HObject regions2, HTuple percent, out HTuple regionIndex1, out HTuple regionIndex2, out HTuple relation1, out HTuple relation2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1723);
			SZXCArimAPI.Store(expr_0A, 1, regions1);
			SZXCArimAPI.Store(expr_0A, 2, regions2);
			SZXCArimAPI.Store(expr_0A, 0, percent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(percent);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out regionIndex1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out regionIndex2);
			num = HTuple.LoadNew(expr_0A, 2, num, out relation1);
			num = HTuple.LoadNew(expr_0A, 3, num, out relation2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions1);
			GC.KeepAlive(regions2);
		}

		public static void Convexity(HObject regions, out HTuple convexity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1724);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out convexity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void Contlength(HObject regions, out HTuple contLength)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1725);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out contLength);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void ConnectAndHoles(HObject regions, out HTuple numConnected, out HTuple numHoles)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1726);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numConnected);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numHoles);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void Rectangularity(HObject regions, out HTuple rectangularity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1727);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rectangularity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void Compactness(HObject regions, out HTuple compactness)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1728);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out compactness);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void Circularity(HObject regions, out HTuple circularity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1729);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out circularity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void AreaHoles(HObject regions, out HTuple area)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1730);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out area);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void AreaCenter(HObject regions, out HTuple area, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1731);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out area);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void RunlengthDistribution(HObject region, out HTuple foreground, out HTuple background)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1732);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out foreground);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out background);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
		}

		public static void Roundness(HObject regions, out HTuple distance, out HTuple sigma, out HTuple roundness, out HTuple sides)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1733);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distance);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out sigma);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out roundness);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out sides);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void InnerRectangle1(HObject regions, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1734);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out row1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out column1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out row2);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void InnerCircle(HObject regions, out HTuple row, out HTuple column, out HTuple radius)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1735);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out radius);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void SelectLinesLongest(HTuple rowBeginIn, HTuple colBeginIn, HTuple rowEndIn, HTuple colEndIn, HTuple num, out HTuple rowBeginOut, out HTuple colBeginOut, out HTuple rowEndOut, out HTuple colEndOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1736);
			SZXCArimAPI.Store(expr_0A, 0, rowBeginIn);
			SZXCArimAPI.Store(expr_0A, 1, colBeginIn);
			SZXCArimAPI.Store(expr_0A, 2, rowEndIn);
			SZXCArimAPI.Store(expr_0A, 3, colEndIn);
			SZXCArimAPI.Store(expr_0A, 4, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowBeginIn);
			SZXCArimAPI.UnpinTuple(colBeginIn);
			SZXCArimAPI.UnpinTuple(rowEndIn);
			SZXCArimAPI.UnpinTuple(colEndIn);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num2, out rowBeginOut);
			num2 = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num2, out colBeginOut);
			num2 = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num2, out rowEndOut);
			num2 = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num2, out colEndOut);
			SZXCArimAPI.PostCall(expr_0A, num2);
		}

		public static void PartitionLines(HTuple rowBeginIn, HTuple colBeginIn, HTuple rowEndIn, HTuple colEndIn, HTuple feature, HTuple operation, HTuple min, HTuple max, out HTuple rowBeginOut, out HTuple colBeginOut, out HTuple rowEndOut, out HTuple colEndOut, out HTuple failRowBOut, out HTuple failColBOut, out HTuple failRowEOut, out HTuple failColEOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1737);
			SZXCArimAPI.Store(expr_0A, 0, rowBeginIn);
			SZXCArimAPI.Store(expr_0A, 1, colBeginIn);
			SZXCArimAPI.Store(expr_0A, 2, rowEndIn);
			SZXCArimAPI.Store(expr_0A, 3, colEndIn);
			SZXCArimAPI.Store(expr_0A, 4, feature);
			SZXCArimAPI.Store(expr_0A, 5, operation);
			SZXCArimAPI.Store(expr_0A, 6, min);
			SZXCArimAPI.Store(expr_0A, 7, max);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowBeginIn);
			SZXCArimAPI.UnpinTuple(colBeginIn);
			SZXCArimAPI.UnpinTuple(rowEndIn);
			SZXCArimAPI.UnpinTuple(colEndIn);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rowBeginOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out colBeginOut);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out rowEndOut);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out colEndOut);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out failRowBOut);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out failColBOut);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out failRowEOut);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out failColEOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectLines(HTuple rowBeginIn, HTuple colBeginIn, HTuple rowEndIn, HTuple colEndIn, HTuple feature, HTuple operation, HTuple min, HTuple max, out HTuple rowBeginOut, out HTuple colBeginOut, out HTuple rowEndOut, out HTuple colEndOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1738);
			SZXCArimAPI.Store(expr_0A, 0, rowBeginIn);
			SZXCArimAPI.Store(expr_0A, 1, colBeginIn);
			SZXCArimAPI.Store(expr_0A, 2, rowEndIn);
			SZXCArimAPI.Store(expr_0A, 3, colEndIn);
			SZXCArimAPI.Store(expr_0A, 4, feature);
			SZXCArimAPI.Store(expr_0A, 5, operation);
			SZXCArimAPI.Store(expr_0A, 6, min);
			SZXCArimAPI.Store(expr_0A, 7, max);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowBeginIn);
			SZXCArimAPI.UnpinTuple(colBeginIn);
			SZXCArimAPI.UnpinTuple(rowEndIn);
			SZXCArimAPI.UnpinTuple(colEndIn);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out rowBeginOut);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out colBeginOut);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out rowEndOut);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out colEndOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void LinePosition(HTuple rowBegin, HTuple colBegin, HTuple rowEnd, HTuple colEnd, out HTuple rowCenter, out HTuple colCenter, out HTuple length, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1739);
			SZXCArimAPI.Store(expr_0A, 0, rowBegin);
			SZXCArimAPI.Store(expr_0A, 1, colBegin);
			SZXCArimAPI.Store(expr_0A, 2, rowEnd);
			SZXCArimAPI.Store(expr_0A, 3, colEnd);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowBegin);
			SZXCArimAPI.UnpinTuple(colBegin);
			SZXCArimAPI.UnpinTuple(rowEnd);
			SZXCArimAPI.UnpinTuple(colEnd);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowCenter);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colCenter);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out length);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void LineOrientation(HTuple rowBegin, HTuple colBegin, HTuple rowEnd, HTuple colEnd, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1740);
			SZXCArimAPI.Store(expr_0A, 0, rowBegin);
			SZXCArimAPI.Store(expr_0A, 1, colBegin);
			SZXCArimAPI.Store(expr_0A, 2, rowEnd);
			SZXCArimAPI.Store(expr_0A, 3, colEnd);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rowBegin);
			SZXCArimAPI.UnpinTuple(colBegin);
			SZXCArimAPI.UnpinTuple(rowEnd);
			SZXCArimAPI.UnpinTuple(colEnd);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ApproxChainSimple(HTuple row, HTuple column, out HTuple arcCenterRow, out HTuple arcCenterCol, out HTuple arcAngle, out HTuple arcBeginRow, out HTuple arcBeginCol, out HTuple lineBeginRow, out HTuple lineBeginCol, out HTuple lineEndRow, out HTuple lineEndCol, out HTuple order)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1741);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out arcCenterRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out arcCenterCol);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out arcAngle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out arcBeginRow);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out arcBeginCol);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out lineBeginRow);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out lineBeginCol);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out lineEndRow);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.INTEGER, num, out lineEndCol);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.INTEGER, num, out order);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ApproxChain(HTuple row, HTuple column, HTuple minWidthCoord, HTuple maxWidthCoord, HTuple threshStart, HTuple threshEnd, HTuple threshStep, HTuple minWidthSmooth, HTuple maxWidthSmooth, HTuple minWidthCurve, HTuple maxWidthCurve, HTuple weight1, HTuple weight2, HTuple weight3, out HTuple arcCenterRow, out HTuple arcCenterCol, out HTuple arcAngle, out HTuple arcBeginRow, out HTuple arcBeginCol, out HTuple lineBeginRow, out HTuple lineBeginCol, out HTuple lineEndRow, out HTuple lineEndCol, out HTuple order)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1742);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, minWidthCoord);
			SZXCArimAPI.Store(expr_0A, 3, maxWidthCoord);
			SZXCArimAPI.Store(expr_0A, 4, threshStart);
			SZXCArimAPI.Store(expr_0A, 5, threshEnd);
			SZXCArimAPI.Store(expr_0A, 6, threshStep);
			SZXCArimAPI.Store(expr_0A, 7, minWidthSmooth);
			SZXCArimAPI.Store(expr_0A, 8, maxWidthSmooth);
			SZXCArimAPI.Store(expr_0A, 9, minWidthCurve);
			SZXCArimAPI.Store(expr_0A, 10, maxWidthCurve);
			SZXCArimAPI.Store(expr_0A, 11, weight1);
			SZXCArimAPI.Store(expr_0A, 12, weight2);
			SZXCArimAPI.Store(expr_0A, 13, weight3);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(minWidthCoord);
			SZXCArimAPI.UnpinTuple(maxWidthCoord);
			SZXCArimAPI.UnpinTuple(threshStart);
			SZXCArimAPI.UnpinTuple(threshEnd);
			SZXCArimAPI.UnpinTuple(threshStep);
			SZXCArimAPI.UnpinTuple(minWidthSmooth);
			SZXCArimAPI.UnpinTuple(maxWidthSmooth);
			SZXCArimAPI.UnpinTuple(minWidthCurve);
			SZXCArimAPI.UnpinTuple(maxWidthCurve);
			SZXCArimAPI.UnpinTuple(weight1);
			SZXCArimAPI.UnpinTuple(weight2);
			SZXCArimAPI.UnpinTuple(weight3);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out arcCenterRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out arcCenterCol);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out arcAngle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out arcBeginRow);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out arcBeginCol);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out lineBeginRow);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.INTEGER, num, out lineBeginCol);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out lineEndRow);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.INTEGER, num, out lineEndCol);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.INTEGER, num, out order);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FitSurfaceFirstOrder(HObject regions, HObject image, HTuple algorithm, HTuple iterations, HTuple clippingFactor, out HTuple alpha, out HTuple beta, out HTuple gamma)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1743);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, algorithm);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.Store(expr_0A, 2, clippingFactor);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out alpha);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out beta);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out gamma);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void FitSurfaceSecondOrder(HObject regions, HObject image, HTuple algorithm, HTuple iterations, HTuple clippingFactor, out HTuple alpha, out HTuple beta, out HTuple gamma, out HTuple delta, out HTuple epsilon, out HTuple zeta)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1744);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, algorithm);
			SZXCArimAPI.Store(expr_0A, 1, iterations);
			SZXCArimAPI.Store(expr_0A, 2, clippingFactor);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(algorithm);
			SZXCArimAPI.UnpinTuple(iterations);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out alpha);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out beta);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out gamma);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out delta);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out epsilon);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out zeta);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GenImageSurfaceSecondOrder(out HObject imageSurface, HTuple type, HTuple alpha, HTuple beta, HTuple gamma, HTuple delta, HTuple epsilon, HTuple zeta, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1745);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, beta);
			SZXCArimAPI.Store(expr_0A, 3, gamma);
			SZXCArimAPI.Store(expr_0A, 4, delta);
			SZXCArimAPI.Store(expr_0A, 5, epsilon);
			SZXCArimAPI.Store(expr_0A, 6, zeta);
			SZXCArimAPI.Store(expr_0A, 7, row);
			SZXCArimAPI.Store(expr_0A, 8, column);
			SZXCArimAPI.Store(expr_0A, 9, width);
			SZXCArimAPI.Store(expr_0A, 10, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(beta);
			SZXCArimAPI.UnpinTuple(gamma);
			SZXCArimAPI.UnpinTuple(delta);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(zeta);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSurface);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImageSurfaceFirstOrder(out HObject imageSurface, HTuple type, HTuple alpha, HTuple beta, HTuple gamma, HTuple row, HTuple column, HTuple width, HTuple height)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1746);
			SZXCArimAPI.Store(expr_0A, 0, type);
			SZXCArimAPI.Store(expr_0A, 1, alpha);
			SZXCArimAPI.Store(expr_0A, 2, beta);
			SZXCArimAPI.Store(expr_0A, 3, gamma);
			SZXCArimAPI.Store(expr_0A, 4, row);
			SZXCArimAPI.Store(expr_0A, 5, column);
			SZXCArimAPI.Store(expr_0A, 6, width);
			SZXCArimAPI.Store(expr_0A, 7, height);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(type);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(beta);
			SZXCArimAPI.UnpinTuple(gamma);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			num = HObject.LoadNew(expr_0A, 1, num, out imageSurface);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ShapeHistoPoint(HObject region, HObject image, HTuple feature, HTuple row, HTuple column, out HTuple absoluteHisto, out HTuple relativeHisto)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1747);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, feature);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(feature);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			num = HTuple.LoadNew(expr_0A, 0, num, out absoluteHisto);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out relativeHisto);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void ShapeHistoAll(HObject region, HObject image, HTuple feature, out HTuple absoluteHisto, out HTuple relativeHisto)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1748);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, feature);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(feature);
			num = HTuple.LoadNew(expr_0A, 0, num, out absoluteHisto);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out relativeHisto);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void GrayFeatures(HObject regions, HObject image, HTuple features, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1749);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void SelectGray(HObject regions, HObject image, out HObject selectedRegions, HTuple features, HTuple operation, HTuple min, HTuple max)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1750);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, features);
			SZXCArimAPI.Store(expr_0A, 1, operation);
			SZXCArimAPI.Store(expr_0A, 2, min);
			SZXCArimAPI.Store(expr_0A, 3, max);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(operation);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedRegions);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void MinMaxGray(HObject regions, HObject image, HTuple percent, out HTuple min, out HTuple max, out HTuple range)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1751);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, percent);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(percent);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out min);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out max);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out range);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void Intensity(HObject regions, HObject image, out HTuple mean, out HTuple deviation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1752);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out mean);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out deviation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GrayHistoRange(HObject regions, HObject image, HTuple min, HTuple max, HTuple numBins, out HTuple histo, out HTuple binSize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1753);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, min);
			SZXCArimAPI.Store(expr_0A, 1, max);
			SZXCArimAPI.Store(expr_0A, 2, numBins);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(min);
			SZXCArimAPI.UnpinTuple(max);
			SZXCArimAPI.UnpinTuple(numBins);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out histo);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out binSize);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void Histo2dim(HObject regions, HObject imageCol, HObject imageRow, out HObject histo2Dim)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1754);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, imageCol);
			SZXCArimAPI.Store(expr_0A, 3, imageRow);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out histo2Dim);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(imageCol);
			GC.KeepAlive(imageRow);
		}

		public static void GrayHistoAbs(HObject regions, HObject image, HTuple quantization, out HTuple absoluteHisto)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1755);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, quantization);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(quantization);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out absoluteHisto);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GrayHisto(HObject regions, HObject image, out HTuple absoluteHisto, out HTuple relativeHisto)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1756);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out absoluteHisto);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out relativeHisto);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void EntropyGray(HObject regions, HObject image, out HTuple entropy, out HTuple anisotropy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1757);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out entropy);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out anisotropy);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void CoocFeatureMatrix(HObject coocMatrix, out HTuple energy, out HTuple correlation, out HTuple homogeneity, out HTuple contrast)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1758);
			SZXCArimAPI.Store(expr_0A, 1, coocMatrix);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out energy);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out correlation);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out homogeneity);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out contrast);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(coocMatrix);
		}

		public static void CoocFeatureImage(HObject regions, HObject image, HTuple ldGray, HTuple direction, out HTuple energy, out HTuple correlation, out HTuple homogeneity, out HTuple contrast)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1759);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ldGray);
			SZXCArimAPI.Store(expr_0A, 1, direction);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ldGray);
			SZXCArimAPI.UnpinTuple(direction);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out energy);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out correlation);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out homogeneity);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out contrast);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GenCoocMatrix(HObject regions, HObject image, out HObject matrix, HTuple ldGray, HTuple direction)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1760);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, ldGray);
			SZXCArimAPI.Store(expr_0A, 1, direction);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(ldGray);
			SZXCArimAPI.UnpinTuple(direction);
			num = HObject.LoadNew(expr_0A, 1, num, out matrix);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void MomentsGrayPlane(HObject regions, HObject image, out HTuple MRow, out HTuple MCol, out HTuple alpha, out HTuple beta, out HTuple mean)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1761);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out MRow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out MCol);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out alpha);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out beta);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out mean);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void PlaneDeviation(HObject regions, HObject image, out HTuple deviation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1762);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out deviation);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void EllipticAxisGray(HObject regions, HObject image, out HTuple ra, out HTuple rb, out HTuple phi)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1763);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out ra);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rb);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out phi);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void AreaCenterGray(HObject regions, HObject image, out HTuple area, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1764);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out area);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
			GC.KeepAlive(image);
		}

		public static void GrayProjections(HObject region, HObject image, HTuple mode, out HTuple horProjection, out HTuple vertProjection)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1765);
			SZXCArimAPI.Store(expr_0A, 1, region);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out horProjection);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out vertProjection);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(region);
			GC.KeepAlive(image);
		}

		public static void GetDataCode2dObjects(out HObject dataCodeObjects, HTuple dataCodeHandle, HTuple candidateHandle, HTuple objectName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1766);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, candidateHandle);
			SZXCArimAPI.Store(expr_0A, 2, objectName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(candidateHandle);
			SZXCArimAPI.UnpinTuple(objectName);
			num = HObject.LoadNew(expr_0A, 1, num, out dataCodeObjects);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDataCode2dResults(HTuple dataCodeHandle, HTuple candidateHandle, HTuple resultNames, out HTuple resultValues)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1767);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, candidateHandle);
			SZXCArimAPI.Store(expr_0A, 2, resultNames);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(candidateHandle);
			SZXCArimAPI.UnpinTuple(resultNames);
			num = HTuple.LoadNew(expr_0A, 0, num, out resultValues);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindDataCode2d(HObject image, out HObject symbolXLDs, HTuple dataCodeHandle, HTuple genParamName, HTuple genParamValue, out HTuple resultHandles, out HTuple decodedDataStrings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1768);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out symbolXLDs);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out resultHandles);
			num = HTuple.LoadNew(expr_0A, 1, num, out decodedDataStrings);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SetDataCode2dParam(HTuple dataCodeHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1769);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetDataCode2dParam(HTuple dataCodeHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1770);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryDataCode2dParams(HTuple dataCodeHandle, HTuple queryName, out HTuple genParamName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1771);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, queryName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(queryName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamName);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeDataCode2dModel(HTuple serializedItemHandle, out HTuple dataCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1772);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out dataCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDataCode2dModel(HTuple dataCodeHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1773);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadDataCode2dModel(HTuple fileName, out HTuple dataCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1774);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out dataCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDataCode2dModel(HTuple dataCodeHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1775);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllDataCode2dModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1776);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDataCode2dModel(HTuple dataCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1777);
			SZXCArimAPI.Store(expr_0A, 0, dataCodeHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dataCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateDataCode2dModel(HTuple symbolType, HTuple genParamName, HTuple genParamValue, out HTuple dataCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1778);
			SZXCArimAPI.Store(expr_0A, 0, symbolType);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(symbolType);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out dataCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeClassTrainData(HTuple serializedItemHandle, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1779);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeClassTrainData(HTuple classTrainDataHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1780);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassTrainData(HTuple fileName, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1781);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassTrainData(HTuple classTrainDataHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1782);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SelectSubFeatureClassTrainData(HTuple classTrainDataHandle, HTuple subFeatureIndices, out HTuple selectedClassTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1783);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, subFeatureIndices);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(subFeatureIndices);
			num = HTuple.LoadNew(expr_0A, 0, num, out selectedClassTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFeatureLengthsClassTrainData(HTuple classTrainDataHandle, HTuple subFeatureLength, HTuple names)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1784);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, subFeatureLength);
			SZXCArimAPI.Store(expr_0A, 2, names);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(subFeatureLength);
			SZXCArimAPI.UnpinTuple(names);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetClassTrainDataGmm(HTuple GMMHandle, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1785);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddClassTrainDataGmm(HTuple GMMHandle, HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1786);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, classTrainDataHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetClassTrainDataMlp(HTuple MLPHandle, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1787);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddClassTrainDataMlp(HTuple MLPHandle, HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1788);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, classTrainDataHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetClassTrainDataKnn(HTuple KNNHandle, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1789);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddClassTrainDataKnn(HTuple KNNHandle, HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1790);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, classTrainDataHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetClassTrainDataSvm(HTuple SVMHandle, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1791);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddClassTrainDataSvm(HTuple SVMHandle, HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1792);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, classTrainDataHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSampleNumClassTrainData(HTuple classTrainDataHandle, out HTuple numSamples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1793);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSamples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleClassTrainData(HTuple classTrainDataHandle, HTuple indexSample, out HTuple features, out HTuple classID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1794);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSample);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(indexSample);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out classID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassTrainData()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1795);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassTrainData(HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1796);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddSampleClassTrainData(HTuple classTrainDataHandle, HTuple order, HTuple features, HTuple classID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1797);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, order);
			SZXCArimAPI.Store(expr_0A, 2, features);
			SZXCArimAPI.Store(expr_0A, 3, classID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(order);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(classID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateClassTrainData(HTuple numDim, out HTuple classTrainDataHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1798);
			SZXCArimAPI.Store(expr_0A, 0, numDim);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numDim);
			num = HTuple.LoadNew(expr_0A, 0, num, out classTrainDataHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetMlp(HTuple classTrainDataHandle, HTuple selectionMethod, HTuple genParamName, HTuple genParamValue, out HTuple MLPHandle, out HTuple selectedFeatureIndices, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1799);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out MLPHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out selectedFeatureIndices);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetSvm(HTuple classTrainDataHandle, HTuple selectionMethod, HTuple genParamName, HTuple genParamValue, out HTuple SVMHandle, out HTuple selectedFeatureIndices, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1800);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out SVMHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out selectedFeatureIndices);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetGmm(HTuple classTrainDataHandle, HTuple selectionMethod, HTuple genParamName, HTuple genParamValue, out HTuple GMMHandle, out HTuple selectedFeatureIndices, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1801);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out GMMHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out selectedFeatureIndices);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SelectFeatureSetKnn(HTuple classTrainDataHandle, HTuple selectionMethod, HTuple genParamName, HTuple genParamValue, out HTuple KNNHandle, out HTuple selectedFeatureIndices, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1802);
			SZXCArimAPI.Store(expr_0A, 0, classTrainDataHandle);
			SZXCArimAPI.Store(expr_0A, 1, selectionMethod);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classTrainDataHandle);
			SZXCArimAPI.UnpinTuple(selectionMethod);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out KNNHandle);
			num = HTuple.LoadNew(expr_0A, 1, num, out selectedFeatureIndices);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassKnn()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1803);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassKnn(HTuple KNNHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1804);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetSampleNumClassKnn(HTuple KNNHandle, out HTuple numSamples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1805);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSamples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleClassKnn(HTuple KNNHandle, HTuple indexSample, out HTuple features, out HTuple classID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1806);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSample);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(indexSample);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out classID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeClassKnn(HTuple serializedItemHandle, out HTuple KNNHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1807);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out KNNHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeClassKnn(HTuple KNNHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1808);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassKnn(HTuple fileName, out HTuple KNNHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1809);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out KNNHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassKnn(HTuple KNNHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1810);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetParamsClassKnn(HTuple KNNHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1811);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetParamsClassKnn(HTuple KNNHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1812);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClassifyClassKnn(HTuple KNNHandle, HTuple features, out HTuple result, out HTuple rating)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1813);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out result);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out rating);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainClassKnn(HTuple KNNHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1814);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddSampleClassKnn(HTuple KNNHandle, HTuple features, HTuple classID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1815);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, classID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(classID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateClassKnn(HTuple numDim, out HTuple KNNHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1816);
			SZXCArimAPI.Store(expr_0A, 0, numDim);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numDim);
			num = HTuple.LoadNew(expr_0A, 0, num, out KNNHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassLut()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1817);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassLut(HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1818);
			SZXCArimAPI.Store(expr_0A, 0, classLUTHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateClassLutKnn(HTuple KNNHandle, HTuple genParamName, HTuple genParamValue, out HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1819);
			SZXCArimAPI.Store(expr_0A, 0, KNNHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(KNNHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out classLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassLutGmm(HTuple GMMHandle, HTuple genParamName, HTuple genParamValue, out HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1820);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out classLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassLutSvm(HTuple SVMHandle, HTuple genParamName, HTuple genParamValue, out HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1821);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out classLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassLutMlp(HTuple MLPHandle, HTuple genParamName, HTuple genParamValue, out HTuple classLUTHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1822);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out classLUTHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassGmm()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1823);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassGmm(HTuple GMMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1824);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSamplesClassGmm(HTuple GMMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1825);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeClassGmm(HTuple serializedItemHandle, out HTuple GMMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1826);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out GMMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeClassGmm(HTuple GMMHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1827);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassGmm(HTuple fileName, out HTuple GMMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1828);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out GMMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassGmm(HTuple GMMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1829);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadSamplesClassGmm(HTuple GMMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1830);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteSamplesClassGmm(HTuple GMMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1831);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClassifyClassGmm(HTuple GMMHandle, HTuple features, HTuple num, out HTuple classID, out HTuple classProb, out HTuple density, out HTuple KSigmaProb)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1832);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num2, out classID);
			num2 = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num2, out classProb);
			num2 = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num2, out density);
			num2 = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num2, out KSigmaProb);
			SZXCArimAPI.PostCall(expr_0A, num2);
		}

		public static void EvaluateClassGmm(HTuple GMMHandle, HTuple features, out HTuple classProb, out HTuple density, out HTuple KSigmaProb)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1833);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out classProb);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out density);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out KSigmaProb);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainClassGmm(HTuple GMMHandle, HTuple maxIter, HTuple threshold, HTuple classPriors, HTuple regularize, out HTuple centers, out HTuple iter)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1834);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, maxIter);
			SZXCArimAPI.Store(expr_0A, 2, threshold);
			SZXCArimAPI.Store(expr_0A, 3, classPriors);
			SZXCArimAPI.Store(expr_0A, 4, regularize);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(maxIter);
			SZXCArimAPI.UnpinTuple(threshold);
			SZXCArimAPI.UnpinTuple(classPriors);
			SZXCArimAPI.UnpinTuple(regularize);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out centers);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out iter);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPrepInfoClassGmm(HTuple GMMHandle, HTuple preprocessing, out HTuple informationCont, out HTuple cumInformationCont)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1835);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, preprocessing);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(preprocessing);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out informationCont);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cumInformationCont);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleNumClassGmm(HTuple GMMHandle, out HTuple numSamples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1836);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSamples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleClassGmm(HTuple GMMHandle, HTuple numSample, out HTuple features, out HTuple classID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1837);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, numSample);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(numSample);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out classID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddSampleClassGmm(HTuple GMMHandle, HTuple features, HTuple classID, HTuple randomize)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1838);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, classID);
			SZXCArimAPI.Store(expr_0A, 3, randomize);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(classID);
			SZXCArimAPI.UnpinTuple(randomize);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetParamsClassGmm(HTuple GMMHandle, out HTuple numDim, out HTuple numClasses, out HTuple minCenters, out HTuple maxCenters, out HTuple covarType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1839);
			SZXCArimAPI.Store(expr_0A, 0, GMMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(GMMHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numDim);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numClasses);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out minCenters);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out maxCenters);
			num = HTuple.LoadNew(expr_0A, 4, num, out covarType);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassGmm(HTuple numDim, HTuple numClasses, HTuple numCenters, HTuple covarType, HTuple preprocessing, HTuple numComponents, HTuple randSeed, out HTuple GMMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1840);
			SZXCArimAPI.Store(expr_0A, 0, numDim);
			SZXCArimAPI.Store(expr_0A, 1, numClasses);
			SZXCArimAPI.Store(expr_0A, 2, numCenters);
			SZXCArimAPI.Store(expr_0A, 3, covarType);
			SZXCArimAPI.Store(expr_0A, 4, preprocessing);
			SZXCArimAPI.Store(expr_0A, 5, numComponents);
			SZXCArimAPI.Store(expr_0A, 6, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numDim);
			SZXCArimAPI.UnpinTuple(numClasses);
			SZXCArimAPI.UnpinTuple(numCenters);
			SZXCArimAPI.UnpinTuple(covarType);
			SZXCArimAPI.UnpinTuple(preprocessing);
			SZXCArimAPI.UnpinTuple(numComponents);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, num, out GMMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassSvm()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1841);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassSvm(HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1842);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSamplesClassSvm(HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1843);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeClassSvm(HTuple serializedItemHandle, out HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1844);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeClassSvm(HTuple SVMHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1845);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassSvm(HTuple fileName, out HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1846);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassSvm(HTuple SVMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1847);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadSamplesClassSvm(HTuple SVMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1848);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteSamplesClassSvm(HTuple SVMHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1849);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void EvaluateClassSvm(HTuple SVMHandle, HTuple features, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1850);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClassifyClassSvm(HTuple SVMHandle, HTuple features, HTuple num, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1851);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num2, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num2);
		}

		public static void ReduceClassSvm(HTuple SVMHandle, HTuple method, HTuple minRemainingSV, HTuple maxError, out HTuple SVMHandleReduced)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1852);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, method);
			SZXCArimAPI.Store(expr_0A, 2, minRemainingSV);
			SZXCArimAPI.Store(expr_0A, 3, maxError);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(minRemainingSV);
			SZXCArimAPI.UnpinTuple(maxError);
			num = HTuple.LoadNew(expr_0A, 0, num, out SVMHandleReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainClassSvm(HTuple SVMHandle, HTuple epsilon, HTuple trainMode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1853);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, epsilon);
			SZXCArimAPI.Store(expr_0A, 2, trainMode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(epsilon);
			SZXCArimAPI.UnpinTuple(trainMode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetPrepInfoClassSvm(HTuple SVMHandle, HTuple preprocessing, out HTuple informationCont, out HTuple cumInformationCont)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1854);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, preprocessing);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(preprocessing);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out informationCont);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cumInformationCont);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSupportVectorNumClassSvm(HTuple SVMHandle, out HTuple numSupportVectors, out HTuple numSVPerSVM)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1855);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSupportVectors);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numSVPerSVM);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSupportVectorClassSvm(HTuple SVMHandle, HTuple indexSupportVector, out HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1856);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSupportVector);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(indexSupportVector);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out index);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleNumClassSvm(HTuple SVMHandle, out HTuple numSamples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1857);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSamples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleClassSvm(HTuple SVMHandle, HTuple indexSample, out HTuple features, out HTuple target)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1858);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSample);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(indexSample);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out target);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void AddSampleClassSvm(HTuple SVMHandle, HTuple features, HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1859);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, classVal);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetParamsClassSvm(HTuple SVMHandle, out HTuple numFeatures, out HTuple kernelType, out HTuple kernelParam, out HTuple nu, out HTuple numClasses, out HTuple mode, out HTuple preprocessing, out HTuple numComponents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1860);
			SZXCArimAPI.Store(expr_0A, 0, SVMHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(SVMHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numFeatures);
			num = HTuple.LoadNew(expr_0A, 1, num, out kernelType);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out kernelParam);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out nu);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out numClasses);
			num = HTuple.LoadNew(expr_0A, 5, num, out mode);
			num = HTuple.LoadNew(expr_0A, 6, num, out preprocessing);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out numComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassSvm(HTuple numFeatures, HTuple kernelType, HTuple kernelParam, HTuple nu, HTuple numClasses, HTuple mode, HTuple preprocessing, HTuple numComponents, out HTuple SVMHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1861);
			SZXCArimAPI.Store(expr_0A, 0, numFeatures);
			SZXCArimAPI.Store(expr_0A, 1, kernelType);
			SZXCArimAPI.Store(expr_0A, 2, kernelParam);
			SZXCArimAPI.Store(expr_0A, 3, nu);
			SZXCArimAPI.Store(expr_0A, 4, numClasses);
			SZXCArimAPI.Store(expr_0A, 5, mode);
			SZXCArimAPI.Store(expr_0A, 6, preprocessing);
			SZXCArimAPI.Store(expr_0A, 7, numComponents);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numFeatures);
			SZXCArimAPI.UnpinTuple(kernelType);
			SZXCArimAPI.UnpinTuple(kernelParam);
			SZXCArimAPI.UnpinTuple(nu);
			SZXCArimAPI.UnpinTuple(numClasses);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(preprocessing);
			SZXCArimAPI.UnpinTuple(numComponents);
			num = HTuple.LoadNew(expr_0A, 0, num, out SVMHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllClassMlp()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1862);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearClassMlp(HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1863);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearSamplesClassMlp(HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1864);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeClassMlp(HTuple serializedItemHandle, out HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1865);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeClassMlp(HTuple MLPHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1866);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassMlp(HTuple fileName, out HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1867);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassMlp(HTuple MLPHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1868);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadSamplesClassMlp(HTuple MLPHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1869);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteSamplesClassMlp(HTuple MLPHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1870);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClassifyClassMlp(HTuple MLPHandle, HTuple features, HTuple num, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1871);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num2, out classVal);
			num2 = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num2, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num2);
		}

		public static void EvaluateClassMlp(HTuple MLPHandle, HTuple features, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1872);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(features);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TrainClassMlp(HTuple MLPHandle, HTuple maxIterations, HTuple weightTolerance, HTuple errorTolerance, out HTuple error, out HTuple errorLog)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1873);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, maxIterations);
			SZXCArimAPI.Store(expr_0A, 2, weightTolerance);
			SZXCArimAPI.Store(expr_0A, 3, errorTolerance);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(maxIterations);
			SZXCArimAPI.UnpinTuple(weightTolerance);
			SZXCArimAPI.UnpinTuple(errorTolerance);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out errorLog);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPrepInfoClassMlp(HTuple MLPHandle, HTuple preprocessing, out HTuple informationCont, out HTuple cumInformationCont)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1874);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, preprocessing);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(preprocessing);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out informationCont);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out cumInformationCont);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleNumClassMlp(HTuple MLPHandle, out HTuple numSamples)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1875);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numSamples);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSampleClassMlp(HTuple MLPHandle, HTuple indexSample, out HTuple features, out HTuple target)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1876);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, indexSample);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(indexSample);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out features);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out target);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetRejectionParamsClassMlp(HTuple MLPHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1877);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetRejectionParamsClassMlp(HTuple MLPHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1878);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddSampleClassMlp(HTuple MLPHandle, HTuple features, HTuple target)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1879);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, target);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(target);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetRegularizationParamsClassMlp(HTuple MLPHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1880);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetRegularizationParamsClassMlp(HTuple MLPHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1881);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetParamsClassMlp(HTuple MLPHandle, out HTuple numInput, out HTuple numHidden, out HTuple numOutput, out HTuple outputFunction, out HTuple preprocessing, out HTuple numComponents)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1882);
			SZXCArimAPI.Store(expr_0A, 0, MLPHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(MLPHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numInput);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out numHidden);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out numOutput);
			num = HTuple.LoadNew(expr_0A, 3, num, out outputFunction);
			num = HTuple.LoadNew(expr_0A, 4, num, out preprocessing);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out numComponents);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateClassMlp(HTuple numInput, HTuple numHidden, HTuple numOutput, HTuple outputFunction, HTuple preprocessing, HTuple numComponents, HTuple randSeed, out HTuple MLPHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1883);
			SZXCArimAPI.Store(expr_0A, 0, numInput);
			SZXCArimAPI.Store(expr_0A, 1, numHidden);
			SZXCArimAPI.Store(expr_0A, 2, numOutput);
			SZXCArimAPI.Store(expr_0A, 3, outputFunction);
			SZXCArimAPI.Store(expr_0A, 4, preprocessing);
			SZXCArimAPI.Store(expr_0A, 5, numComponents);
			SZXCArimAPI.Store(expr_0A, 6, randSeed);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numInput);
			SZXCArimAPI.UnpinTuple(numHidden);
			SZXCArimAPI.UnpinTuple(numOutput);
			SZXCArimAPI.UnpinTuple(outputFunction);
			SZXCArimAPI.UnpinTuple(preprocessing);
			SZXCArimAPI.UnpinTuple(numComponents);
			SZXCArimAPI.UnpinTuple(randSeed);
			num = HTuple.LoadNew(expr_0A, 0, num, out MLPHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeClassBox(HTuple classifHandle, HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1884);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, serializedItemHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SerializeClassBox(HTuple classifHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1885);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteClassBox(HTuple classifHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1886);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetClassBoxParam(HTuple classifHandle, HTuple flag, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1887);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, flag);
			SZXCArimAPI.Store(expr_0A, 2, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(flag);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadSampset(HTuple fileName, out HTuple sampKey)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1888);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out sampKey);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadClassBox(HTuple classifHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1889);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void LearnSampsetBox(HTuple classifHandle, HTuple sampKey, HTuple outfile, HTuple NSamples, HTuple stopError, HTuple errorN)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1890);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, sampKey);
			SZXCArimAPI.Store(expr_0A, 2, outfile);
			SZXCArimAPI.Store(expr_0A, 3, NSamples);
			SZXCArimAPI.Store(expr_0A, 4, stopError);
			SZXCArimAPI.Store(expr_0A, 5, errorN);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(sampKey);
			SZXCArimAPI.UnpinTuple(outfile);
			SZXCArimAPI.UnpinTuple(NSamples);
			SZXCArimAPI.UnpinTuple(stopError);
			SZXCArimAPI.UnpinTuple(errorN);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void LearnClassBox(HTuple classifHandle, HTuple features, HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1891);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, classVal);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(classVal);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetClassBoxParam(HTuple classifHandle, HTuple flag, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1892);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, flag);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(flag);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearSampset(HTuple sampKey)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1893);
			SZXCArimAPI.Store(expr_0A, 0, sampKey);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sampKey);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseClassBox(HTuple classifHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1894);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateClassBox(out HTuple classifHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1895);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out classifHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DescriptClassBox(HTuple classifHandle, HTuple dimensions, out HTuple classIdx, out HTuple boxIdx, out HTuple boxLowerBound, out HTuple boxHigherBound, out HTuple boxNumSamplesTrain, out HTuple boxNumSamplesWrong)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1896);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, dimensions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(dimensions);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out classIdx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out boxIdx);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out boxLowerBound);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out boxHigherBound);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out boxNumSamplesTrain);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.INTEGER, num, out boxNumSamplesWrong);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TestSampsetBox(HTuple classifHandle, HTuple sampKey, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1897);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, sampKey);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(sampKey);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EnquireRejectClassBox(HTuple classifHandle, HTuple featureList, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1898);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, featureList);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(featureList);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EnquireClassBox(HTuple classifHandle, HTuple featureList, out HTuple classVal)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1899);
			SZXCArimAPI.Store(expr_0A, 0, classifHandle);
			SZXCArimAPI.Store(expr_0A, 1, featureList);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(classifHandle);
			SZXCArimAPI.UnpinTuple(featureList);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out classVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseAllClassBox()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1900);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ConvertMapType(HObject map, out HObject mapConverted, HTuple newType, HTuple imageWidth)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1901);
			SZXCArimAPI.Store(expr_0A, 1, map);
			SZXCArimAPI.Store(expr_0A, 0, newType);
			SZXCArimAPI.Store(expr_0A, 1, imageWidth);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(newType);
			SZXCArimAPI.UnpinTuple(imageWidth);
			num = HObject.LoadNew(expr_0A, 1, num, out mapConverted);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(map);
		}

		public static void VectorToPose(HTuple worldX, HTuple worldY, HTuple worldZ, HTuple imageRow, HTuple imageColumn, HTuple cameraParam, HTuple method, HTuple qualityType, out HTuple pose, out HTuple quality)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1902);
			SZXCArimAPI.Store(expr_0A, 0, worldX);
			SZXCArimAPI.Store(expr_0A, 1, worldY);
			SZXCArimAPI.Store(expr_0A, 2, worldZ);
			SZXCArimAPI.Store(expr_0A, 3, imageRow);
			SZXCArimAPI.Store(expr_0A, 4, imageColumn);
			SZXCArimAPI.Store(expr_0A, 5, cameraParam);
			SZXCArimAPI.Store(expr_0A, 6, method);
			SZXCArimAPI.Store(expr_0A, 7, qualityType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(worldX);
			SZXCArimAPI.UnpinTuple(worldY);
			SZXCArimAPI.UnpinTuple(worldZ);
			SZXCArimAPI.UnpinTuple(imageRow);
			SZXCArimAPI.UnpinTuple(imageColumn);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(qualityType);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, num, out quality);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjHomMat2dToPose(HTuple homography, HTuple cameraMatrix, HTuple method, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1903);
			SZXCArimAPI.Store(expr_0A, 0, homography);
			SZXCArimAPI.Store(expr_0A, 1, cameraMatrix);
			SZXCArimAPI.Store(expr_0A, 2, method);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homography);
			SZXCArimAPI.UnpinTuple(cameraMatrix);
			SZXCArimAPI.UnpinTuple(method);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RadialDistortionSelfCalibration(HObject contours, out HObject selectedContours, HTuple width, HTuple height, HTuple inlierThreshold, HTuple randSeed, HTuple distortionModel, HTuple distortionCenter, HTuple principalPointVar, out HTuple cameraParam)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1904);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, width);
			SZXCArimAPI.Store(expr_0A, 1, height);
			SZXCArimAPI.Store(expr_0A, 2, inlierThreshold);
			SZXCArimAPI.Store(expr_0A, 3, randSeed);
			SZXCArimAPI.Store(expr_0A, 4, distortionModel);
			SZXCArimAPI.Store(expr_0A, 5, distortionCenter);
			SZXCArimAPI.Store(expr_0A, 6, principalPointVar);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(inlierThreshold);
			SZXCArimAPI.UnpinTuple(randSeed);
			SZXCArimAPI.UnpinTuple(distortionModel);
			SZXCArimAPI.UnpinTuple(distortionCenter);
			SZXCArimAPI.UnpinTuple(principalPointVar);
			num = HObject.LoadNew(expr_0A, 1, num, out selectedContours);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraParam);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void CamParToCamMat(HTuple cameraParam, out HTuple cameraMatrix, out HTuple imageWidth, out HTuple imageHeight)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1905);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out cameraMatrix);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out imageWidth);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out imageHeight);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CamMatToCamPar(HTuple cameraMatrix, HTuple kappa, HTuple imageWidth, HTuple imageHeight, out HTuple cameraParam)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1906);
			SZXCArimAPI.Store(expr_0A, 0, cameraMatrix);
			SZXCArimAPI.Store(expr_0A, 1, kappa);
			SZXCArimAPI.Store(expr_0A, 2, imageWidth);
			SZXCArimAPI.Store(expr_0A, 3, imageHeight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraMatrix);
			SZXCArimAPI.UnpinTuple(kappa);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraParam);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void StationaryCameraSelfCalibration(HTuple numImages, HTuple imageWidth, HTuple imageHeight, HTuple referenceImage, HTuple mappingSource, HTuple mappingDest, HTuple homMatrices2D, HTuple rows1, HTuple cols1, HTuple rows2, HTuple cols2, HTuple numCorrespondences, HTuple estimationMethod, HTuple cameraModel, HTuple fixedCameraParams, out HTuple cameraMatrices, out HTuple kappa, out HTuple rotationMatrices, out HTuple x, out HTuple y, out HTuple z, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1907);
			SZXCArimAPI.Store(expr_0A, 0, numImages);
			SZXCArimAPI.Store(expr_0A, 1, imageWidth);
			SZXCArimAPI.Store(expr_0A, 2, imageHeight);
			SZXCArimAPI.Store(expr_0A, 3, referenceImage);
			SZXCArimAPI.Store(expr_0A, 4, mappingSource);
			SZXCArimAPI.Store(expr_0A, 5, mappingDest);
			SZXCArimAPI.Store(expr_0A, 6, homMatrices2D);
			SZXCArimAPI.Store(expr_0A, 7, rows1);
			SZXCArimAPI.Store(expr_0A, 8, cols1);
			SZXCArimAPI.Store(expr_0A, 9, rows2);
			SZXCArimAPI.Store(expr_0A, 10, cols2);
			SZXCArimAPI.Store(expr_0A, 11, numCorrespondences);
			SZXCArimAPI.Store(expr_0A, 12, estimationMethod);
			SZXCArimAPI.Store(expr_0A, 13, cameraModel);
			SZXCArimAPI.Store(expr_0A, 14, fixedCameraParams);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numImages);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(referenceImage);
			SZXCArimAPI.UnpinTuple(mappingSource);
			SZXCArimAPI.UnpinTuple(mappingDest);
			SZXCArimAPI.UnpinTuple(homMatrices2D);
			SZXCArimAPI.UnpinTuple(rows1);
			SZXCArimAPI.UnpinTuple(cols1);
			SZXCArimAPI.UnpinTuple(rows2);
			SZXCArimAPI.UnpinTuple(cols2);
			SZXCArimAPI.UnpinTuple(numCorrespondences);
			SZXCArimAPI.UnpinTuple(estimationMethod);
			SZXCArimAPI.UnpinTuple(cameraModel);
			SZXCArimAPI.UnpinTuple(fixedCameraParams);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out cameraMatrices);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out kappa);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out rotationMatrices);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out z);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetRectanglePose(HObject contour, HTuple cameraParam, HTuple width, HTuple height, HTuple weightingMode, HTuple clippingFactor, out HTuple pose, out HTuple covPose, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1908);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, width);
			SZXCArimAPI.Store(expr_0A, 2, height);
			SZXCArimAPI.Store(expr_0A, 3, weightingMode);
			SZXCArimAPI.Store(expr_0A, 4, clippingFactor);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(weightingMode);
			SZXCArimAPI.UnpinTuple(clippingFactor);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out covPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void GetCirclePose(HObject contour, HTuple cameraParam, HTuple radius, HTuple outputType, out HTuple pose1, out HTuple pose2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1909);
			SZXCArimAPI.Store(expr_0A, 1, contour);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, radius);
			SZXCArimAPI.Store(expr_0A, 2, outputType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(outputType);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose1);
			num = HTuple.LoadNew(expr_0A, 1, num, out pose2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour);
		}

		public static void RadiometricSelfCalibration(HObject images, HTuple exposureRatios, HTuple features, HTuple functionType, HTuple smoothness, HTuple polynomialDegree, out HTuple inverseResponse)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1910);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, exposureRatios);
			SZXCArimAPI.Store(expr_0A, 1, features);
			SZXCArimAPI.Store(expr_0A, 2, functionType);
			SZXCArimAPI.Store(expr_0A, 3, smoothness);
			SZXCArimAPI.Store(expr_0A, 4, polynomialDegree);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(exposureRatios);
			SZXCArimAPI.UnpinTuple(features);
			SZXCArimAPI.UnpinTuple(functionType);
			SZXCArimAPI.UnpinTuple(smoothness);
			SZXCArimAPI.UnpinTuple(polynomialDegree);
			num = HTuple.LoadNew(expr_0A, 0, num, out inverseResponse);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void MapImage(HObject image, HObject map, out HObject imageMapped)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1911);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, map);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out imageMapped);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(map);
		}

		public static void GenRadialDistortionMap(out HObject map, HTuple camParamIn, HTuple camParamOut, HTuple mapType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1912);
			SZXCArimAPI.Store(expr_0A, 0, camParamIn);
			SZXCArimAPI.Store(expr_0A, 1, camParamOut);
			SZXCArimAPI.Store(expr_0A, 2, mapType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamIn);
			SZXCArimAPI.UnpinTuple(camParamOut);
			SZXCArimAPI.UnpinTuple(mapType);
			num = HObject.LoadNew(expr_0A, 1, num, out map);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenImageToWorldPlaneMap(out HObject map, HTuple cameraParam, HTuple worldPose, HTuple widthIn, HTuple heightIn, HTuple widthMapped, HTuple heightMapped, HTuple scale, HTuple mapType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1913);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, worldPose);
			SZXCArimAPI.Store(expr_0A, 2, widthIn);
			SZXCArimAPI.Store(expr_0A, 3, heightIn);
			SZXCArimAPI.Store(expr_0A, 4, widthMapped);
			SZXCArimAPI.Store(expr_0A, 5, heightMapped);
			SZXCArimAPI.Store(expr_0A, 6, scale);
			SZXCArimAPI.Store(expr_0A, 7, mapType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(worldPose);
			SZXCArimAPI.UnpinTuple(widthIn);
			SZXCArimAPI.UnpinTuple(heightIn);
			SZXCArimAPI.UnpinTuple(widthMapped);
			SZXCArimAPI.UnpinTuple(heightMapped);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(mapType);
			num = HObject.LoadNew(expr_0A, 1, num, out map);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ImageToWorldPlane(HObject image, out HObject imageWorld, HTuple cameraParam, HTuple worldPose, HTuple width, HTuple height, HTuple scale, HTuple interpolation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1914);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, worldPose);
			SZXCArimAPI.Store(expr_0A, 2, width);
			SZXCArimAPI.Store(expr_0A, 3, height);
			SZXCArimAPI.Store(expr_0A, 4, scale);
			SZXCArimAPI.Store(expr_0A, 5, interpolation);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(worldPose);
			SZXCArimAPI.UnpinTuple(width);
			SZXCArimAPI.UnpinTuple(height);
			SZXCArimAPI.UnpinTuple(scale);
			SZXCArimAPI.UnpinTuple(interpolation);
			num = HObject.LoadNew(expr_0A, 1, num, out imageWorld);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ContourToWorldPlaneXld(HObject contours, out HObject contoursTrans, HTuple cameraParam, HTuple worldPose, HTuple scale)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1915);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, worldPose);
			SZXCArimAPI.Store(expr_0A, 2, scale);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(worldPose);
			SZXCArimAPI.UnpinTuple(scale);
			num = HObject.LoadNew(expr_0A, 1, num, out contoursTrans);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void ImagePointsToWorldPlane(HTuple cameraParam, HTuple worldPose, HTuple rows, HTuple cols, HTuple scale, out HTuple x, out HTuple y)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1916);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, worldPose);
			SZXCArimAPI.Store(expr_0A, 2, rows);
			SZXCArimAPI.Store(expr_0A, 3, cols);
			SZXCArimAPI.Store(expr_0A, 4, scale);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(worldPose);
			SZXCArimAPI.UnpinTuple(rows);
			SZXCArimAPI.UnpinTuple(cols);
			SZXCArimAPI.UnpinTuple(scale);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetOriginPose(HTuple poseIn, HTuple DX, HTuple DY, HTuple DZ, out HTuple poseNewOrigin)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1917);
			SZXCArimAPI.Store(expr_0A, 0, poseIn);
			SZXCArimAPI.Store(expr_0A, 1, DX);
			SZXCArimAPI.Store(expr_0A, 2, DY);
			SZXCArimAPI.Store(expr_0A, 3, DZ);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(poseIn);
			SZXCArimAPI.UnpinTuple(DX);
			SZXCArimAPI.UnpinTuple(DY);
			SZXCArimAPI.UnpinTuple(DZ);
			num = HTuple.LoadNew(expr_0A, 0, num, out poseNewOrigin);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HandEyeCalibration(HTuple x, HTuple y, HTuple z, HTuple row, HTuple col, HTuple numPoints, HTuple robotPoses, HTuple cameraParam, HTuple method, HTuple qualityType, out HTuple cameraPose, out HTuple calibrationPose, out HTuple quality)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1918);
			SZXCArimAPI.Store(expr_0A, 0, x);
			SZXCArimAPI.Store(expr_0A, 1, y);
			SZXCArimAPI.Store(expr_0A, 2, z);
			SZXCArimAPI.Store(expr_0A, 3, row);
			SZXCArimAPI.Store(expr_0A, 4, col);
			SZXCArimAPI.Store(expr_0A, 5, numPoints);
			SZXCArimAPI.Store(expr_0A, 6, robotPoses);
			SZXCArimAPI.Store(expr_0A, 7, cameraParam);
			SZXCArimAPI.Store(expr_0A, 8, method);
			SZXCArimAPI.Store(expr_0A, 9, qualityType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(z);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			SZXCArimAPI.UnpinTuple(numPoints);
			SZXCArimAPI.UnpinTuple(robotPoses);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(method);
			SZXCArimAPI.UnpinTuple(qualityType);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraPose);
			num = HTuple.LoadNew(expr_0A, 1, num, out calibrationPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out quality);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetPoseType(HTuple pose, out HTuple orderOfTransform, out HTuple orderOfRotation, out HTuple viewOfTransform)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1919);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, num, out orderOfTransform);
			num = HTuple.LoadNew(expr_0A, 1, num, out orderOfRotation);
			num = HTuple.LoadNew(expr_0A, 2, num, out viewOfTransform);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ConvertPoseType(HTuple poseIn, HTuple orderOfTransform, HTuple orderOfRotation, HTuple viewOfTransform, out HTuple poseOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1920);
			SZXCArimAPI.Store(expr_0A, 0, poseIn);
			SZXCArimAPI.Store(expr_0A, 1, orderOfTransform);
			SZXCArimAPI.Store(expr_0A, 2, orderOfRotation);
			SZXCArimAPI.Store(expr_0A, 3, viewOfTransform);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(poseIn);
			SZXCArimAPI.UnpinTuple(orderOfTransform);
			SZXCArimAPI.UnpinTuple(orderOfRotation);
			SZXCArimAPI.UnpinTuple(viewOfTransform);
			num = HTuple.LoadNew(expr_0A, 0, num, out poseOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreatePose(HTuple transX, HTuple transY, HTuple transZ, HTuple rotX, HTuple rotY, HTuple rotZ, HTuple orderOfTransform, HTuple orderOfRotation, HTuple viewOfTransform, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1921);
			SZXCArimAPI.Store(expr_0A, 0, transX);
			SZXCArimAPI.Store(expr_0A, 1, transY);
			SZXCArimAPI.Store(expr_0A, 2, transZ);
			SZXCArimAPI.Store(expr_0A, 3, rotX);
			SZXCArimAPI.Store(expr_0A, 4, rotY);
			SZXCArimAPI.Store(expr_0A, 5, rotZ);
			SZXCArimAPI.Store(expr_0A, 6, orderOfTransform);
			SZXCArimAPI.Store(expr_0A, 7, orderOfRotation);
			SZXCArimAPI.Store(expr_0A, 8, viewOfTransform);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(transX);
			SZXCArimAPI.UnpinTuple(transY);
			SZXCArimAPI.UnpinTuple(transZ);
			SZXCArimAPI.UnpinTuple(rotX);
			SZXCArimAPI.UnpinTuple(rotY);
			SZXCArimAPI.UnpinTuple(rotZ);
			SZXCArimAPI.UnpinTuple(orderOfTransform);
			SZXCArimAPI.UnpinTuple(orderOfRotation);
			SZXCArimAPI.UnpinTuple(viewOfTransform);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ChangeRadialDistortionContoursXld(HObject contours, out HObject contoursRectified, HTuple camParamIn, HTuple camParamOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1922);
			SZXCArimAPI.Store(expr_0A, 1, contours);
			SZXCArimAPI.Store(expr_0A, 0, camParamIn);
			SZXCArimAPI.Store(expr_0A, 1, camParamOut);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamIn);
			SZXCArimAPI.UnpinTuple(camParamOut);
			num = HObject.LoadNew(expr_0A, 1, num, out contoursRectified);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contours);
		}

		public static void ChangeRadialDistortionPoints(HTuple row, HTuple col, HTuple camParamIn, HTuple camParamOut, out HTuple rowChanged, out HTuple colChanged)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1923);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, col);
			SZXCArimAPI.Store(expr_0A, 2, camParamIn);
			SZXCArimAPI.Store(expr_0A, 3, camParamOut);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(col);
			SZXCArimAPI.UnpinTuple(camParamIn);
			SZXCArimAPI.UnpinTuple(camParamOut);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowChanged);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out colChanged);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ChangeRadialDistortionImage(HObject image, HObject region, out HObject imageRectified, HTuple camParamIn, HTuple camParamOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1924);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, region);
			SZXCArimAPI.Store(expr_0A, 0, camParamIn);
			SZXCArimAPI.Store(expr_0A, 1, camParamOut);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParamIn);
			SZXCArimAPI.UnpinTuple(camParamOut);
			num = HObject.LoadNew(expr_0A, 1, num, out imageRectified);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(region);
		}

		public static void ChangeRadialDistortionCamPar(HTuple mode, HTuple camParamIn, HTuple distortionCoeffs, out HTuple camParamOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1925);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.Store(expr_0A, 1, camParamIn);
			SZXCArimAPI.Store(expr_0A, 2, distortionCoeffs);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.UnpinTuple(camParamIn);
			SZXCArimAPI.UnpinTuple(distortionCoeffs);
			num = HTuple.LoadNew(expr_0A, 0, num, out camParamOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenCaltab(HTuple XNum, HTuple YNum, HTuple markDist, HTuple diameterRatio, HTuple calPlateDescr, HTuple calPlatePSFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1926);
			SZXCArimAPI.Store(expr_0A, 0, XNum);
			SZXCArimAPI.Store(expr_0A, 1, YNum);
			SZXCArimAPI.Store(expr_0A, 2, markDist);
			SZXCArimAPI.Store(expr_0A, 3, diameterRatio);
			SZXCArimAPI.Store(expr_0A, 4, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 5, calPlatePSFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(XNum);
			SZXCArimAPI.UnpinTuple(YNum);
			SZXCArimAPI.UnpinTuple(markDist);
			SZXCArimAPI.UnpinTuple(diameterRatio);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(calPlatePSFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateCaltab(HTuple numRows, HTuple marksPerRow, HTuple diameter, HTuple finderRow, HTuple finderColumn, HTuple polarity, HTuple calPlateDescr, HTuple calPlatePSFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1927);
			SZXCArimAPI.Store(expr_0A, 0, numRows);
			SZXCArimAPI.Store(expr_0A, 1, marksPerRow);
			SZXCArimAPI.Store(expr_0A, 2, diameter);
			SZXCArimAPI.Store(expr_0A, 3, finderRow);
			SZXCArimAPI.Store(expr_0A, 4, finderColumn);
			SZXCArimAPI.Store(expr_0A, 5, polarity);
			SZXCArimAPI.Store(expr_0A, 6, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 7, calPlatePSFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numRows);
			SZXCArimAPI.UnpinTuple(marksPerRow);
			SZXCArimAPI.UnpinTuple(diameter);
			SZXCArimAPI.UnpinTuple(finderRow);
			SZXCArimAPI.UnpinTuple(finderColumn);
			SZXCArimAPI.UnpinTuple(polarity);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(calPlatePSFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CaltabPoints(HTuple calPlateDescr, out HTuple x, out HTuple y, out HTuple z)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1928);
			SZXCArimAPI.Store(expr_0A, 0, calPlateDescr);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out x);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out y);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out z);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetLineOfSight(HTuple row, HTuple column, HTuple cameraParam, out HTuple PX, out HTuple PY, out HTuple PZ, out HTuple QX, out HTuple QY, out HTuple QZ)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1929);
			SZXCArimAPI.Store(expr_0A, 0, row);
			SZXCArimAPI.Store(expr_0A, 1, column);
			SZXCArimAPI.Store(expr_0A, 2, cameraParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(cameraParam);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out PX);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out PY);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out PZ);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out QX);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out QY);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out QZ);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectHomPointHomMat3d(HTuple homMat3D, HTuple px, HTuple py, HTuple pz, HTuple pw, out HTuple qx, out HTuple qy, out HTuple qw)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1930);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.Store(expr_0A, 4, pw);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			SZXCArimAPI.UnpinTuple(pw);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out qw);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ProjectPointHomMat3d(HTuple homMat3D, HTuple px, HTuple py, HTuple pz, out HTuple qx, out HTuple qy)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1931);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.Store(expr_0A, 1, px);
			SZXCArimAPI.Store(expr_0A, 2, py);
			SZXCArimAPI.Store(expr_0A, 3, pz);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			SZXCArimAPI.UnpinTuple(px);
			SZXCArimAPI.UnpinTuple(py);
			SZXCArimAPI.UnpinTuple(pz);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out qx);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out qy);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void Project3dPoint(HTuple x, HTuple y, HTuple z, HTuple cameraParam, out HTuple row, out HTuple column)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1932);
			SZXCArimAPI.Store(expr_0A, 0, x);
			SZXCArimAPI.Store(expr_0A, 1, y);
			SZXCArimAPI.Store(expr_0A, 2, z);
			SZXCArimAPI.Store(expr_0A, 3, cameraParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(x);
			SZXCArimAPI.UnpinTuple(y);
			SZXCArimAPI.UnpinTuple(z);
			SZXCArimAPI.UnpinTuple(cameraParam);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CamParPoseToHomMat3d(HTuple cameraParam, HTuple pose, out HTuple homMat3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1933);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HomMat3dToPose(HTuple homMat3D, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1934);
			SZXCArimAPI.Store(expr_0A, 0, homMat3D);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(homMat3D);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void PoseToHomMat3d(HTuple pose, out HTuple homMat3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1935);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeCamPar(HTuple serializedItemHandle, out HTuple cameraParam)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1936);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraParam);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeCamPar(HTuple cameraParam, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1937);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializePose(HTuple serializedItemHandle, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1938);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializePose(HTuple pose, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1939);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadPose(HTuple poseFile, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1940);
			SZXCArimAPI.Store(expr_0A, 0, poseFile);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(poseFile);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WritePose(HTuple pose, HTuple poseFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1941);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.Store(expr_0A, 1, poseFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.UnpinTuple(poseFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadCamPar(HTuple camParFile, out HTuple cameraParam)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1942);
			SZXCArimAPI.Store(expr_0A, 0, camParFile);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(camParFile);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraParam);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteCamPar(HTuple cameraParam, HTuple camParFile)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1943);
			SZXCArimAPI.Store(expr_0A, 0, cameraParam);
			SZXCArimAPI.Store(expr_0A, 1, camParFile);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(camParFile);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SimCaltab(out HObject simImage, HTuple calPlateDescr, HTuple cameraParam, HTuple calPlatePose, HTuple grayBackground, HTuple grayPlate, HTuple grayMarks, HTuple scaleFac)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1944);
			SZXCArimAPI.Store(expr_0A, 0, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 1, cameraParam);
			SZXCArimAPI.Store(expr_0A, 2, calPlatePose);
			SZXCArimAPI.Store(expr_0A, 3, grayBackground);
			SZXCArimAPI.Store(expr_0A, 4, grayPlate);
			SZXCArimAPI.Store(expr_0A, 5, grayMarks);
			SZXCArimAPI.Store(expr_0A, 6, scaleFac);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(calPlatePose);
			SZXCArimAPI.UnpinTuple(grayBackground);
			SZXCArimAPI.UnpinTuple(grayPlate);
			SZXCArimAPI.UnpinTuple(grayMarks);
			SZXCArimAPI.UnpinTuple(scaleFac);
			num = HObject.LoadNew(expr_0A, 1, num, out simImage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DispCaltab(HTuple windowHandle, HTuple calPlateDescr, HTuple cameraParam, HTuple calPlatePose, HTuple scaleFac)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1945);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 2, cameraParam);
			SZXCArimAPI.Store(expr_0A, 3, calPlatePose);
			SZXCArimAPI.Store(expr_0A, 4, scaleFac);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(calPlatePose);
			SZXCArimAPI.UnpinTuple(scaleFac);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CameraCalibration(HTuple NX, HTuple NY, HTuple NZ, HTuple NRow, HTuple NCol, HTuple startCamParam, HTuple NStartPose, HTuple estimateParams, out HTuple cameraParam, out HTuple NFinalPose, out HTuple errors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1946);
			SZXCArimAPI.Store(expr_0A, 0, NX);
			SZXCArimAPI.Store(expr_0A, 1, NY);
			SZXCArimAPI.Store(expr_0A, 2, NZ);
			SZXCArimAPI.Store(expr_0A, 3, NRow);
			SZXCArimAPI.Store(expr_0A, 4, NCol);
			SZXCArimAPI.Store(expr_0A, 5, startCamParam);
			SZXCArimAPI.Store(expr_0A, 6, NStartPose);
			SZXCArimAPI.Store(expr_0A, 7, estimateParams);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(NX);
			SZXCArimAPI.UnpinTuple(NY);
			SZXCArimAPI.UnpinTuple(NZ);
			SZXCArimAPI.UnpinTuple(NRow);
			SZXCArimAPI.UnpinTuple(NCol);
			SZXCArimAPI.UnpinTuple(startCamParam);
			SZXCArimAPI.UnpinTuple(NStartPose);
			SZXCArimAPI.UnpinTuple(estimateParams);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraParam);
			num = HTuple.LoadNew(expr_0A, 1, num, out NFinalPose);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out errors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindMarksAndPose(HObject image, HObject calPlateRegion, HTuple calPlateDescr, HTuple startCamParam, HTuple startThresh, HTuple deltaThresh, HTuple minThresh, HTuple alpha, HTuple minContLength, HTuple maxDiamMarks, out HTuple RCoord, out HTuple CCoord, out HTuple startPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1947);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, calPlateRegion);
			SZXCArimAPI.Store(expr_0A, 0, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 1, startCamParam);
			SZXCArimAPI.Store(expr_0A, 2, startThresh);
			SZXCArimAPI.Store(expr_0A, 3, deltaThresh);
			SZXCArimAPI.Store(expr_0A, 4, minThresh);
			SZXCArimAPI.Store(expr_0A, 5, alpha);
			SZXCArimAPI.Store(expr_0A, 6, minContLength);
			SZXCArimAPI.Store(expr_0A, 7, maxDiamMarks);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(startCamParam);
			SZXCArimAPI.UnpinTuple(startThresh);
			SZXCArimAPI.UnpinTuple(deltaThresh);
			SZXCArimAPI.UnpinTuple(minThresh);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.UnpinTuple(minContLength);
			SZXCArimAPI.UnpinTuple(maxDiamMarks);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out RCoord);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out CCoord);
			num = HTuple.LoadNew(expr_0A, 2, num, out startPose);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(calPlateRegion);
		}

		public static void FindCaltab(HObject image, out HObject calPlate, HTuple calPlateDescr, HTuple sizeGauss, HTuple markThresh, HTuple minDiamMarks)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1948);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, calPlateDescr);
			SZXCArimAPI.Store(expr_0A, 1, sizeGauss);
			SZXCArimAPI.Store(expr_0A, 2, markThresh);
			SZXCArimAPI.Store(expr_0A, 3, minDiamMarks);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calPlateDescr);
			SZXCArimAPI.UnpinTuple(sizeGauss);
			SZXCArimAPI.UnpinTuple(markThresh);
			SZXCArimAPI.UnpinTuple(minDiamMarks);
			num = HObject.LoadNew(expr_0A, 1, num, out calPlate);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClearAllCameraSetupModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1949);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearCameraSetupModel(HTuple cameraSetupModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1950);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SerializeCameraSetupModel(HTuple cameraSetupModelID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1951);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeCameraSetupModel(HTuple serializedItemHandle, out HTuple cameraSetupModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1952);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraSetupModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteCameraSetupModel(HTuple cameraSetupModelID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1953);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadCameraSetupModel(HTuple fileName, out HTuple cameraSetupModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1954);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraSetupModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetCameraSetupParam(HTuple cameraSetupModelID, HTuple cameraIdx, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1955);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetCameraSetupParam(HTuple cameraSetupModelID, HTuple cameraIdx, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1956);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetCameraSetupCamParam(HTuple cameraSetupModelID, HTuple cameraIdx, HTuple cameraType, HTuple cameraParam, HTuple cameraPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1957);
			SZXCArimAPI.Store(expr_0A, 0, cameraSetupModelID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, cameraType);
			SZXCArimAPI.Store(expr_0A, 3, cameraParam);
			SZXCArimAPI.Store(expr_0A, 4, cameraPose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(cameraSetupModelID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(cameraType);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.UnpinTuple(cameraPose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateCameraSetupModel(HTuple numCameras, out HTuple cameraSetupModelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1958);
			SZXCArimAPI.Store(expr_0A, 0, numCameras);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(numCameras);
			num = HTuple.LoadNew(expr_0A, 0, num, out cameraSetupModelID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearAllCalibData()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1959);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearCalibData(HTuple calibDataID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1960);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeCalibData(HTuple serializedItemHandle, out HTuple calibDataID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1961);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out calibDataID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeCalibData(HTuple calibDataID, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1962);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadCalibData(HTuple fileName, out HTuple calibDataID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1963);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out calibDataID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteCalibData(HTuple calibDataID, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1964);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CalibrateHandEye(HTuple calibDataID, out HTuple errors)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1965);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out errors);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CalibrateCameras(HTuple calibDataID, out HTuple error)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1966);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out error);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveCalibData(HTuple calibDataID, HTuple itemType, HTuple itemIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1967);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, itemType);
			SZXCArimAPI.Store(expr_0A, 2, itemIdx);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(itemType);
			SZXCArimAPI.UnpinTuple(itemIdx);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetCalibData(HTuple calibDataID, HTuple itemType, HTuple itemIdx, HTuple dataName, HTuple dataValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1968);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, itemType);
			SZXCArimAPI.Store(expr_0A, 2, itemIdx);
			SZXCArimAPI.Store(expr_0A, 3, dataName);
			SZXCArimAPI.Store(expr_0A, 4, dataValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(itemType);
			SZXCArimAPI.UnpinTuple(itemIdx);
			SZXCArimAPI.UnpinTuple(dataName);
			SZXCArimAPI.UnpinTuple(dataValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void FindCalibObject(HObject image, HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1969);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(image);
		}

		public static void RemoveCalibDataObserv(HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1970);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetCalibDataObservContours(out HObject contours, HTuple calibDataID, HTuple contourName, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1971);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, contourName);
			SZXCArimAPI.Store(expr_0A, 2, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 4, calibObjPoseIdx);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(contourName);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			num = HObject.LoadNew(expr_0A, 1, num, out contours);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetCalibDataObservPose(HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx, out HTuple objInCameraPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1972);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			num = HTuple.LoadNew(expr_0A, 0, num, out objInCameraPose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetCalibDataObservPose(HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx, HTuple objInCameraPose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1973);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			SZXCArimAPI.Store(expr_0A, 4, objInCameraPose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			SZXCArimAPI.UnpinTuple(objInCameraPose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetCalibDataObservPoints(HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx, out HTuple row, out HTuple column, out HTuple index, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1974);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			num = HTuple.LoadNew(expr_0A, 0, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, num, out index);
			num = HTuple.LoadNew(expr_0A, 3, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetCalibDataObservPoints(HTuple calibDataID, HTuple cameraIdx, HTuple calibObjIdx, HTuple calibObjPoseIdx, HTuple row, HTuple column, HTuple index, HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1975);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 3, calibObjPoseIdx);
			SZXCArimAPI.Store(expr_0A, 4, row);
			SZXCArimAPI.Store(expr_0A, 5, column);
			SZXCArimAPI.Store(expr_0A, 6, index);
			SZXCArimAPI.Store(expr_0A, 7, pose);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjPoseIdx);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(pose);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void QueryCalibDataObservIndices(HTuple calibDataID, HTuple itemType, HTuple itemIdx, out HTuple index1, out HTuple index2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1976);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, itemType);
			SZXCArimAPI.Store(expr_0A, 2, itemIdx);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(itemType);
			SZXCArimAPI.UnpinTuple(itemIdx);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out index1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out index2);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetCalibData(HTuple calibDataID, HTuple itemType, HTuple itemIdx, HTuple dataName, out HTuple dataValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1977);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, itemType);
			SZXCArimAPI.Store(expr_0A, 2, itemIdx);
			SZXCArimAPI.Store(expr_0A, 3, dataName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(itemType);
			SZXCArimAPI.UnpinTuple(itemIdx);
			SZXCArimAPI.UnpinTuple(dataName);
			num = HTuple.LoadNew(expr_0A, 0, num, out dataValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetCalibDataCalibObject(HTuple calibDataID, HTuple calibObjIdx, HTuple calibObjDescr)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1978);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, calibObjIdx);
			SZXCArimAPI.Store(expr_0A, 2, calibObjDescr);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(calibObjIdx);
			SZXCArimAPI.UnpinTuple(calibObjDescr);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetCalibDataCamParam(HTuple calibDataID, HTuple cameraIdx, HTuple cameraType, HTuple cameraParam)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1979);
			SZXCArimAPI.Store(expr_0A, 0, calibDataID);
			SZXCArimAPI.Store(expr_0A, 1, cameraIdx);
			SZXCArimAPI.Store(expr_0A, 2, cameraType);
			SZXCArimAPI.Store(expr_0A, 3, cameraParam);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibDataID);
			SZXCArimAPI.UnpinTuple(cameraIdx);
			SZXCArimAPI.UnpinTuple(cameraType);
			SZXCArimAPI.UnpinTuple(cameraParam);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateCalibData(HTuple calibSetup, HTuple numCameras, HTuple numCalibObjects, out HTuple calibDataID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1980);
			SZXCArimAPI.Store(expr_0A, 0, calibSetup);
			SZXCArimAPI.Store(expr_0A, 1, numCameras);
			SZXCArimAPI.Store(expr_0A, 2, numCalibObjects);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(calibSetup);
			SZXCArimAPI.UnpinTuple(numCameras);
			SZXCArimAPI.UnpinTuple(numCalibObjects);
			num = HTuple.LoadNew(expr_0A, 0, num, out calibDataID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetBeadInspectionParam(HTuple beadInspectionModel, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1981);
			SZXCArimAPI.Store(expr_0A, 0, beadInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(beadInspectionModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetBeadInspectionParam(HTuple beadInspectionModel, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1982);
			SZXCArimAPI.Store(expr_0A, 0, beadInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(beadInspectionModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ApplyBeadInspectionModel(HObject image, out HObject leftContour, out HObject rightContour, out HObject errorSegment, HTuple beadInspectionModel, out HTuple errorType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1983);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, beadInspectionModel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(beadInspectionModel);
			num = HObject.LoadNew(expr_0A, 1, num, out leftContour);
			num = HObject.LoadNew(expr_0A, 2, num, out rightContour);
			num = HObject.LoadNew(expr_0A, 3, num, out errorSegment);
			num = HTuple.LoadNew(expr_0A, 0, num, out errorType);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ClearBeadInspectionModel(HTuple beadInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1984);
			SZXCArimAPI.Store(expr_0A, 0, beadInspectionModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(beadInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateBeadInspectionModel(HObject beadContour, HTuple targetThickness, HTuple thicknessTolerance, HTuple positionTolerance, HTuple polarity, HTuple genParamName, HTuple genParamValue, out HTuple beadInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1985);
			SZXCArimAPI.Store(expr_0A, 1, beadContour);
			SZXCArimAPI.Store(expr_0A, 0, targetThickness);
			SZXCArimAPI.Store(expr_0A, 1, thicknessTolerance);
			SZXCArimAPI.Store(expr_0A, 2, positionTolerance);
			SZXCArimAPI.Store(expr_0A, 3, polarity);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(targetThickness);
			SZXCArimAPI.UnpinTuple(thicknessTolerance);
			SZXCArimAPI.UnpinTuple(positionTolerance);
			SZXCArimAPI.UnpinTuple(polarity);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out beadInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(beadContour);
		}

		public static void DeserializeBarCodeModel(HTuple serializedItemHandle, out HTuple barCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1986);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out barCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeBarCodeModel(HTuple barCodeHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1987);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadBarCodeModel(HTuple fileName, out HTuple barCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1988);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out barCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteBarCodeModel(HTuple barCodeHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1989);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetBarCodeObject(out HObject barCodeObjects, HTuple barCodeHandle, HTuple candidateHandle, HTuple objectName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1990);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, candidateHandle);
			SZXCArimAPI.Store(expr_0A, 2, objectName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(candidateHandle);
			SZXCArimAPI.UnpinTuple(objectName);
			num = HObject.LoadNew(expr_0A, 1, num, out barCodeObjects);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetBarCodeResult(HTuple barCodeHandle, HTuple candidateHandle, HTuple resultName, out HTuple barCodeResults)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1991);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, candidateHandle);
			SZXCArimAPI.Store(expr_0A, 2, resultName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(candidateHandle);
			SZXCArimAPI.UnpinTuple(resultName);
			num = HTuple.LoadNew(expr_0A, 0, num, out barCodeResults);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DecodeBarCodeRectangle2(HObject image, HTuple barCodeHandle, HTuple codeType, HTuple row, HTuple column, HTuple phi, HTuple length1, HTuple length2, out HTuple decodedDataStrings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1992);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, codeType);
			SZXCArimAPI.Store(expr_0A, 2, row);
			SZXCArimAPI.Store(expr_0A, 3, column);
			SZXCArimAPI.Store(expr_0A, 4, phi);
			SZXCArimAPI.Store(expr_0A, 5, length1);
			SZXCArimAPI.Store(expr_0A, 6, length2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(codeType);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(phi);
			SZXCArimAPI.UnpinTuple(length1);
			SZXCArimAPI.UnpinTuple(length2);
			num = HTuple.LoadNew(expr_0A, 0, num, out decodedDataStrings);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindBarCode(HObject image, out HObject symbolRegions, HTuple barCodeHandle, HTuple codeType, out HTuple decodedDataStrings)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1993);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, codeType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(codeType);
			num = HObject.LoadNew(expr_0A, 1, num, out symbolRegions);
			num = HTuple.LoadNew(expr_0A, 0, num, out decodedDataStrings);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void QueryBarCodeParams(HTuple barCodeHandle, HTuple properties, out HTuple genParamName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1994);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, properties);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(properties);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamName);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetBarCodeParamSpecific(HTuple barCodeHandle, HTuple codeTypes, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1995);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, codeTypes);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(codeTypes);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetBarCodeParam(HTuple barCodeHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1996);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetBarCodeParamSpecific(HTuple barCodeHandle, HTuple codeTypes, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1997);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, codeTypes);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(codeTypes);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetBarCodeParam(HTuple barCodeHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1998);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearAllBarCodeModels()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(1999);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearBarCodeModel(HTuple barCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2000);
			SZXCArimAPI.Store(expr_0A, 0, barCodeHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(barCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateBarCodeModel(HTuple genParamName, HTuple genParamValue, out HTuple barCodeHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2001);
			SZXCArimAPI.Store(expr_0A, 0, genParamName);
			SZXCArimAPI.Store(expr_0A, 1, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out barCodeHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseBgEsti(HTuple bgEstiHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2002);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GiveBgEsti(out HObject backgroundImage, HTuple bgEstiHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2003);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out backgroundImage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void UpdateBgEsti(HObject presentImage, HObject upDateRegion, HTuple bgEstiHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2004);
			SZXCArimAPI.Store(expr_0A, 1, presentImage);
			SZXCArimAPI.Store(expr_0A, 2, upDateRegion);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(presentImage);
			GC.KeepAlive(upDateRegion);
		}

		public static void RunBgEsti(HObject presentImage, out HObject foregroundRegion, HTuple bgEstiHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2005);
			SZXCArimAPI.Store(expr_0A, 1, presentImage);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out foregroundRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(presentImage);
		}

		public static void GetBgEstiParams(HTuple bgEstiHandle, out HTuple syspar1, out HTuple syspar2, out HTuple gainMode, out HTuple gain1, out HTuple gain2, out HTuple adaptMode, out HTuple minDiff, out HTuple statNum, out HTuple confidenceC, out HTuple timeC)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2006);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			SZXCArimAPI.InitOCT(expr_0A, 8);
			SZXCArimAPI.InitOCT(expr_0A, 9);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out syspar1);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out syspar2);
			num = HTuple.LoadNew(expr_0A, 2, num, out gainMode);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out gain1);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out gain2);
			num = HTuple.LoadNew(expr_0A, 5, num, out adaptMode);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out minDiff);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.INTEGER, num, out statNum);
			num = HTuple.LoadNew(expr_0A, 8, HTupleType.DOUBLE, num, out confidenceC);
			num = HTuple.LoadNew(expr_0A, 9, HTupleType.DOUBLE, num, out timeC);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetBgEstiParams(HTuple bgEstiHandle, HTuple syspar1, HTuple syspar2, HTuple gainMode, HTuple gain1, HTuple gain2, HTuple adaptMode, HTuple minDiff, HTuple statNum, HTuple confidenceC, HTuple timeC)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2007);
			SZXCArimAPI.Store(expr_0A, 0, bgEstiHandle);
			SZXCArimAPI.Store(expr_0A, 1, syspar1);
			SZXCArimAPI.Store(expr_0A, 2, syspar2);
			SZXCArimAPI.Store(expr_0A, 3, gainMode);
			SZXCArimAPI.Store(expr_0A, 4, gain1);
			SZXCArimAPI.Store(expr_0A, 5, gain2);
			SZXCArimAPI.Store(expr_0A, 6, adaptMode);
			SZXCArimAPI.Store(expr_0A, 7, minDiff);
			SZXCArimAPI.Store(expr_0A, 8, statNum);
			SZXCArimAPI.Store(expr_0A, 9, confidenceC);
			SZXCArimAPI.Store(expr_0A, 10, timeC);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(bgEstiHandle);
			SZXCArimAPI.UnpinTuple(syspar1);
			SZXCArimAPI.UnpinTuple(syspar2);
			SZXCArimAPI.UnpinTuple(gainMode);
			SZXCArimAPI.UnpinTuple(gain1);
			SZXCArimAPI.UnpinTuple(gain2);
			SZXCArimAPI.UnpinTuple(adaptMode);
			SZXCArimAPI.UnpinTuple(minDiff);
			SZXCArimAPI.UnpinTuple(statNum);
			SZXCArimAPI.UnpinTuple(confidenceC);
			SZXCArimAPI.UnpinTuple(timeC);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateBgEsti(HObject initializeImage, HTuple syspar1, HTuple syspar2, HTuple gainMode, HTuple gain1, HTuple gain2, HTuple adaptMode, HTuple minDiff, HTuple statNum, HTuple confidenceC, HTuple timeC, out HTuple bgEstiHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2008);
			SZXCArimAPI.Store(expr_0A, 1, initializeImage);
			SZXCArimAPI.Store(expr_0A, 0, syspar1);
			SZXCArimAPI.Store(expr_0A, 1, syspar2);
			SZXCArimAPI.Store(expr_0A, 2, gainMode);
			SZXCArimAPI.Store(expr_0A, 3, gain1);
			SZXCArimAPI.Store(expr_0A, 4, gain2);
			SZXCArimAPI.Store(expr_0A, 5, adaptMode);
			SZXCArimAPI.Store(expr_0A, 6, minDiff);
			SZXCArimAPI.Store(expr_0A, 7, statNum);
			SZXCArimAPI.Store(expr_0A, 8, confidenceC);
			SZXCArimAPI.Store(expr_0A, 9, timeC);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(syspar1);
			SZXCArimAPI.UnpinTuple(syspar2);
			SZXCArimAPI.UnpinTuple(gainMode);
			SZXCArimAPI.UnpinTuple(gain1);
			SZXCArimAPI.UnpinTuple(gain2);
			SZXCArimAPI.UnpinTuple(adaptMode);
			SZXCArimAPI.UnpinTuple(minDiff);
			SZXCArimAPI.UnpinTuple(statNum);
			SZXCArimAPI.UnpinTuple(confidenceC);
			SZXCArimAPI.UnpinTuple(timeC);
			num = HTuple.LoadNew(expr_0A, 0, num, out bgEstiHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(initializeImage);
		}

		public static void CloseAllBgEsti()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2009);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ControlIoChannel(HTuple IOChannelHandle, HTuple paramAction, HTuple paramArgument, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2010);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			SZXCArimAPI.Store(expr_0A, 1, paramAction);
			SZXCArimAPI.Store(expr_0A, 2, paramArgument);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			SZXCArimAPI.UnpinTuple(paramAction);
			SZXCArimAPI.UnpinTuple(paramArgument);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteIoChannel(HTuple IOChannelHandle, HTuple value, out HTuple status)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2011);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			SZXCArimAPI.Store(expr_0A, 1, value);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			SZXCArimAPI.UnpinTuple(value);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out status);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadIoChannel(HTuple IOChannelHandle, out HTuple value, out HTuple status)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2012);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out status);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetIoChannelParam(HTuple IOChannelHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2013);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetIoChannelParam(HTuple IOChannelHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2014);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseIoChannel(HTuple IOChannelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2015);
			SZXCArimAPI.Store(expr_0A, 0, IOChannelHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOChannelHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OpenIoChannel(HTuple IODeviceHandle, HTuple IOChannelName, HTuple genParamName, HTuple genParamValue, out HTuple IOChannelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2016);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, IOChannelName);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.UnpinTuple(IOChannelName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out IOChannelHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryIoDevice(HTuple IODeviceHandle, HTuple IOChannelName, HTuple query, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2017);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, IOChannelName);
			SZXCArimAPI.Store(expr_0A, 2, query);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.UnpinTuple(IOChannelName);
			SZXCArimAPI.UnpinTuple(query);
			num = HTuple.LoadNew(expr_0A, 0, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ControlIoDevice(HTuple IODeviceHandle, HTuple action, HTuple argument, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2018);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, action);
			SZXCArimAPI.Store(expr_0A, 2, argument);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.UnpinTuple(action);
			SZXCArimAPI.UnpinTuple(argument);
			num = HTuple.LoadNew(expr_0A, 0, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetIoDeviceParam(HTuple IODeviceHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2019);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetIoDeviceParam(HTuple IODeviceHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2020);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseIoDevice(HTuple IODeviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2021);
			SZXCArimAPI.Store(expr_0A, 0, IODeviceHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IODeviceHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OpenIoDevice(HTuple IOInterfaceName, HTuple IODeviceName, HTuple genParamName, HTuple genParamValue, out HTuple IODeviceHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2022);
			SZXCArimAPI.Store(expr_0A, 0, IOInterfaceName);
			SZXCArimAPI.Store(expr_0A, 1, IODeviceName);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOInterfaceName);
			SZXCArimAPI.UnpinTuple(IODeviceName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out IODeviceHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ControlIoInterface(HTuple IOInterfaceName, HTuple action, HTuple argument, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2023);
			SZXCArimAPI.Store(expr_0A, 0, IOInterfaceName);
			SZXCArimAPI.Store(expr_0A, 1, action);
			SZXCArimAPI.Store(expr_0A, 2, argument);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOInterfaceName);
			SZXCArimAPI.UnpinTuple(action);
			SZXCArimAPI.UnpinTuple(argument);
			num = HTuple.LoadNew(expr_0A, 0, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryIoInterface(HTuple IOInterfaceName, HTuple query, out HTuple result)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2024);
			SZXCArimAPI.Store(expr_0A, 0, IOInterfaceName);
			SZXCArimAPI.Store(expr_0A, 1, query);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(IOInterfaceName);
			SZXCArimAPI.UnpinTuple(query);
			num = HTuple.LoadNew(expr_0A, 0, num, out result);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetFramegrabberParam(HTuple acqHandle, HTuple param, out HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2025);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, param);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(param);
			num = HTuple.LoadNew(expr_0A, 0, num, out value);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFramegrabberParam(HTuple acqHandle, HTuple param, HTuple value)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2026);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, param);
			SZXCArimAPI.Store(expr_0A, 2, value);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(param);
			SZXCArimAPI.UnpinTuple(value);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetFramegrabberCallback(HTuple acqHandle, HTuple callbackType, out HTuple callbackFunction, out HTuple userContext)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2027);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, callbackType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(callbackType);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out callbackFunction);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out userContext);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFramegrabberCallback(HTuple acqHandle, HTuple callbackType, HTuple callbackFunction, HTuple userContext)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2028);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, callbackType);
			SZXCArimAPI.Store(expr_0A, 2, callbackFunction);
			SZXCArimAPI.Store(expr_0A, 3, userContext);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(callbackType);
			SZXCArimAPI.UnpinTuple(callbackFunction);
			SZXCArimAPI.UnpinTuple(userContext);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GrabDataAsync(out HObject image, out HObject region, out HObject contours, HTuple acqHandle, HTuple maxDelay, out HTuple data)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2029);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, maxDelay);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(maxDelay);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			num = HObject.LoadNew(expr_0A, 2, num, out region);
			num = HObject.LoadNew(expr_0A, 3, num, out contours);
			num = HTuple.LoadNew(expr_0A, 0, num, out data);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GrabData(out HObject image, out HObject region, out HObject contours, HTuple acqHandle, out HTuple data)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2030);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			num = HObject.LoadNew(expr_0A, 2, num, out region);
			num = HObject.LoadNew(expr_0A, 3, num, out contours);
			num = HTuple.LoadNew(expr_0A, 0, num, out data);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GrabImageAsync(out HObject image, HTuple acqHandle, HTuple maxDelay)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2031);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, maxDelay);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(maxDelay);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GrabImageStart(HTuple acqHandle, HTuple maxDelay)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2032);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, maxDelay);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(maxDelay);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GrabImage(out HObject image, HTuple acqHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2033);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			num = HObject.LoadNew(expr_0A, 1, num, out image);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InfoFramegrabber(HTuple name, HTuple query, out HTuple information, out HTuple valueList)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2034);
			SZXCArimAPI.Store(expr_0A, 0, name);
			SZXCArimAPI.Store(expr_0A, 1, query);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(name);
			SZXCArimAPI.UnpinTuple(query);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			num = HTuple.LoadNew(expr_0A, 1, num, out valueList);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CloseAllFramegrabbers()
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2035);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CloseFramegrabber(HTuple acqHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2036);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void OpenFramegrabber(HTuple name, HTuple horizontalResolution, HTuple verticalResolution, HTuple imageWidth, HTuple imageHeight, HTuple startRow, HTuple startColumn, HTuple field, HTuple bitsPerChannel, HTuple colorSpace, HTuple generic, HTuple externalTrigger, HTuple cameraType, HTuple device, HTuple port, HTuple lineIn, out HTuple acqHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2037);
			SZXCArimAPI.Store(expr_0A, 0, name);
			SZXCArimAPI.Store(expr_0A, 1, horizontalResolution);
			SZXCArimAPI.Store(expr_0A, 2, verticalResolution);
			SZXCArimAPI.Store(expr_0A, 3, imageWidth);
			SZXCArimAPI.Store(expr_0A, 4, imageHeight);
			SZXCArimAPI.Store(expr_0A, 5, startRow);
			SZXCArimAPI.Store(expr_0A, 6, startColumn);
			SZXCArimAPI.Store(expr_0A, 7, field);
			SZXCArimAPI.Store(expr_0A, 8, bitsPerChannel);
			SZXCArimAPI.Store(expr_0A, 9, colorSpace);
			SZXCArimAPI.Store(expr_0A, 10, generic);
			SZXCArimAPI.Store(expr_0A, 11, externalTrigger);
			SZXCArimAPI.Store(expr_0A, 12, cameraType);
			SZXCArimAPI.Store(expr_0A, 13, device);
			SZXCArimAPI.Store(expr_0A, 14, port);
			SZXCArimAPI.Store(expr_0A, 15, lineIn);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(name);
			SZXCArimAPI.UnpinTuple(horizontalResolution);
			SZXCArimAPI.UnpinTuple(verticalResolution);
			SZXCArimAPI.UnpinTuple(imageWidth);
			SZXCArimAPI.UnpinTuple(imageHeight);
			SZXCArimAPI.UnpinTuple(startRow);
			SZXCArimAPI.UnpinTuple(startColumn);
			SZXCArimAPI.UnpinTuple(field);
			SZXCArimAPI.UnpinTuple(bitsPerChannel);
			SZXCArimAPI.UnpinTuple(colorSpace);
			SZXCArimAPI.UnpinTuple(generic);
			SZXCArimAPI.UnpinTuple(externalTrigger);
			SZXCArimAPI.UnpinTuple(cameraType);
			SZXCArimAPI.UnpinTuple(device);
			SZXCArimAPI.UnpinTuple(port);
			SZXCArimAPI.UnpinTuple(lineIn);
			num = HTuple.LoadNew(expr_0A, 0, num, out acqHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetFramegrabberLut(HTuple acqHandle, out HTuple imageRed, out HTuple imageGreen, out HTuple imageBlue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2038);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out imageRed);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out imageGreen);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out imageBlue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetFramegrabberLut(HTuple acqHandle, HTuple imageRed, HTuple imageGreen, HTuple imageBlue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2039);
			SZXCArimAPI.Store(expr_0A, 0, acqHandle);
			SZXCArimAPI.Store(expr_0A, 1, imageRed);
			SZXCArimAPI.Store(expr_0A, 2, imageGreen);
			SZXCArimAPI.Store(expr_0A, 3, imageBlue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(acqHandle);
			SZXCArimAPI.UnpinTuple(imageRed);
			SZXCArimAPI.UnpinTuple(imageGreen);
			SZXCArimAPI.UnpinTuple(imageBlue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddScene3dLabel(HTuple scene3D, HTuple text, HTuple referencePoint, HTuple position, HTuple relatesTo, out HTuple labelIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2040);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, text);
			SZXCArimAPI.Store(expr_0A, 2, referencePoint);
			SZXCArimAPI.Store(expr_0A, 3, position);
			SZXCArimAPI.Store(expr_0A, 4, relatesTo);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(text);
			SZXCArimAPI.UnpinTuple(referencePoint);
			SZXCArimAPI.UnpinTuple(position);
			SZXCArimAPI.UnpinTuple(relatesTo);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out labelIndex);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveScene3dLabel(HTuple scene3D, HTuple labelIndex)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2041);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, labelIndex);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(labelIndex);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetScene3dLabelParam(HTuple scene3D, HTuple labelIndex, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2042);
			SZXCArimAPI.Store(expr_0A, 0, scene3D);
			SZXCArimAPI.Store(expr_0A, 1, labelIndex);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(scene3D);
			SZXCArimAPI.UnpinTuple(labelIndex);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AddTextureInspectionModelImage(HObject image, HTuple textureInspectionModel, out HTuple indices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2043);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out indices);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void ApplyTextureInspectionModel(HObject image, out HObject noveltyRegion, HTuple textureInspectionModel, out HTuple textureInspectionResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2044);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			num = HObject.LoadNew(expr_0A, 1, num, out noveltyRegion);
			num = HTuple.LoadNew(expr_0A, 0, num, out textureInspectionResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void BilateralFilter(HObject image, HObject imageJoint, out HObject imageBilateral, HTuple sigmaSpatial, HTuple sigmaRange, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2045);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, imageJoint);
			SZXCArimAPI.Store(expr_0A, 0, sigmaSpatial);
			SZXCArimAPI.Store(expr_0A, 1, sigmaRange);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(sigmaSpatial);
			SZXCArimAPI.UnpinTuple(sigmaRange);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out imageBilateral);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(imageJoint);
		}

		public static void ClearOcrClassCnn(HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2046);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTextureInspectionModel(HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2047);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearTextureInspectionResult(HTuple textureInspectionResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2048);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionResultID);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionResultID);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ConvertCoordinatesImageToWindow(HTuple windowHandle, HTuple rowImage, HTuple columnImage, out HTuple rowWindow, out HTuple columnWindow)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2049);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowImage);
			SZXCArimAPI.Store(expr_0A, 2, columnImage);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowImage);
			SZXCArimAPI.UnpinTuple(columnImage);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowWindow);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnWindow);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ConvertCoordinatesWindowToImage(HTuple windowHandle, HTuple rowWindow, HTuple columnWindow, out HTuple rowImage, out HTuple columnImage)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2050);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, rowWindow);
			SZXCArimAPI.Store(expr_0A, 2, columnWindow);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(rowWindow);
			SZXCArimAPI.UnpinTuple(columnWindow);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rowImage);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out columnImage);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateTextureInspectionModel(HTuple modelType, out HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2051);
			SZXCArimAPI.Store(expr_0A, 0, modelType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelType);
			num = HTuple.LoadNew(expr_0A, 0, num, out textureInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeDualQuat(HTuple serializedItemHandle, out HTuple dualQuaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2052);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out dualQuaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeOcrClassCnn(HTuple serializedItemHandle, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2053);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeTextureInspectionModel(HTuple serializedItemHandle, out HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2054);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out textureInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DispText(HTuple windowHandle, HTuple stringVal, HTuple coordSystem, HTuple row, HTuple column, HTuple color, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2055);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, stringVal);
			SZXCArimAPI.Store(expr_0A, 2, coordSystem);
			SZXCArimAPI.Store(expr_0A, 3, row);
			SZXCArimAPI.Store(expr_0A, 4, column);
			SZXCArimAPI.Store(expr_0A, 5, color);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(stringVal);
			SZXCArimAPI.UnpinTuple(coordSystem);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(color);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DoOcrMultiClassCnn(HObject character, HObject image, HTuple OCRHandle, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2056);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrSingleClassCnn(HObject character, HObject image, HTuple OCRHandle, HTuple num, out HTuple classVal, out HTuple confidence)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2057);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, num);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num2 = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(num);
			num2 = HTuple.LoadNew(expr_0A, 0, num2, out classVal);
			num2 = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num2, out confidence);
			SZXCArimAPI.PostCall(expr_0A, num2);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DoOcrWordCnn(HObject character, HObject image, HTuple OCRHandle, HTuple expression, HTuple numAlternatives, HTuple numCorrections, out HTuple classVal, out HTuple confidence, out HTuple word, out HTuple score)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2058);
			SZXCArimAPI.Store(expr_0A, 1, character);
			SZXCArimAPI.Store(expr_0A, 2, image);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, expression);
			SZXCArimAPI.Store(expr_0A, 2, numAlternatives);
			SZXCArimAPI.Store(expr_0A, 3, numCorrections);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(expression);
			SZXCArimAPI.UnpinTuple(numAlternatives);
			SZXCArimAPI.UnpinTuple(numCorrections);
			num = HTuple.LoadNew(expr_0A, 0, num, out classVal);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out confidence);
			num = HTuple.LoadNew(expr_0A, 2, num, out word);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(character);
			GC.KeepAlive(image);
		}

		public static void DualQuatCompose(HTuple dualQuaternionLeft, HTuple dualQuaternionRight, out HTuple dualQuaternionComposed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2059);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternionLeft);
			SZXCArimAPI.Store(expr_0A, 1, dualQuaternionRight);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternionLeft);
			SZXCArimAPI.UnpinTuple(dualQuaternionRight);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out dualQuaternionComposed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatConjugate(HTuple dualQuaternion, out HTuple dualQuaternionConjugate)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2060);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out dualQuaternionConjugate);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatInterpolate(HTuple dualQuaternionStart, HTuple dualQuaternionEnd, HTuple interpPos, out HTuple dualQuaternionInterpolated)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2061);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternionStart);
			SZXCArimAPI.Store(expr_0A, 1, dualQuaternionEnd);
			SZXCArimAPI.Store(expr_0A, 2, interpPos);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternionStart);
			SZXCArimAPI.UnpinTuple(dualQuaternionEnd);
			SZXCArimAPI.UnpinTuple(interpPos);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out dualQuaternionInterpolated);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatNormalize(HTuple dualQuaternion, out HTuple dualQuaternionNormalized)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2062);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out dualQuaternionNormalized);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatToHomMat3d(HTuple dualQuaternion, out HTuple homMat3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2063);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out homMat3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatToPose(HTuple dualQuaternion, out HTuple pose)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2064);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatToScrew(HTuple dualQuaternion, HTuple screwFormat, out HTuple axisDirectionX, out HTuple axisDirectionY, out HTuple axisDirectionZ, out HTuple axisMomentOrPointX, out HTuple axisMomentOrPointY, out HTuple axisMomentOrPointZ, out HTuple rotation, out HTuple translation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2065);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.Store(expr_0A, 1, screwFormat);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			SZXCArimAPI.InitOCT(expr_0A, 6);
			SZXCArimAPI.InitOCT(expr_0A, 7);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			SZXCArimAPI.UnpinTuple(screwFormat);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out axisDirectionX);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out axisDirectionY);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out axisDirectionZ);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out axisMomentOrPointX);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out axisMomentOrPointY);
			num = HTuple.LoadNew(expr_0A, 5, HTupleType.DOUBLE, num, out axisMomentOrPointZ);
			num = HTuple.LoadNew(expr_0A, 6, HTupleType.DOUBLE, num, out rotation);
			num = HTuple.LoadNew(expr_0A, 7, HTupleType.DOUBLE, num, out translation);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DualQuatTransLine3d(HTuple dualQuaternion, HTuple lineFormat, HTuple lineDirectionX, HTuple lineDirectionY, HTuple lineDirectionZ, HTuple lineMomentOrPointX, HTuple lineMomentOrPointY, HTuple lineMomentOrPointZ, out HTuple transLineDirectionX, out HTuple transLineDirectionY, out HTuple transLineDirectionZ, out HTuple transLineMomentOrPointX, out HTuple transLineMomentOrPointY, out HTuple transLineMomentOrPointZ)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2066);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.Store(expr_0A, 1, lineFormat);
			SZXCArimAPI.Store(expr_0A, 2, lineDirectionX);
			SZXCArimAPI.Store(expr_0A, 3, lineDirectionY);
			SZXCArimAPI.Store(expr_0A, 4, lineDirectionZ);
			SZXCArimAPI.Store(expr_0A, 5, lineMomentOrPointX);
			SZXCArimAPI.Store(expr_0A, 6, lineMomentOrPointY);
			SZXCArimAPI.Store(expr_0A, 7, lineMomentOrPointZ);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			SZXCArimAPI.InitOCT(expr_0A, 5);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			SZXCArimAPI.UnpinTuple(lineFormat);
			SZXCArimAPI.UnpinTuple(lineDirectionX);
			SZXCArimAPI.UnpinTuple(lineDirectionY);
			SZXCArimAPI.UnpinTuple(lineDirectionZ);
			SZXCArimAPI.UnpinTuple(lineMomentOrPointX);
			SZXCArimAPI.UnpinTuple(lineMomentOrPointY);
			SZXCArimAPI.UnpinTuple(lineMomentOrPointZ);
			num = HTuple.LoadNew(expr_0A, 0, num, out transLineDirectionX);
			num = HTuple.LoadNew(expr_0A, 1, num, out transLineDirectionY);
			num = HTuple.LoadNew(expr_0A, 2, num, out transLineDirectionZ);
			num = HTuple.LoadNew(expr_0A, 3, num, out transLineMomentOrPointX);
			num = HTuple.LoadNew(expr_0A, 4, num, out transLineMomentOrPointY);
			num = HTuple.LoadNew(expr_0A, 5, num, out transLineMomentOrPointZ);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void EdgesObjectModel3d(HTuple objectModel3D, HTuple minAmplitude, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3DEdges)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2067);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, minAmplitude);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(minAmplitude);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DEdges);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FindNccModels(HObject image, HTuple modelIDs, HTuple angleStart, HTuple angleExtent, HTuple minScore, HTuple numMatches, HTuple maxOverlap, HTuple subPixel, HTuple numLevels, out HTuple row, out HTuple column, out HTuple angle, out HTuple score, out HTuple model)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2068);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, modelIDs);
			SZXCArimAPI.Store(expr_0A, 1, angleStart);
			SZXCArimAPI.Store(expr_0A, 2, angleExtent);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, numMatches);
			SZXCArimAPI.Store(expr_0A, 5, maxOverlap);
			SZXCArimAPI.Store(expr_0A, 6, subPixel);
			SZXCArimAPI.Store(expr_0A, 7, numLevels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelIDs);
			SZXCArimAPI.UnpinTuple(angleStart);
			SZXCArimAPI.UnpinTuple(angleExtent);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(numMatches);
			SZXCArimAPI.UnpinTuple(maxOverlap);
			SZXCArimAPI.UnpinTuple(subPixel);
			SZXCArimAPI.UnpinTuple(numLevels);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out row);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out column);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out angle);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.INTEGER, num, out model);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FindSurfaceModelImage(HObject image, HTuple surfaceModelID, HTuple objectModel3D, HTuple relSamplingDistance, HTuple keyPointFraction, HTuple minScore, HTuple returnResultHandle, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple score, out HTuple surfaceMatchingResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2069);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, relSamplingDistance);
			SZXCArimAPI.Store(expr_0A, 3, keyPointFraction);
			SZXCArimAPI.Store(expr_0A, 4, minScore);
			SZXCArimAPI.Store(expr_0A, 5, returnResultHandle);
			SZXCArimAPI.Store(expr_0A, 6, genParamName);
			SZXCArimAPI.Store(expr_0A, 7, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(relSamplingDistance);
			SZXCArimAPI.UnpinTuple(keyPointFraction);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(returnResultHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 2, num, out surfaceMatchingResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void FlushBuffer(HTuple windowHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2070);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void GetNccModelRegion(out HObject modelRegion, HTuple modelID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2071);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			num = HObject.LoadNew(expr_0A, 1, num, out modelRegion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetParamsOcrClassCnn(HTuple OCRHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2072);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetRgba(HTuple windowHandle, out HTuple red, out HTuple green, out HTuple blue, out HTuple alpha)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2073);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out red);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out green);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out blue);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.INTEGER, num, out alpha);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetStereoModelObjectModel3d(HTuple stereoModelID, HTuple genParamName, out HTuple objectModel3D)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2074);
			SZXCArimAPI.Store(expr_0A, 0, stereoModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(stereoModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3D);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTextureInspectionModelImage(out HObject imageOut, HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2075);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			num = HObject.LoadNew(expr_0A, 1, num, out imageOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTextureInspectionModelParam(HTuple textureInspectionModel, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2076);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetTextureInspectionResultObject(out HObject objectVal, HTuple textureInspectionResultID, HTuple resultName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2077);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionResultID);
			SZXCArimAPI.Store(expr_0A, 1, resultName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionResultID);
			SZXCArimAPI.UnpinTuple(resultName);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GuidedFilter(HObject image, HObject imageGuide, out HObject imageGuided, HTuple radius, HTuple amplitude)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2078);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, imageGuide);
			SZXCArimAPI.Store(expr_0A, 0, radius);
			SZXCArimAPI.Store(expr_0A, 1, amplitude);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(radius);
			SZXCArimAPI.UnpinTuple(amplitude);
			num = HObject.LoadNew(expr_0A, 1, num, out imageGuided);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(imageGuide);
		}

		public static void InterleaveChannels(HObject multichannelImage, out HObject interleavedImage, HTuple pixelFormat, HTuple rowBytes, HTuple alpha)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2079);
			SZXCArimAPI.Store(expr_0A, 1, multichannelImage);
			SZXCArimAPI.Store(expr_0A, 0, pixelFormat);
			SZXCArimAPI.Store(expr_0A, 1, rowBytes);
			SZXCArimAPI.Store(expr_0A, 2, alpha);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pixelFormat);
			SZXCArimAPI.UnpinTuple(rowBytes);
			SZXCArimAPI.UnpinTuple(alpha);
			num = HObject.LoadNew(expr_0A, 1, num, out interleavedImage);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(multichannelImage);
		}

		public static void PoseToDualQuat(HTuple pose, out HTuple dualQuaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2080);
			SZXCArimAPI.Store(expr_0A, 0, pose);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(pose);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out dualQuaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void QueryParamsOcrClassCnn(HTuple OCRHandle, out HTuple genParamName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2081);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamName);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadOcrClassCnn(HTuple fileName, out HTuple OCRHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2082);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out OCRHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadTextureInspectionModel(HTuple fileName, out HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2083);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out textureInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RefineSurfaceModelPoseImage(HObject image, HTuple surfaceModelID, HTuple objectModel3D, HTuple initialPose, HTuple minScore, HTuple returnResultHandle, HTuple genParamName, HTuple genParamValue, out HTuple pose, out HTuple score, out HTuple surfaceMatchingResultID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2084);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 2, initialPose);
			SZXCArimAPI.Store(expr_0A, 3, minScore);
			SZXCArimAPI.Store(expr_0A, 4, returnResultHandle);
			SZXCArimAPI.Store(expr_0A, 5, genParamName);
			SZXCArimAPI.Store(expr_0A, 6, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(initialPose);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(returnResultHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out pose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 2, num, out surfaceMatchingResultID);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void RemoveTextureInspectionModelImage(HTuple textureInspectionModel, HTuple indices, out HTuple remainingIndices)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2085);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, indices);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.UnpinTuple(indices);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out remainingIndices);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ScrewToDualQuat(HTuple screwFormat, HTuple axisDirectionX, HTuple axisDirectionY, HTuple axisDirectionZ, HTuple axisMomentOrPointX, HTuple axisMomentOrPointY, HTuple axisMomentOrPointZ, HTuple rotation, HTuple translation, out HTuple dualQuaternion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2086);
			SZXCArimAPI.Store(expr_0A, 0, screwFormat);
			SZXCArimAPI.Store(expr_0A, 1, axisDirectionX);
			SZXCArimAPI.Store(expr_0A, 2, axisDirectionY);
			SZXCArimAPI.Store(expr_0A, 3, axisDirectionZ);
			SZXCArimAPI.Store(expr_0A, 4, axisMomentOrPointX);
			SZXCArimAPI.Store(expr_0A, 5, axisMomentOrPointY);
			SZXCArimAPI.Store(expr_0A, 6, axisMomentOrPointZ);
			SZXCArimAPI.Store(expr_0A, 7, rotation);
			SZXCArimAPI.Store(expr_0A, 8, translation);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(screwFormat);
			SZXCArimAPI.UnpinTuple(axisDirectionX);
			SZXCArimAPI.UnpinTuple(axisDirectionY);
			SZXCArimAPI.UnpinTuple(axisDirectionZ);
			SZXCArimAPI.UnpinTuple(axisMomentOrPointX);
			SZXCArimAPI.UnpinTuple(axisMomentOrPointY);
			SZXCArimAPI.UnpinTuple(axisMomentOrPointZ);
			SZXCArimAPI.UnpinTuple(rotation);
			SZXCArimAPI.UnpinTuple(translation);
			num = HTuple.LoadNew(expr_0A, 0, num, out dualQuaternion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SegmentImageMser(HObject image, out HObject MSERDark, out HObject MSERLight, HTuple polarity, HTuple minArea, HTuple maxArea, HTuple delta, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2087);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 0, polarity);
			SZXCArimAPI.Store(expr_0A, 1, minArea);
			SZXCArimAPI.Store(expr_0A, 2, maxArea);
			SZXCArimAPI.Store(expr_0A, 3, delta);
			SZXCArimAPI.Store(expr_0A, 4, genParamName);
			SZXCArimAPI.Store(expr_0A, 5, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(polarity);
			SZXCArimAPI.UnpinTuple(minArea);
			SZXCArimAPI.UnpinTuple(maxArea);
			SZXCArimAPI.UnpinTuple(delta);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HObject.LoadNew(expr_0A, 1, num, out MSERDark);
			num = HObject.LoadNew(expr_0A, 2, num, out MSERLight);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
		}

		public static void SendMouseDoubleClickEvent(HTuple windowHandle, HTuple row, HTuple column, HTuple button, out HTuple processed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2088);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, button);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(button);
			num = HTuple.LoadNew(expr_0A, 0, num, out processed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendMouseDownEvent(HTuple windowHandle, HTuple row, HTuple column, HTuple button, out HTuple processed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2089);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, button);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(button);
			num = HTuple.LoadNew(expr_0A, 0, num, out processed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendMouseDragEvent(HTuple windowHandle, HTuple row, HTuple column, HTuple button, out HTuple processed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2090);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, button);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(button);
			num = HTuple.LoadNew(expr_0A, 0, num, out processed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SendMouseUpEvent(HTuple windowHandle, HTuple row, HTuple column, HTuple button, out HTuple processed)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2091);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, row);
			SZXCArimAPI.Store(expr_0A, 2, column);
			SZXCArimAPI.Store(expr_0A, 3, button);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(row);
			SZXCArimAPI.UnpinTuple(column);
			SZXCArimAPI.UnpinTuple(button);
			num = HTuple.LoadNew(expr_0A, 0, num, out processed);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeDualQuat(HTuple dualQuaternion, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2092);
			SZXCArimAPI.Store(expr_0A, 0, dualQuaternion);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dualQuaternion);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeOcrClassCnn(HTuple OCRHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2093);
			SZXCArimAPI.Store(expr_0A, 0, OCRHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(OCRHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeTextureInspectionModel(HTuple textureInspectionModel, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2094);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetContentUpdateCallback(HTuple windowHandle, HTuple callbackFunction, HTuple callbackContext)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2095);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, callbackFunction);
			SZXCArimAPI.Store(expr_0A, 2, callbackContext);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(callbackFunction);
			SZXCArimAPI.UnpinTuple(callbackContext);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetRgba(HTuple windowHandle, HTuple red, HTuple green, HTuple blue, HTuple alpha)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2096);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, red);
			SZXCArimAPI.Store(expr_0A, 2, green);
			SZXCArimAPI.Store(expr_0A, 3, blue);
			SZXCArimAPI.Store(expr_0A, 4, alpha);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(red);
			SZXCArimAPI.UnpinTuple(green);
			SZXCArimAPI.UnpinTuple(blue);
			SZXCArimAPI.UnpinTuple(alpha);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetSurfaceModelParam(HTuple surfaceModelID, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2097);
			SZXCArimAPI.Store(expr_0A, 0, surfaceModelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(surfaceModelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetTextureInspectionModelParam(HTuple textureInspectionModel, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2098);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainTextureInspectionModel(HTuple textureInspectionModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2099);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteTextureInspectionModel(HTuple textureInspectionModel, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2100);
			SZXCArimAPI.Store(expr_0A, 0, textureInspectionModel);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(textureInspectionModel);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void UncalibratedPhotometricStereo(HObject images, out HObject normalField, out HObject gradient, out HObject albedo, HTuple resultType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2101);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, resultType);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(resultType);
			num = HObject.LoadNew(expr_0A, 1, num, out normalField);
			num = HObject.LoadNew(expr_0A, 2, num, out gradient);
			num = HObject.LoadNew(expr_0A, 3, num, out albedo);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void ApplyDlClassifier(HObject images, HTuple DLClassifierHandle, out HTuple DLClassifierResultHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2102);
			SZXCArimAPI.Store(expr_0A, 1, images);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLClassifierResultHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(images);
		}

		public static void ClearDlClassifier(HTuple DLClassifierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2103);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDlClassifierResult(HTuple DLClassifierResultHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2104);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierResultHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierResultHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearDlClassifierTrainResult(HTuple DLClassifierTrainResultHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2105);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierTrainResultHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierTrainResultHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearStructuredLightModel(HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2106);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CreateStructuredLightModel(HTuple modelType, out HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2107);
			SZXCArimAPI.Store(expr_0A, 0, modelType);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelType);
			num = HTuple.LoadNew(expr_0A, 0, num, out structuredLightModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DecodeStructuredLightPattern(HObject cameraImages, HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2108);
			SZXCArimAPI.Store(expr_0A, 1, cameraImages);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(cameraImages);
		}

		public static void DeserializeDlClassifier(HTuple serializedItemHandle, out HTuple DLClassifierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2109);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLClassifierHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeStructuredLightModel(HTuple serializedItemHandle, out HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2110);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out structuredLightModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DistanceCcMinPoints(HObject contour1, HObject contour2, HTuple mode, out HTuple distanceMin, out HTuple row1, out HTuple column1, out HTuple row2, out HTuple column2)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2111);
			SZXCArimAPI.Store(expr_0A, 1, contour1);
			SZXCArimAPI.Store(expr_0A, 2, contour2);
			SZXCArimAPI.Store(expr_0A, 0, mode);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			SZXCArimAPI.InitOCT(expr_0A, 4);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(mode);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out distanceMin);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out row1);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out column1);
			num = HTuple.LoadNew(expr_0A, 3, HTupleType.DOUBLE, num, out row2);
			num = HTuple.LoadNew(expr_0A, 4, HTupleType.DOUBLE, num, out column2);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(contour1);
			GC.KeepAlive(contour2);
		}

		public static void FuseObjectModel3d(HTuple objectModel3D, HTuple boundingBox, HTuple resolution, HTuple surfaceTolerance, HTuple minThickness, HTuple smoothing, HTuple normalDirection, HTuple genParamName, HTuple genParamValue, out HTuple objectModel3DFusion)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2112);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, boundingBox);
			SZXCArimAPI.Store(expr_0A, 2, resolution);
			SZXCArimAPI.Store(expr_0A, 3, surfaceTolerance);
			SZXCArimAPI.Store(expr_0A, 4, minThickness);
			SZXCArimAPI.Store(expr_0A, 5, smoothing);
			SZXCArimAPI.Store(expr_0A, 6, normalDirection);
			SZXCArimAPI.Store(expr_0A, 7, genParamName);
			SZXCArimAPI.Store(expr_0A, 8, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(boundingBox);
			SZXCArimAPI.UnpinTuple(resolution);
			SZXCArimAPI.UnpinTuple(surfaceTolerance);
			SZXCArimAPI.UnpinTuple(minThickness);
			SZXCArimAPI.UnpinTuple(smoothing);
			SZXCArimAPI.UnpinTuple(normalDirection);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DFusion);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenStructuredLightPattern(out HObject patternImages, HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2113);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			num = HObject.LoadNew(expr_0A, 1, num, out patternImages);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDlClassifierParam(HTuple DLClassifierHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2114);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDlClassifierResult(HTuple DLClassifierResultHandle, HTuple index, HTuple genResultName, out HTuple genResultValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2115);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierResultHandle);
			SZXCArimAPI.Store(expr_0A, 1, index);
			SZXCArimAPI.Store(expr_0A, 2, genResultName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierResultHandle);
			SZXCArimAPI.UnpinTuple(index);
			SZXCArimAPI.UnpinTuple(genResultName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genResultValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDlClassifierTrainResult(HTuple DLClassifierTrainResultHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2116);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierTrainResultHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierTrainResultHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetStructuredLightModelParam(HTuple structuredLightModel, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2117);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetStructuredLightObject(out HObject objectVal, HTuple structuredLightModel, HTuple objectName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2118);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.Store(expr_0A, 1, objectName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.UnpinTuple(objectName);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HeightWidthRatio(HObject regions, out HTuple height, out HTuple width, out HTuple ratio)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2119);
			SZXCArimAPI.Store(expr_0A, 1, regions);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out height);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out width);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out ratio);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(regions);
		}

		public static void HeightWidthRatioXld(HObject XLD, out HTuple height, out HTuple width, out HTuple ratio)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2120);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out height);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out width);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.DOUBLE, num, out ratio);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void InsertObj(HObject objects, HObject objectsInsert, out HObject objectsExtended, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2121);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 2, objectsInsert);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			num = HObject.LoadNew(expr_0A, 1, num, out objectsExtended);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
			GC.KeepAlive(objectsInsert);
		}

		public static void ReadDlClassifier(HTuple fileName, out HTuple DLClassifierHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2122);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLClassifierHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadStructuredLightModel(HTuple fileName, out HTuple structuredLightModel)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2123);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out structuredLightModel);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveObj(HObject objects, out HObject objectsReduced, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2124);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			num = HObject.LoadNew(expr_0A, 1, num, out objectsReduced);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
		}

		public static void ReplaceObj(HObject objects, HObject objectsReplace, out HObject replaced, HTuple index)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2125);
			SZXCArimAPI.Store(expr_0A, 1, objects);
			SZXCArimAPI.Store(expr_0A, 2, objectsReplace);
			SZXCArimAPI.Store(expr_0A, 0, index);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(index);
			num = HObject.LoadNew(expr_0A, 1, num, out replaced);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(objects);
			GC.KeepAlive(objectsReplace);
		}

		public static void SerializeDlClassifier(HTuple DLClassifierHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2126);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeStructuredLightModel(HTuple structuredLightModel, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2127);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDlClassifierParam(HTuple DLClassifierHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2128);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetOperatorTimeout(HTuple operatorName, HTuple timeout, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2129);
			SZXCArimAPI.Store(expr_0A, 0, operatorName);
			SZXCArimAPI.Store(expr_0A, 1, timeout);
			SZXCArimAPI.Store(expr_0A, 2, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(operatorName);
			SZXCArimAPI.UnpinTuple(timeout);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetStructuredLightModelParam(HTuple structuredLightModel, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2130);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainDlClassifierBatch(HObject batchImages, HTuple DLClassifierHandle, HTuple batchLabels, out HTuple DLClassifierTrainResultHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2131);
			SZXCArimAPI.Store(expr_0A, 1, batchImages);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.Store(expr_0A, 1, batchLabels);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			SZXCArimAPI.UnpinTuple(batchLabels);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLClassifierTrainResultHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(batchImages);
		}

		public static void WriteDlClassifier(HTuple DLClassifierHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2132);
			SZXCArimAPI.Store(expr_0A, 0, DLClassifierHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLClassifierHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteStructuredLightModel(HTuple structuredLightModel, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2133);
			SZXCArimAPI.Store(expr_0A, 0, structuredLightModel);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(structuredLightModel);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ClearHandle(HTuple handle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2134);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void DeserializeHandle(HTuple serializedItem, out HTuple handle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2135);
			SZXCArimAPI.Store(expr_0A, 0, serializedItem);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItem);
			num = HTuple.LoadNew(expr_0A, 0, num, out handle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void HandleToInteger(HTuple handle, out HTuple castedHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2136);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out castedHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void IntegerToHandle(HTuple integerHandle, out HTuple handle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2137);
			SZXCArimAPI.Store(expr_0A, 0, integerHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(integerHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out handle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SerializeHandle(HTuple handle, out HTuple serializedItem)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2138);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItem);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsHandle(HTuple t, out HTuple isHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2139);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsHandleElem(HTuple t, out HTuple isHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2140);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsSerializable(HTuple tuple, out HTuple isSerializable)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2141);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isSerializable);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsSerializableElem(HTuple tuple, out HTuple isSerializableElem)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2142);
			SZXCArimAPI.Store(expr_0A, 0, tuple);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(tuple);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isSerializableElem);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleIsValidHandle(HTuple handle, out HTuple isValid)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2143);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out isValid);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSemType(HTuple t, out HTuple semType)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2144);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out semType);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void TupleSemTypeElem(HTuple t, out HTuple semTypes)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2145);
			SZXCArimAPI.Store(expr_0A, 0, t);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(t);
			num = HTuple.LoadNew(expr_0A, 0, num, out semTypes);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ApplyDlModel(HTuple DLModelHandle, HTuple DLSampleBatch, HTuple outputs, out HTuple DLResultBatch)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2146);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, DLSampleBatch);
			SZXCArimAPI.Store(expr_0A, 2, outputs);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(DLSampleBatch);
			SZXCArimAPI.UnpinTuple(outputs);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLResultBatch);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ClearDlModel(HTuple DLModelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2147);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void CopyDict(HTuple dictHandle, HTuple genParamName, HTuple genParamValue, out HTuple copiedDictHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2148);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out copiedDictHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDict(out HTuple dictHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2149);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, num, out dictHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void CreateDlModelDetection(HTuple backbone, HTuple numClasses, HTuple DLModelDetectionParam, out HTuple DLModelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2150);
			SZXCArimAPI.Store(expr_0A, 0, backbone);
			SZXCArimAPI.Store(expr_0A, 1, numClasses);
			SZXCArimAPI.Store(expr_0A, 2, DLModelDetectionParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(backbone);
			SZXCArimAPI.UnpinTuple(numClasses);
			SZXCArimAPI.UnpinTuple(DLModelDetectionParam);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLModelHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void DeserializeDlModel(HTuple serializedItemHandle, out HTuple DLModelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2151);
			SZXCArimAPI.Store(expr_0A, 0, serializedItemHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(serializedItemHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLModelHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetCurrentHthreadId(out HTuple HThreadID)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2152);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out HThreadID);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDictObject(out HObject objectVal, HTuple dictHandle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2153);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(key);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDictParam(HTuple dictHandle, HTuple genParamName, HTuple key, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2154);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDictTuple(HTuple dictHandle, HTuple key, out HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2155);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out tuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetDlModelParam(HTuple DLModelHandle, HTuple genParamName, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2156);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetHandleObject(out HObject objectVal, HTuple handle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2157);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			SZXCArimAPI.UnpinTuple(key);
			num = HObject.LoadNew(expr_0A, 1, num, out objectVal);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetHandleParam(HTuple handle, HTuple genParamName, HTuple key, out HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2158);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetHandleTuple(HTuple handle, HTuple key, out HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2159);
			SZXCArimAPI.Store(expr_0A, 0, handle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(handle);
			SZXCArimAPI.UnpinTuple(key);
			num = HTuple.LoadNew(expr_0A, 0, num, out tuple);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetSystemInfo(HTuple query, out HTuple information)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2160);
			SZXCArimAPI.Store(expr_0A, 0, query);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(query);
			num = HTuple.LoadNew(expr_0A, 0, num, out information);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void InterruptOperator(HTuple HThreadID, HTuple mode)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2161);
			SZXCArimAPI.Store(expr_0A, 0, HThreadID);
			SZXCArimAPI.Store(expr_0A, 1, mode);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(HThreadID);
			SZXCArimAPI.UnpinTuple(mode);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void ReadDict(HTuple fileName, HTuple genParamName, HTuple genParamValue, out HTuple dictHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2162);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out dictHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadDlModel(HTuple fileName, out HTuple DLModelHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2163);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLModelHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadMessage(HTuple fileName, HTuple genParamName, HTuple genParamValue, out HTuple messageHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2164);
			SZXCArimAPI.Store(expr_0A, 0, fileName);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			num = HTuple.LoadNew(expr_0A, 0, num, out messageHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveDictKey(HTuple dictHandle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2165);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SendKeyPressEvent(HTuple windowHandle, HTuple charVal, HTuple code)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2166);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, charVal);
			SZXCArimAPI.Store(expr_0A, 2, code);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(charVal);
			SZXCArimAPI.UnpinTuple(code);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SendKeyReleaseEvent(HTuple windowHandle, HTuple charVal, HTuple code)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2167);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, charVal);
			SZXCArimAPI.Store(expr_0A, 2, code);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(charVal);
			SZXCArimAPI.UnpinTuple(code);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SerializeDlModel(HTuple DLModelHandle, out HTuple serializedItemHandle)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2168);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out serializedItemHandle);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetDictObject(HObject objectVal, HTuple dictHandle, HTuple key)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2169);
			SZXCArimAPI.Store(expr_0A, 1, objectVal);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(objectVal);
		}

		public static void SetDictTuple(HTuple dictHandle, HTuple key, HTuple tuple)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2170);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, key);
			SZXCArimAPI.Store(expr_0A, 2, tuple);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(key);
			SZXCArimAPI.UnpinTuple(tuple);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetDlModelParam(HTuple DLModelHandle, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2171);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.Store(expr_0A, 2, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainDlModelBatch(HTuple DLModelHandle, HTuple DLSampleBatch, out HTuple DLTrainResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2172);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, DLSampleBatch);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(DLSampleBatch);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLTrainResult);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WriteDict(HTuple dictHandle, HTuple fileName, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2173);
			SZXCArimAPI.Store(expr_0A, 0, dictHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(dictHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteDlModel(HTuple DLModelHandle, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2174);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void WriteMessage(HTuple messageHandle, HTuple fileName, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2175);
			SZXCArimAPI.Store(expr_0A, 0, messageHandle);
			SZXCArimAPI.Store(expr_0A, 1, fileName);
			SZXCArimAPI.Store(expr_0A, 2, genParamName);
			SZXCArimAPI.Store(expr_0A, 3, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(messageHandle);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void AreaIntersectionRectangle2(HTuple rect1Row, HTuple rect1Column, HTuple rect1Phi, HTuple rect1Length1, HTuple rect1Length2, HTuple rect2Row, HTuple rect2Column, HTuple rect2Phi, HTuple rect2Length1, HTuple rect2Length2, out HTuple areaIntersection)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2176);
			SZXCArimAPI.Store(expr_0A, 0, rect1Row);
			SZXCArimAPI.Store(expr_0A, 1, rect1Column);
			SZXCArimAPI.Store(expr_0A, 2, rect1Phi);
			SZXCArimAPI.Store(expr_0A, 3, rect1Length1);
			SZXCArimAPI.Store(expr_0A, 4, rect1Length2);
			SZXCArimAPI.Store(expr_0A, 5, rect2Row);
			SZXCArimAPI.Store(expr_0A, 6, rect2Column);
			SZXCArimAPI.Store(expr_0A, 7, rect2Phi);
			SZXCArimAPI.Store(expr_0A, 8, rect2Length1);
			SZXCArimAPI.Store(expr_0A, 9, rect2Length2);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(rect1Row);
			SZXCArimAPI.UnpinTuple(rect1Column);
			SZXCArimAPI.UnpinTuple(rect1Phi);
			SZXCArimAPI.UnpinTuple(rect1Length1);
			SZXCArimAPI.UnpinTuple(rect1Length2);
			SZXCArimAPI.UnpinTuple(rect2Row);
			SZXCArimAPI.UnpinTuple(rect2Column);
			SZXCArimAPI.UnpinTuple(rect2Phi);
			SZXCArimAPI.UnpinTuple(rect2Length1);
			SZXCArimAPI.UnpinTuple(rect2Length2);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out areaIntersection);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetContourStyle(HTuple windowHandle, out HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2177);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			num = HTuple.LoadNew(expr_0A, 0, num, out style);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GetShapeModelClutter(out HObject clutterRegion, HTuple modelID, HTuple genParamName, out HTuple genParamValue, out HTuple homMat2D, out HTuple clutterContrast)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2178);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, genParamName);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(genParamName);
			num = HObject.LoadNew(expr_0A, 1, num, out clutterRegion);
			num = HTuple.LoadNew(expr_0A, 0, num, out genParamValue);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out homMat2D);
			num = HTuple.LoadNew(expr_0A, 2, HTupleType.INTEGER, num, out clutterContrast);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void SetContourStyle(HTuple windowHandle, HTuple style)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2179);
			SZXCArimAPI.Store(expr_0A, 0, windowHandle);
			SZXCArimAPI.Store(expr_0A, 1, style);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(windowHandle);
			SZXCArimAPI.UnpinTuple(style);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void SetShapeModelClutter(HObject clutterRegion, HTuple modelID, HTuple homMat2D, HTuple clutterContrast, HTuple genParamName, HTuple genParamValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2180);
			SZXCArimAPI.Store(expr_0A, 1, clutterRegion);
			SZXCArimAPI.Store(expr_0A, 0, modelID);
			SZXCArimAPI.Store(expr_0A, 1, homMat2D);
			SZXCArimAPI.Store(expr_0A, 2, clutterContrast);
			SZXCArimAPI.Store(expr_0A, 3, genParamName);
			SZXCArimAPI.Store(expr_0A, 4, genParamValue);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(modelID);
			SZXCArimAPI.UnpinTuple(homMat2D);
			SZXCArimAPI.UnpinTuple(clutterContrast);
			SZXCArimAPI.UnpinTuple(genParamName);
			SZXCArimAPI.UnpinTuple(genParamValue);
			SZXCArimAPI.PostCall(expr_0A, procResult);
			GC.KeepAlive(clutterRegion);
		}

		public static void FindBox3d(HTuple objectModel3DScene, HTuple sideLen1, HTuple sideLen2, HTuple sideLen3, HTuple minScore, HTuple genParam, out HTuple grippingPose, out HTuple score, out HTuple objectModel3DBox, out HTuple boxInformation)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2181);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3DScene);
			SZXCArimAPI.Store(expr_0A, 1, sideLen1);
			SZXCArimAPI.Store(expr_0A, 2, sideLen2);
			SZXCArimAPI.Store(expr_0A, 3, sideLen3);
			SZXCArimAPI.Store(expr_0A, 4, minScore);
			SZXCArimAPI.Store(expr_0A, 5, genParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			SZXCArimAPI.InitOCT(expr_0A, 2);
			SZXCArimAPI.InitOCT(expr_0A, 3);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3DScene);
			SZXCArimAPI.UnpinTuple(sideLen1);
			SZXCArimAPI.UnpinTuple(sideLen2);
			SZXCArimAPI.UnpinTuple(sideLen3);
			SZXCArimAPI.UnpinTuple(minScore);
			SZXCArimAPI.UnpinTuple(genParam);
			num = HTuple.LoadNew(expr_0A, 0, num, out grippingPose);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.DOUBLE, num, out score);
			num = HTuple.LoadNew(expr_0A, 2, num, out objectModel3DBox);
			num = HTuple.LoadNew(expr_0A, 3, num, out boxInformation);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FreadBytes(HTuple fileHandle, HTuple numberOfBytes, out HTuple readData, out HTuple isEOF)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2182);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.Store(expr_0A, 1, numberOfBytes);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.UnpinTuple(numberOfBytes);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out readData);
			num = HTuple.LoadNew(expr_0A, 1, HTupleType.INTEGER, num, out isEOF);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void FwriteBytes(HTuple fileHandle, HTuple dataToWrite, out HTuple numberOfBytesWritten)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2183);
			SZXCArimAPI.Store(expr_0A, 0, fileHandle);
			SZXCArimAPI.Store(expr_0A, 1, dataToWrite);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(fileHandle);
			SZXCArimAPI.UnpinTuple(dataToWrite);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.INTEGER, num, out numberOfBytesWritten);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void GenDlModelHeatmap(HTuple DLModelHandle, HTuple DLSample, HTuple heatmapMethod, HTuple targetClasses, HTuple genParam, out HTuple DLResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2184);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, DLSample);
			SZXCArimAPI.Store(expr_0A, 2, heatmapMethod);
			SZXCArimAPI.Store(expr_0A, 3, targetClasses);
			SZXCArimAPI.Store(expr_0A, 4, genParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(DLSample);
			SZXCArimAPI.UnpinTuple(heatmapMethod);
			SZXCArimAPI.UnpinTuple(targetClasses);
			SZXCArimAPI.UnpinTuple(genParam);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLResult);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void ReadImageMetadata(HTuple format, HTuple tagName, HTuple fileName, out HTuple tagValue)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2185);
			SZXCArimAPI.Store(expr_0A, 0, format);
			SZXCArimAPI.Store(expr_0A, 1, tagName);
			SZXCArimAPI.Store(expr_0A, 2, fileName);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(format);
			SZXCArimAPI.UnpinTuple(tagName);
			SZXCArimAPI.UnpinTuple(fileName);
			num = HTuple.LoadNew(expr_0A, 0, num, out tagValue);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RectangularityXld(HObject XLD, out HTuple rectangularity)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2186);
			SZXCArimAPI.Store(expr_0A, 1, XLD);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HTuple.LoadNew(expr_0A, 0, HTupleType.DOUBLE, num, out rectangularity);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(XLD);
		}

		public static void RemoveObjectModel3dAttrib(HTuple objectModel3D, HTuple attributes, out HTuple objectModel3DOut)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2187);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attributes);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attributes);
			num = HTuple.LoadNew(expr_0A, 0, num, out objectModel3DOut);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void RemoveObjectModel3dAttribMod(HTuple objectModel3D, HTuple attributes)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2188);
			SZXCArimAPI.Store(expr_0A, 0, objectModel3D);
			SZXCArimAPI.Store(expr_0A, 1, attributes);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(objectModel3D);
			SZXCArimAPI.UnpinTuple(attributes);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}

		public static void TrainDlModelAnomalyDataset(HTuple DLModelHandle, HTuple DLSamples, HTuple DLTrainParam, out HTuple DLTrainResult)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2189);
			SZXCArimAPI.Store(expr_0A, 0, DLModelHandle);
			SZXCArimAPI.Store(expr_0A, 1, DLSamples);
			SZXCArimAPI.Store(expr_0A, 2, DLTrainParam);
			SZXCArimAPI.InitOCT(expr_0A, 0);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(DLModelHandle);
			SZXCArimAPI.UnpinTuple(DLSamples);
			SZXCArimAPI.UnpinTuple(DLTrainParam);
			num = HTuple.LoadNew(expr_0A, 0, num, out DLTrainResult);
			SZXCArimAPI.PostCall(expr_0A, num);
		}

		public static void WatershedsMarker(HObject image, HObject markers, out HObject basins)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2190);
			SZXCArimAPI.Store(expr_0A, 1, image);
			SZXCArimAPI.Store(expr_0A, 2, markers);
			SZXCArimAPI.InitOCT(expr_0A, 1);
			int num = SZXCArimAPI.CallProcedure(expr_0A);
			num = HObject.LoadNew(expr_0A, 1, num, out basins);
			SZXCArimAPI.PostCall(expr_0A, num);
			GC.KeepAlive(image);
			GC.KeepAlive(markers);
		}

		public static void WriteImageMetadata(HTuple format, HTuple tagName, HTuple tagValue, HTuple fileName)
		{
			IntPtr expr_0A = SZXCArimAPI.PreCall(2191);
			SZXCArimAPI.Store(expr_0A, 0, format);
			SZXCArimAPI.Store(expr_0A, 1, tagName);
			SZXCArimAPI.Store(expr_0A, 2, tagValue);
			SZXCArimAPI.Store(expr_0A, 3, fileName);
			int procResult = SZXCArimAPI.CallProcedure(expr_0A);
			SZXCArimAPI.UnpinTuple(format);
			SZXCArimAPI.UnpinTuple(tagName);
			SZXCArimAPI.UnpinTuple(tagValue);
			SZXCArimAPI.UnpinTuple(fileName);
			SZXCArimAPI.PostCall(expr_0A, procResult);
		}
	}
}
